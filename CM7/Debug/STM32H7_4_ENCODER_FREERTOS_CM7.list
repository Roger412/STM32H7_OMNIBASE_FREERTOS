
STM32H7_4_ENCODER_FREERTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016560  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  08016800  08016800  00017800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017788  08017788  000191e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017788  08017788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017790  08017790  000191e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017790  08017790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017794  08017794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  24000000  08017798  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  240001e8  08017980  000191e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005258  08017980  00019258  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000191e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294fa  00000000  00000000  00019216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b19  00000000  00000000  00042710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00047230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000184a  00000000  00000000  00049150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e319  00000000  00000000  0004a99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269ab  00000000  00000000  00088cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001969e5  00000000  00000000  000af65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00246043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d6c  00000000  00000000  00246088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0024fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080167e8 	.word	0x080167e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080167e8 	.word	0x080167e8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <SystemInit+0xfc>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba0 <SystemInit+0xfc>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <SystemInit+0xfc>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a38      	ldr	r2, [pc, #224]	@ (8000ba0 <SystemInit+0xfc>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <SystemInit+0x100>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <SystemInit+0x100>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a32      	ldr	r2, [pc, #200]	@ (8000ba4 <SystemInit+0x100>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <SystemInit+0x104>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <SystemInit+0x104>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <SystemInit+0x104>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <SystemInit+0x104>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	492c      	ldr	r1, [pc, #176]	@ (8000ba8 <SystemInit+0x104>)
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <SystemInit+0x108>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <SystemInit+0x100>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <SystemInit+0x100>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <SystemInit+0x100>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <SystemInit+0x104>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <SystemInit+0x104>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <SystemInit+0x10c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <SystemInit+0x104>)
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <SystemInit+0x110>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <SystemInit+0x104>)
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <SystemInit+0x114>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <SystemInit+0x104>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <SystemInit+0x104>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <SystemInit+0x114>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <SystemInit+0x104>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <SystemInit+0x104>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	@ (8000bb8 <SystemInit+0x114>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <SystemInit+0x104>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <SystemInit+0x104>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <SystemInit+0x104>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <SystemInit+0x104>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <SystemInit+0x118>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <SystemInit+0x118>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <SystemInit+0x11c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <SystemInit+0x120>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <SystemInit+0x124>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <SystemInit+0x128>)
 8000b90:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	580000c0 	.word	0x580000c0
 8000bc0:	5c001000 	.word	0x5c001000
 8000bc4:	ffff0000 	.word	0xffff0000
 8000bc8:	51008108 	.word	0x51008108
 8000bcc:	52004000 	.word	0x52004000

08000bd0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 f9e4 	bl	8000fac <bno055_writeData>
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	203d      	movs	r0, #61	@ 0x3d
 8000bfc:	f000 f9d6 	bl	8000fac <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000c06:	2013      	movs	r0, #19
 8000c08:	f000 f9c4 	bl	8000f94 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000c0c:	e002      	b.n	8000c14 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 f9c0 	bl	8000f94 <bno055_delay>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ffe3 	bl	8000bec <bno055_setOperationMode>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f7ff ffdc 	bl	8000bec <bno055_setOperationMode>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	203f      	movs	r0, #63	@ 0x3f
 8000c40:	f000 f9b4 	bl	8000fac <bno055_writeData>
  bno055_delay(700);
 8000c44:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000c48:	f000 f9a4 	bl	8000f94 <bno055_delay>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  bno055_reset();
 8000c56:	f7ff ffef 	bl	8000c38 <bno055_reset>

  uint8_t id = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa8d 	bl	8001184 <bno055_readData>
  if (id != BNO055_ID) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c6e:	d004      	beq.n	8000c7a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <bno055_setup+0x4c>)
 8000c76:	f010 fe79 	bl	801196c <iprintf>
  }
  bno055_setPage(0);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ffa8 	bl	8000bd0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	203f      	movs	r0, #63	@ 0x3f
 8000c84:	f000 f992 	bl	8000fac <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000c88:	f7ff ffc8 	bl	8000c1c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f000 f981 	bl	8000f94 <bno055_delay>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08016800 	.word	0x08016800

08000ca0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ca4:	b09e      	sub	sp, #120	@ 0x78
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff ff8e 	bl	8000bd0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cb8:	2b20      	cmp	r3, #32
 8000cba:	d108      	bne.n	8000cce <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000cbc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fa5c 	bl	8001184 <bno055_readData>
 8000ccc:	e007      	b.n	8000cde <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000cce:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fa53 	bl	8001184 <bno055_readData>

  double scale = 1;
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	4b84      	ldr	r3, [pc, #528]	@ (8000ef4 <bno055_getVector+0x254>)
 8000ce4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cec:	2b0e      	cmp	r3, #14
 8000cee:	d108      	bne.n	8000d02 <bno055_getVector+0x62>
    scale = magScale;
 8000cf0:	4b81      	ldr	r3, [pc, #516]	@ (8000ef8 <bno055_getVector+0x258>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cfc:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d00:	e03a      	b.n	8000d78 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d007      	beq.n	8000d1a <bno055_getVector+0x7a>
 8000d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d0e:	2b28      	cmp	r3, #40	@ 0x28
 8000d10:	d003      	beq.n	8000d1a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d16:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d18:	d108      	bne.n	8000d2c <bno055_getVector+0x8c>
    scale = accelScale;
 8000d1a:	4b78      	ldr	r3, [pc, #480]	@ (8000efc <bno055_getVector+0x25c>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d26:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d2a:	e025      	b.n	8000d78 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d30:	2b14      	cmp	r3, #20
 8000d32:	d108      	bne.n	8000d46 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000d34:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <bno055_getVector+0x260>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d40:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d44:	e018      	b.n	8000d78 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d4a:	2b1a      	cmp	r3, #26
 8000d4c:	d108      	bne.n	8000d60 <bno055_getVector+0xc0>
    scale = eulerScale;
 8000d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f04 <bno055_getVector+0x264>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d5a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d5e:	e00b      	b.n	8000d78 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d107      	bne.n	8000d78 <bno055_getVector+0xd8>
    scale = quaScale;
 8000d68:	4b67      	ldr	r3, [pc, #412]	@ (8000f08 <bno055_getVector+0x268>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d74:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000d78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f011 f83f 	bl	8011e04 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d8a:	2b20      	cmp	r3, #32
 8000d8c:	d150      	bne.n	8000e30 <bno055_getVector+0x190>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000d8e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000daa:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000dae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000db2:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000db6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000dd2:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000dd6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dda:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000dde:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000dfa:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000dfe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e02:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000e06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e22:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e2a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000e2e:	e03b      	b.n	8000ea8 <bno055_getVector+0x208>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000e30:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e4c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e54:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000e58:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e74:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e7c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000e80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e9c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000ea0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ea4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 8000ea8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000eac:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ebc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000ec0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000ec4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000ec8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ecc:	ec49 8b14 	vmov	d4, r8, r9
 8000ed0:	ec45 4b15 	vmov	d5, r4, r5
 8000ed4:	ec41 0b16 	vmov	d6, r0, r1
 8000ed8:	ec43 2b17 	vmov	d7, r2, r3
}
 8000edc:	eeb0 0b44 	vmov.f64	d0, d4
 8000ee0:	eeb0 1b45 	vmov.f64	d1, d5
 8000ee4:	eeb0 2b46 	vmov.f64	d2, d6
 8000ee8:	eeb0 3b47 	vmov.f64	d3, d7
 8000eec:	3778      	adds	r7, #120	@ 0x78
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ef4:	3ff00000 	.word	0x3ff00000
 8000ef8:	2400000e 	.word	0x2400000e
 8000efc:	24000008 	.word	0x24000008
 8000f00:	2400000a 	.word	0x2400000a
 8000f04:	2400000c 	.word	0x2400000c
 8000f08:	24000010 	.word	0x24000010

08000f0c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000f0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f10:	b090      	sub	sp, #64	@ 0x40
 8000f12:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000f14:	201a      	movs	r0, #26
 8000f16:	f7ff fec3 	bl	8000ca0 <bno055_getVector>
 8000f1a:	eeb0 4b40 	vmov.f64	d4, d0
 8000f1e:	eeb0 5b41 	vmov.f64	d5, d1
 8000f22:	eeb0 6b42 	vmov.f64	d6, d2
 8000f26:	eeb0 7b43 	vmov.f64	d7, d3
 8000f2a:	ed87 4b08 	vstr	d4, [r7, #32]
 8000f2e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000f32:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000f36:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000f3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000f3e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000f42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000f46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f4a:	ec49 8b14 	vmov	d4, r8, r9
 8000f4e:	ec45 4b15 	vmov	d5, r4, r5
 8000f52:	ec41 0b16 	vmov	d6, r0, r1
 8000f56:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f5a:	eeb0 0b44 	vmov.f64	d0, d4
 8000f5e:	eeb0 1b45 	vmov.f64	d1, d5
 8000f62:	eeb0 2b46 	vmov.f64	d2, d6
 8000f66:	eeb0 3b47 	vmov.f64	d3, d7
 8000f6a:	3740      	adds	r7, #64	@ 0x40
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000f74 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <bno055_assignI2C+0x1c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	24000204 	.word	0x24000204

08000f94 <bno055_delay>:

void bno055_delay(int time) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fe38 	bl	8004c14 <HAL_Delay>
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	733b      	strb	r3, [r7, #12]
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8001130 <bno055_writeData+0x184>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	230a      	movs	r3, #10
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	2150      	movs	r1, #80	@ 0x50
 8000fd4:	f004 ff26 	bl	8005e24 <HAL_I2C_Master_Transmit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80a0 	beq.w	8001124 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d103      	bne.n	8000ff2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000fea:	4852      	ldr	r0, [pc, #328]	@ (8001134 <bno055_writeData+0x188>)
 8000fec:	f010 fd26 	bl	8011a3c <puts>
 8000ff0:	e012      	b.n	8001018 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d103      	bne.n	8001000 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ff8:	484f      	ldr	r0, [pc, #316]	@ (8001138 <bno055_writeData+0x18c>)
 8000ffa:	f010 fd1f 	bl	8011a3c <puts>
 8000ffe:	e00b      	b.n	8001018 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d103      	bne.n	800100e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001006:	484d      	ldr	r0, [pc, #308]	@ (800113c <bno055_writeData+0x190>)
 8001008:	f010 fd18 	bl	8011a3c <puts>
 800100c:	e004      	b.n	8001018 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	4619      	mov	r1, r3
 8001012:	484b      	ldr	r0, [pc, #300]	@ (8001140 <bno055_writeData+0x194>)
 8001014:	f010 fcaa 	bl	801196c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001018:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <bno055_writeData+0x184>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f005 f91d 	bl	800625c <HAL_I2C_GetError>
 8001022:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d07e      	beq.n	8001128 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d103      	bne.n	8001038 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001030:	4844      	ldr	r0, [pc, #272]	@ (8001144 <bno055_writeData+0x198>)
 8001032:	f010 fd03 	bl	8011a3c <puts>
 8001036:	e02f      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d103      	bne.n	8001046 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800103e:	4842      	ldr	r0, [pc, #264]	@ (8001148 <bno055_writeData+0x19c>)
 8001040:	f010 fcfc 	bl	8011a3c <puts>
 8001044:	e028      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d103      	bne.n	8001054 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800104c:	483f      	ldr	r0, [pc, #252]	@ (800114c <bno055_writeData+0x1a0>)
 800104e:	f010 fcf5 	bl	8011a3c <puts>
 8001052:	e021      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b08      	cmp	r3, #8
 8001058:	d103      	bne.n	8001062 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800105a:	483d      	ldr	r0, [pc, #244]	@ (8001150 <bno055_writeData+0x1a4>)
 800105c:	f010 fcee 	bl	8011a3c <puts>
 8001060:	e01a      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2b10      	cmp	r3, #16
 8001066:	d103      	bne.n	8001070 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001068:	483a      	ldr	r0, [pc, #232]	@ (8001154 <bno055_writeData+0x1a8>)
 800106a:	f010 fce7 	bl	8011a3c <puts>
 800106e:	e013      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d103      	bne.n	800107e <bno055_writeData+0xd2>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001076:	4838      	ldr	r0, [pc, #224]	@ (8001158 <bno055_writeData+0x1ac>)
 8001078:	f010 fce0 	bl	8011a3c <puts>
 800107c:	e00c      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b20      	cmp	r3, #32
 8001082:	d103      	bne.n	800108c <bno055_writeData+0xe0>
	printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001084:	4835      	ldr	r0, [pc, #212]	@ (800115c <bno055_writeData+0x1b0>)
 8001086:	f010 fcd9 	bl	8011a3c <puts>
 800108a:	e005      	b.n	8001098 <bno055_writeData+0xec>
  } else if (error != HAL_I2C_ERROR_NONE) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <bno055_writeData+0xec>
	printf("HAL_I2C_STATE_ERROR\r\n");
 8001092:	4833      	ldr	r0, [pc, #204]	@ (8001160 <bno055_writeData+0x1b4>)
 8001094:	f010 fcd2 	bl	8011a3c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <bno055_writeData+0x184>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f005 f8cf 	bl	8006240 <HAL_I2C_GetState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]

  if (state == HAL_I2C_STATE_RESET) {
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_RESET\r\n");
 80010ac:	482d      	ldr	r0, [pc, #180]	@ (8001164 <bno055_writeData+0x1b8>)
 80010ae:	f010 fcc5 	bl	8011a3c <puts>
 80010b2:	e03a      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b20      	cmp	r3, #32
 80010b8:	d103      	bne.n	80010c2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_RESET\r\n");
 80010ba:	482a      	ldr	r0, [pc, #168]	@ (8001164 <bno055_writeData+0x1b8>)
 80010bc:	f010 fcbe 	bl	8011a3c <puts>
 80010c0:	e033      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b24      	cmp	r3, #36	@ 0x24
 80010c6:	d103      	bne.n	80010d0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80010c8:	4827      	ldr	r0, [pc, #156]	@ (8001168 <bno055_writeData+0x1bc>)
 80010ca:	f010 fcb7 	bl	8011a3c <puts>
 80010ce:	e02c      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b21      	cmp	r3, #33	@ 0x21
 80010d4:	d103      	bne.n	80010de <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80010d6:	4825      	ldr	r0, [pc, #148]	@ (800116c <bno055_writeData+0x1c0>)
 80010d8:	f010 fcb0 	bl	8011a3c <puts>
 80010dc:	e025      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b22      	cmp	r3, #34	@ 0x22
 80010e2:	d103      	bne.n	80010ec <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80010e4:	4822      	ldr	r0, [pc, #136]	@ (8001170 <bno055_writeData+0x1c4>)
 80010e6:	f010 fca9 	bl	8011a3c <puts>
 80010ea:	e01e      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b28      	cmp	r3, #40	@ 0x28
 80010f0:	d103      	bne.n	80010fa <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80010f2:	4820      	ldr	r0, [pc, #128]	@ (8001174 <bno055_writeData+0x1c8>)
 80010f4:	f010 fca2 	bl	8011a3c <puts>
 80010f8:	e017      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b29      	cmp	r3, #41	@ 0x29
 80010fe:	d103      	bne.n	8001108 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001100:	481d      	ldr	r0, [pc, #116]	@ (8001178 <bno055_writeData+0x1cc>)
 8001102:	f010 fc9b 	bl	8011a3c <puts>
 8001106:	e010      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b2a      	cmp	r3, #42	@ 0x2a
 800110c:	d103      	bne.n	8001116 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800110e:	481b      	ldr	r0, [pc, #108]	@ (800117c <bno055_writeData+0x1d0>)
 8001110:	f010 fc94 	bl	8011a3c <puts>
 8001114:	e009      	b.n	800112a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b60      	cmp	r3, #96	@ 0x60
 800111a:	d106      	bne.n	800112a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800111c:	4818      	ldr	r0, [pc, #96]	@ (8001180 <bno055_writeData+0x1d4>)
 800111e:	f010 fc8d 	bl	8011a3c <puts>
 8001122:	e002      	b.n	800112a <bno055_writeData+0x17e>
    return;
 8001124:	bf00      	nop
 8001126:	e000      	b.n	800112a <bno055_writeData+0x17e>
    return;
 8001128:	bf00      	nop
  }

  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24000204 	.word	0x24000204
 8001134:	08016840 	.word	0x08016840
 8001138:	08016864 	.word	0x08016864
 800113c:	0801688c 	.word	0x0801688c
 8001140:	080168b0 	.word	0x080168b0
 8001144:	080168c8 	.word	0x080168c8
 8001148:	080168dc 	.word	0x080168dc
 800114c:	080168f0 	.word	0x080168f0
 8001150:	08016904 	.word	0x08016904
 8001154:	08016918 	.word	0x08016918
 8001158:	0801692c 	.word	0x0801692c
 800115c:	08016944 	.word	0x08016944
 8001160:	0801695c 	.word	0x0801695c
 8001164:	08016974 	.word	0x08016974
 8001168:	0801698c 	.word	0x0801698c
 800116c:	080169a0 	.word	0x080169a0
 8001170:	080169b8 	.word	0x080169b8
 8001174:	080169d0 	.word	0x080169d0
 8001178:	080169e8 	.word	0x080169e8
 800117c:	08016a08 	.word	0x08016a08
 8001180:	08016a28 	.word	0x08016a28

08001184 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <bno055_readData+0x40>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	1dfa      	adds	r2, r7, #7
 800119a:	2364      	movs	r3, #100	@ 0x64
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2150      	movs	r1, #80	@ 0x50
 80011a2:	f004 fe3f 	bl	8005e24 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <bno055_readData+0x40>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	2264      	movs	r2, #100	@ 0x64
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	2150      	movs	r1, #80	@ 0x50
 80011b6:	f004 ff4d 	bl	8006054 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000204 	.word	0x24000204

080011c8 <computeDeltaCNT>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t computeDeltaCNT(uint16_t current, uint16_t previous) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
	int16_t delta = (int16_t)(current - previous);
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	81fb      	strh	r3, [r7, #14]
	if (delta > 32767) delta -= 65536;
	else if (delta < -32767) delta += 65536;
 80011e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
	return delta;
 80011ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <setMotorDirection>:

void setMotorDirection(GPIO_TypeDef *port, uint16_t pin1, uint16_t pin2, uint8_t dir) {
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4603      	mov	r3, r0
 800120a:	817b      	strh	r3, [r7, #10]
 800120c:	460b      	mov	r3, r1
 800120e:	813b      	strh	r3, [r7, #8]
 8001210:	4613      	mov	r3, r2
 8001212:	71fb      	strb	r3, [r7, #7]
	if (dir < 2) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d82e      	bhi.n	8001278 <setMotorDirection+0x7e>
		dir ? (port->ODR |= (1 << pin1)) : (port->ODR &= ~(1 << pin1));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <setMotorDirection+0x3a>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	897a      	ldrh	r2, [r7, #10]
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	e009      	b.n	8001248 <setMotorDirection+0x4e>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	897a      	ldrh	r2, [r7, #10]
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	43d2      	mvns	r2, r2
 8001242:	401a      	ands	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	615a      	str	r2, [r3, #20]
		!dir ? (port->ODR |= (1 << pin2)) : (port->ODR &= ~(1 << pin2));
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <setMotorDirection+0x68>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	893a      	ldrh	r2, [r7, #8]
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	431a      	orrs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	615a      	str	r2, [r3, #20]
	} else {
		port->ODR &= ~(1 << pin1);
		port->ODR &= ~(1 << pin2);
	}
}
 8001260:	e01e      	b.n	80012a0 <setMotorDirection+0xa6>
		!dir ? (port->ODR |= (1 << pin2)) : (port->ODR &= ~(1 << pin2));
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	893a      	ldrh	r2, [r7, #8]
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	43d2      	mvns	r2, r2
 8001270:	401a      	ands	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	615a      	str	r2, [r3, #20]
}
 8001276:	e013      	b.n	80012a0 <setMotorDirection+0xa6>
		port->ODR &= ~(1 << pin1);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	897a      	ldrh	r2, [r7, #10]
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	43d2      	mvns	r2, r2
 8001286:	401a      	ands	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	615a      	str	r2, [r3, #20]
		port->ODR &= ~(1 << pin2);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	893a      	ldrh	r2, [r7, #8]
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	43d2      	mvns	r2, r2
 800129a:	401a      	ands	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	615a      	str	r2, [r3, #20]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <computeNecessaryWheelSpeeds>:


int computeNecessaryWheelSpeeds(double phi, double d, double r, double u[4], double phi_dot, double y_dot, double x_dot) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	ed2d 8b02 	vpush	{d8}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80012ba:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80012be:	ed87 2b08 	vstr	d2, [r7, #32]
 80012c2:	61f8      	str	r0, [r7, #28]
 80012c4:	ed87 3b04 	vstr	d3, [r7, #16]
 80012c8:	ed87 4b02 	vstr	d4, [r7, #8]
 80012cc:	ed87 5b00 	vstr	d5, [r7]
	u[0] = (d * phi_dot + y_dot * cos(phi) - x_dot * sin(phi)) / r;
 80012d0:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80012d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80012d8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012dc:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012e0:	f014 fc76 	bl	8015bd0 <cos>
 80012e4:	eeb0 6b40 	vmov.f64	d6, d0
 80012e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80012ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80012f4:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012f8:	f014 fcb6 	bl	8015c68 <sin>
 80012fc:	eeb0 6b40 	vmov.f64	d6, d0
 8001300:	ed97 7b00 	vldr	d7, [r7]
 8001304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001308:	ee38 5b47 	vsub.f64	d5, d8, d7
 800130c:	ed97 6b08 	vldr	d6, [r7, #32]
 8001310:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	ed83 7b00 	vstr	d7, [r3]
    u[1] = (d * phi_dot - x_dot * cos(phi) - y_dot * sin(phi)) / r;
 800131a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800131e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001322:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001326:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800132a:	f014 fc51 	bl	8015bd0 <cos>
 800132e:	eeb0 6b40 	vmov.f64	d6, d0
 8001332:	ed97 7b00 	vldr	d7, [r7]
 8001336:	ee26 7b07 	vmul.f64	d7, d6, d7
 800133a:	ee38 8b47 	vsub.f64	d8, d8, d7
 800133e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001342:	f014 fc91 	bl	8015c68 <sin>
 8001346:	eeb0 6b40 	vmov.f64	d6, d0
 800134a:	ed97 7b02 	vldr	d7, [r7, #8]
 800134e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001352:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3308      	adds	r3, #8
 800135a:	ed97 6b08 	vldr	d6, [r7, #32]
 800135e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001362:	ed83 7b00 	vstr	d7, [r3]
    u[2] = (d * phi_dot - y_dot * cos(phi) + x_dot * sin(phi)) / r;
 8001366:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800136a:	ed97 7b04 	vldr	d7, [r7, #16]
 800136e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001372:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001376:	f014 fc2b 	bl	8015bd0 <cos>
 800137a:	eeb0 6b40 	vmov.f64	d6, d0
 800137e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001382:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001386:	ee38 8b47 	vsub.f64	d8, d8, d7
 800138a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800138e:	f014 fc6b 	bl	8015c68 <sin>
 8001392:	eeb0 6b40 	vmov.f64	d6, d0
 8001396:	ed97 7b00 	vldr	d7, [r7]
 800139a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800139e:	ee38 5b07 	vadd.f64	d5, d8, d7
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3310      	adds	r3, #16
 80013a6:	ed97 6b08 	vldr	d6, [r7, #32]
 80013aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ae:	ed83 7b00 	vstr	d7, [r3]
    u[3] = (d * phi_dot + x_dot * cos(phi) + y_dot * sin(phi)) / r;
 80013b2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80013b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013ba:	ee26 8b07 	vmul.f64	d8, d6, d7
 80013be:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80013c2:	f014 fc05 	bl	8015bd0 <cos>
 80013c6:	eeb0 6b40 	vmov.f64	d6, d0
 80013ca:	ed97 7b00 	vldr	d7, [r7]
 80013ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013d2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80013d6:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80013da:	f014 fc45 	bl	8015c68 <sin>
 80013de:	eeb0 6b40 	vmov.f64	d6, d0
 80013e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80013e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013ea:	ee38 5b07 	vadd.f64	d5, d8, d7
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3318      	adds	r3, #24
 80013f2:	ed97 6b08 	vldr	d6, [r7, #32]
 80013f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013fa:	ed83 7b00 	vstr	d7, [r3]

    return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3738      	adds	r7, #56	@ 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	ecbd 8b02 	vpop	{d8}
 800140a:	bd80      	pop	{r7, pc}

0800140c <globalSpeedsFromU>:

int globalSpeedsFromU(double phi, double d, double r, double u[4], double q_dot[3]) {
 800140c:	b580      	push	{r7, lr}
 800140e:	ed2d 8b02 	vpush	{d8}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0b06 	vstr	d0, [r7, #24]
 800141a:	ed87 1b04 	vstr	d1, [r7, #16]
 800141e:	ed87 2b02 	vstr	d2, [r7, #8]
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
    q_dot[0] = (u[0] + u[1] + u[2] + u[3]) / (4 * d); // Angular velocity
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 6b00 	vldr	d6, [r3]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3308      	adds	r3, #8
 8001430:	ed93 7b00 	vldr	d7, [r3]
 8001434:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3310      	adds	r3, #16
 800143c:	ed93 7b00 	vldr	d7, [r3]
 8001440:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3318      	adds	r3, #24
 8001448:	ed93 7b00 	vldr	d7, [r3]
 800144c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001450:	ed97 7b04 	vldr	d7, [r7, #16]
 8001454:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8001458:	ee27 6b06 	vmul.f64	d6, d7, d6
 800145c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	ed83 7b00 	vstr	d7, [r3]
    q_dot[1] = -cos(phi)*((u[1] - u[3])/2) - sin(phi)*((u[0] - u[2])/2); // X velocity
 8001466:	ed97 0b06 	vldr	d0, [r7, #24]
 800146a:	f014 fbb1 	bl	8015bd0 <cos>
 800146e:	eeb0 7b40 	vmov.f64	d7, d0
 8001472:	eeb1 6b47 	vneg.f64	d6, d7
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3308      	adds	r3, #8
 800147a:	ed93 5b00 	vldr	d5, [r3]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3318      	adds	r3, #24
 8001482:	ed93 7b00 	vldr	d7, [r3]
 8001486:	ee35 5b47 	vsub.f64	d5, d5, d7
 800148a:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 800148e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001492:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001496:	ed97 0b06 	vldr	d0, [r7, #24]
 800149a:	f014 fbe5 	bl	8015c68 <sin>
 800149e:	eeb0 5b40 	vmov.f64	d5, d0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	ed93 6b00 	vldr	d6, [r3]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3310      	adds	r3, #16
 80014ac:	ed93 7b00 	vldr	d7, [r3]
 80014b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014b4:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80014b8:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80014bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3308      	adds	r3, #8
 80014c4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80014c8:	ed83 7b00 	vstr	d7, [r3]
    q_dot[2] = cos(phi)*((u[0] - u[2])/2) - sin(phi)*((u[1] - u[3])/2); // Y velocity
 80014cc:	ed97 0b06 	vldr	d0, [r7, #24]
 80014d0:	f014 fb7e 	bl	8015bd0 <cos>
 80014d4:	eeb0 5b40 	vmov.f64	d5, d0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	ed93 6b00 	vldr	d6, [r3]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3310      	adds	r3, #16
 80014e2:	ed93 7b00 	vldr	d7, [r3]
 80014e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014ea:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80014ee:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80014f2:	ee25 8b07 	vmul.f64	d8, d5, d7
 80014f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80014fa:	f014 fbb5 	bl	8015c68 <sin>
 80014fe:	eeb0 5b40 	vmov.f64	d5, d0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3308      	adds	r3, #8
 8001506:	ed93 6b00 	vldr	d6, [r3]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3318      	adds	r3, #24
 800150e:	ed93 7b00 	vldr	d7, [r3]
 8001512:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001516:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 800151a:	ee86 7b04 	vdiv.f64	d7, d6, d4
 800151e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3310      	adds	r3, #16
 8001526:	ee38 7b47 	vsub.f64	d7, d8, d7
 800152a:	ed83 7b00 	vstr	d7, [r3]

    return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	ecbd 8b02 	vpop	{d8}
 800153a:	bd80      	pop	{r7, pc}

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001546:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001548:	bf00      	nop
 800154a:	4b91      	ldr	r3, [pc, #580]	@ (8001790 <main+0x254>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <main+0x24>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	60fa      	str	r2, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dcf4      	bgt.n	800154a <main+0xe>
  if ( timeout < 0 )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	da01      	bge.n	800156a <main+0x2e>
  {
  Error_Handler();
 8001566:	f002 fdc9 	bl	80040fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f003 faf7 	bl	8004b5c <HAL_Init>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 800156e:	4b89      	ldr	r3, [pc, #548]	@ (8001794 <main+0x258>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6858      	ldr	r0, [r3, #4]
 8001574:	2300      	movs	r3, #0
 8001576:	2202      	movs	r2, #2
 8001578:	2100      	movs	r1, #0
 800157a:	f010 fa67 	bl	8011a4c <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157e:	f000 f95d 	bl	800183c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001582:	4b83      	ldr	r3, [pc, #524]	@ (8001790 <main+0x254>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a81      	ldr	r2, [pc, #516]	@ (8001790 <main+0x254>)
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001592:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <main+0x254>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f004 fb75 	bl	8005c90 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80015a6:	2100      	movs	r1, #0
 80015a8:	2000      	movs	r0, #0
 80015aa:	f004 fb8b 	bl	8005cc4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80015ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80015b4:	bf00      	nop
 80015b6:	4b76      	ldr	r3, [pc, #472]	@ (8001790 <main+0x254>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d104      	bne.n	80015cc <main+0x90>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	60fa      	str	r2, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dcf4      	bgt.n	80015b6 <main+0x7a>
if ( timeout < 0 )
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da01      	bge.n	80015d6 <main+0x9a>
{
Error_Handler();
 80015d2:	f002 fd93 	bl	80040fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d6:	f000 fdbd 	bl	8002154 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80015da:	f000 fd6f 	bl	80020bc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80015de:	f000 fa1b 	bl	8001a18 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015e2:	f000 fa73 	bl	8001acc <MX_TIM2_Init>
  MX_TIM4_Init();
 80015e6:	f000 fac5 	bl	8001b74 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015ea:	f000 fb19 	bl	8001c20 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015ee:	f000 fb71 	bl	8001cd4 <MX_TIM8_Init>
  MX_TIM12_Init();
 80015f2:	f000 fbc9 	bl	8001d88 <MX_TIM12_Init>
  MX_TIM13_Init();
 80015f6:	f000 fc3f 	bl	8001e78 <MX_TIM13_Init>
  MX_TIM14_Init();
 80015fa:	f000 fc8b 	bl	8001f14 <MX_TIM14_Init>
  MX_TIM15_Init();
 80015fe:	f000 fcd7 	bl	8001fb0 <MX_TIM15_Init>
  MX_I2C1_Init();
 8001602:	f000 f9c9 	bl	8001998 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t allOK = 1;
 8001606:	2301      	movs	r3, #1
 8001608:	72fb      	strb	r3, [r7, #11]
  if (HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) {
 800160a:	213c      	movs	r1, #60	@ 0x3c
 800160c:	4862      	ldr	r0, [pc, #392]	@ (8001798 <main+0x25c>)
 800160e:	f008 faf9 	bl	8009c04 <HAL_TIM_Encoder_Start>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <main+0xe6>
  	  printf("tim1 fail\n\r");
 8001618:	4860      	ldr	r0, [pc, #384]	@ (800179c <main+0x260>)
 800161a:	f010 f9a7 	bl	801196c <iprintf>
  	  allOK = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK) {
 8001622:	213c      	movs	r1, #60	@ 0x3c
 8001624:	485e      	ldr	r0, [pc, #376]	@ (80017a0 <main+0x264>)
 8001626:	f008 fb7b 	bl	8009d20 <HAL_TIM_Encoder_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <main+0xfe>
	  printf("tim2 fail\n\r");
 8001630:	485c      	ldr	r0, [pc, #368]	@ (80017a4 <main+0x268>)
 8001632:	f010 f99b 	bl	801196c <iprintf>
	  allOK = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK) {
 800163a:	213c      	movs	r1, #60	@ 0x3c
 800163c:	485a      	ldr	r0, [pc, #360]	@ (80017a8 <main+0x26c>)
 800163e:	f008 fb6f 	bl	8009d20 <HAL_TIM_Encoder_Start_IT>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <main+0x116>
	  printf("tim4 fail\n\r");
 8001648:	4858      	ldr	r0, [pc, #352]	@ (80017ac <main+0x270>)
 800164a:	f010 f98f 	bl	801196c <iprintf>
	  allOK = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL) != HAL_OK) {
 8001652:	213c      	movs	r1, #60	@ 0x3c
 8001654:	4856      	ldr	r0, [pc, #344]	@ (80017b0 <main+0x274>)
 8001656:	f008 fad5 	bl	8009c04 <HAL_TIM_Encoder_Start>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <main+0x12e>
	  printf("tim8 fail\n\r");
 8001660:	4854      	ldr	r0, [pc, #336]	@ (80017b4 <main+0x278>)
 8001662:	f010 f983 	bl	801196c <iprintf>
	  allOK = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	72fb      	strb	r3, [r7, #11]
  }

  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4852      	ldr	r0, [pc, #328]	@ (80017b8 <main+0x27c>)
 800166e:	f008 f915 	bl	800989c <HAL_TIM_PWM_Start>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <main+0x14a>
  {
  	  printf("tim5 fail\r\n");
 8001678:	4850      	ldr	r0, [pc, #320]	@ (80017bc <main+0x280>)
 800167a:	f010 f9df 	bl	8011a3c <puts>
  	  allOK = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 8001682:	f002 fd3b 	bl	80040fc <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	484d      	ldr	r0, [pc, #308]	@ (80017c0 <main+0x284>)
 800168a:	f008 f907 	bl	800989c <HAL_TIM_PWM_Start>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <main+0x166>
  {
  	  printf("tim12 fail\r\n");
 8001694:	484b      	ldr	r0, [pc, #300]	@ (80017c4 <main+0x288>)
 8001696:	f010 f9d1 	bl	8011a3c <puts>
  	  allOK = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 800169e:	f002 fd2d 	bl	80040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4848      	ldr	r0, [pc, #288]	@ (80017c8 <main+0x28c>)
 80016a6:	f008 f8f9 	bl	800989c <HAL_TIM_PWM_Start>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <main+0x182>
  {
      printf("tim14 fail\r\n");
 80016b0:	4846      	ldr	r0, [pc, #280]	@ (80017cc <main+0x290>)
 80016b2:	f010 f9c3 	bl	8011a3c <puts>
      allOK = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 80016ba:	f002 fd1f 	bl	80040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 80016be:	2100      	movs	r1, #0
 80016c0:	4843      	ldr	r0, [pc, #268]	@ (80017d0 <main+0x294>)
 80016c2:	f008 f8eb 	bl	800989c <HAL_TIM_PWM_Start>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <main+0x19e>
  {
  	  printf("tim3 fail\r\n");
 80016cc:	4841      	ldr	r0, [pc, #260]	@ (80017d4 <main+0x298>)
 80016ce:	f010 f9b5 	bl	8011a3c <puts>
  	  allOK = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 80016d6:	f002 fd11 	bl	80040fc <Error_Handler>
  }

  if (!allOK) {
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <main+0x1aa>
	  printf(" El diablo \r\n\n\n\n\n\n\n");
 80016e0:	483d      	ldr	r0, [pc, #244]	@ (80017d8 <main+0x29c>)
 80016e2:	f010 f9ab 	bl	8011a3c <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016e6:	f00c f9a9 	bl	800da3c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexUART_Data */
  MutexUART_DataHandle = osMutexNew(&MutexUART_Data_attributes);
 80016ea:	483c      	ldr	r0, [pc, #240]	@ (80017dc <main+0x2a0>)
 80016ec:	f00c fab2 	bl	800dc54 <osMutexNew>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <main+0x2a4>)
 80016f4:	6013      	str	r3, [r2, #0]
  /* Create the queue(s) */
  /* creation of UART_Queue */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  UART_QueueHandle = osMessageQueueNew (3, sizeof(InputData), &UART_Queue_attributes);
 80016f6:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <main+0x2a8>)
 80016f8:	2138      	movs	r1, #56	@ 0x38
 80016fa:	2003      	movs	r0, #3
 80016fc:	f00c fb30 	bl	800dd60 <osMessageQueueNew>
 8001700:	4603      	mov	r3, r0
 8001702:	4a39      	ldr	r2, [pc, #228]	@ (80017e8 <main+0x2ac>)
 8001704:	6013      	str	r3, [r2, #0]
  UART2CtrlTsk_QueueHandle = osMessageQueueNew (3, sizeof(InputData), &UART2CtrlTsk_Queue_attributes);
 8001706:	4a39      	ldr	r2, [pc, #228]	@ (80017ec <main+0x2b0>)
 8001708:	2138      	movs	r1, #56	@ 0x38
 800170a:	2003      	movs	r0, #3
 800170c:	f00c fb28 	bl	800dd60 <osMessageQueueNew>
 8001710:	4603      	mov	r3, r0
 8001712:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <main+0x2b4>)
 8001714:	6013      	str	r3, [r2, #0]
  CtrlTsk_QueueHandle = osMessageQueueNew (3, sizeof(CtrlTsk_Data), &CtrlTsk_Queue_attributes);
 8001716:	4a37      	ldr	r2, [pc, #220]	@ (80017f4 <main+0x2b8>)
 8001718:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800171c:	2003      	movs	r0, #3
 800171e:	f00c fb1f 	bl	800dd60 <osMessageQueueNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a34      	ldr	r2, [pc, #208]	@ (80017f8 <main+0x2bc>)
 8001726:	6013      	str	r3, [r2, #0]
  UART2KPIDs_QueueHandle = osMessageQueueNew (3, sizeof(PIDConfig), &UART2KPIDs_Queue_attributes);
 8001728:	4a34      	ldr	r2, [pc, #208]	@ (80017fc <main+0x2c0>)
 800172a:	2154      	movs	r1, #84	@ 0x54
 800172c:	2003      	movs	r0, #3
 800172e:	f00c fb17 	bl	800dd60 <osMessageQueueNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <main+0x2c4>)
 8001736:	6013      	str	r3, [r2, #0]
  kpids_UART_TX_QueueHandle = osMessageQueueNew (3, sizeof(PIDConfig), &kpids_UART_TX_Queue_attributes);
 8001738:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <main+0x2c8>)
 800173a:	2154      	movs	r1, #84	@ 0x54
 800173c:	2003      	movs	r0, #3
 800173e:	f00c fb0f 	bl	800dd60 <osMessageQueueNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a30      	ldr	r2, [pc, #192]	@ (8001808 <main+0x2cc>)
 8001746:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001748:	4a30      	ldr	r2, [pc, #192]	@ (800180c <main+0x2d0>)
 800174a:	2100      	movs	r1, #0
 800174c:	4830      	ldr	r0, [pc, #192]	@ (8001810 <main+0x2d4>)
 800174e:	f00c f9d4 	bl	800dafa <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <main+0x2d8>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_Task */
  UART_RX_TaskHandle = osThreadNew(start_UART_RX_Task, NULL, &UART_RX_Task_attributes);
 8001758:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <main+0x2dc>)
 800175a:	2100      	movs	r1, #0
 800175c:	482f      	ldr	r0, [pc, #188]	@ (800181c <main+0x2e0>)
 800175e:	f00c f9cc 	bl	800dafa <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <main+0x2e4>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_Task */
  UART_TX_TaskHandle = osThreadNew(Start_UART_TX_Task, NULL, &UART_TX_Task_attributes);
 8001768:	4a2e      	ldr	r2, [pc, #184]	@ (8001824 <main+0x2e8>)
 800176a:	2100      	movs	r1, #0
 800176c:	482e      	ldr	r0, [pc, #184]	@ (8001828 <main+0x2ec>)
 800176e:	f00c f9c4 	bl	800dafa <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a2d      	ldr	r2, [pc, #180]	@ (800182c <main+0x2f0>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <main+0x2f4>)
 800177a:	2100      	movs	r1, #0
 800177c:	482d      	ldr	r0, [pc, #180]	@ (8001834 <main+0x2f8>)
 800177e:	f00c f9bc 	bl	800dafa <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <main+0x2fc>)
 8001786:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001788:	f00c f97c 	bl	800da84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <main+0x250>
 8001790:	58024400 	.word	0x58024400
 8001794:	2400002c 	.word	0x2400002c
 8001798:	24000368 	.word	0x24000368
 800179c:	08016ae8 	.word	0x08016ae8
 80017a0:	240003b4 	.word	0x240003b4
 80017a4:	08016af4 	.word	0x08016af4
 80017a8:	24000400 	.word	0x24000400
 80017ac:	08016b00 	.word	0x08016b00
 80017b0:	24000498 	.word	0x24000498
 80017b4:	08016b0c 	.word	0x08016b0c
 80017b8:	2400044c 	.word	0x2400044c
 80017bc:	08016b18 	.word	0x08016b18
 80017c0:	240004e4 	.word	0x240004e4
 80017c4:	08016b24 	.word	0x08016b24
 80017c8:	2400057c 	.word	0x2400057c
 80017cc:	08016b30 	.word	0x08016b30
 80017d0:	240005c8 	.word	0x240005c8
 80017d4:	08016b3c 	.word	0x08016b3c
 80017d8:	08016b48 	.word	0x08016b48
 80017dc:	080170d4 	.word	0x080170d4
 80017e0:	240006bc 	.word	0x240006bc
 80017e4:	080170bc 	.word	0x080170bc
 80017e8:	240006b8 	.word	0x240006b8
 80017ec:	080170fc 	.word	0x080170fc
 80017f0:	240006c4 	.word	0x240006c4
 80017f4:	080170e4 	.word	0x080170e4
 80017f8:	240006c0 	.word	0x240006c0
 80017fc:	08017114 	.word	0x08017114
 8001800:	240006c8 	.word	0x240006c8
 8001804:	0801712c 	.word	0x0801712c
 8001808:	240006cc 	.word	0x240006cc
 800180c:	0801702c 	.word	0x0801702c
 8001810:	08002281 	.word	0x08002281
 8001814:	240006a8 	.word	0x240006a8
 8001818:	08017050 	.word	0x08017050
 800181c:	080022dd 	.word	0x080022dd
 8001820:	240006ac 	.word	0x240006ac
 8001824:	08017074 	.word	0x08017074
 8001828:	08002595 	.word	0x08002595
 800182c:	240006b0 	.word	0x240006b0
 8001830:	08017098 	.word	0x08017098
 8001834:	08002cd1 	.word	0x08002cd1
 8001838:	240006b4 	.word	0x240006b4

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09e      	sub	sp, #120	@ 0x78
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001846:	224c      	movs	r2, #76	@ 0x4c
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f010 fada 	bl	8011e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f010 fad3 	bl	8011e04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800185e:	2004      	movs	r0, #4
 8001860:	f005 f846 	bl	80068f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b48      	ldr	r3, [pc, #288]	@ (800198c <SystemClock_Config+0x150>)
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	4a47      	ldr	r2, [pc, #284]	@ (800198c <SystemClock_Config+0x150>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001874:	4b45      	ldr	r3, [pc, #276]	@ (800198c <SystemClock_Config+0x150>)
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <SystemClock_Config+0x154>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a43      	ldr	r2, [pc, #268]	@ (8001990 <SystemClock_Config+0x154>)
 8001884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <SystemClock_Config+0x154>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001896:	bf00      	nop
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <SystemClock_Config+0x154>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a4:	d1f8      	bne.n	8001898 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <SystemClock_Config+0x158>)
 80018a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ac:	4a39      	ldr	r2, [pc, #228]	@ (8001994 <SystemClock_Config+0x158>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018b6:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <SystemClock_Config+0x158>)
 80018b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <SystemClock_Config+0x154>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a30      	ldr	r2, [pc, #192]	@ (8001990 <SystemClock_Config+0x154>)
 80018ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <SystemClock_Config+0x154>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <SystemClock_Config+0x150>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	4a2a      	ldr	r2, [pc, #168]	@ (800198c <SystemClock_Config+0x150>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80018ea:	4b28      	ldr	r3, [pc, #160]	@ (800198c <SystemClock_Config+0x150>)
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018f6:	bf00      	nop
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <SystemClock_Config+0x154>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001904:	d1f8      	bne.n	80018f8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001906:	2301      	movs	r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800190a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001910:	2302      	movs	r3, #2
 8001912:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001914:	2302      	movs	r3, #2
 8001916:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 800191c:	23f0      	movs	r3, #240	@ 0xf0
 800191e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800192c:	2308      	movs	r3, #8
 800192e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001930:	2300      	movs	r3, #0
 8001932:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193c:	4618      	mov	r0, r3
 800193e:	f005 f831 	bl	80069a4 <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001948:	f002 fbd8 	bl	80040fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194c:	233f      	movs	r3, #63	@ 0x3f
 800194e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001950:	2303      	movs	r3, #3
 8001952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001958:	2308      	movs	r3, #8
 800195a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800195c:	2340      	movs	r3, #64	@ 0x40
 800195e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001960:	2340      	movs	r3, #64	@ 0x40
 8001962:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800196a:	2340      	movs	r3, #64	@ 0x40
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fc6f 	bl	8007258 <HAL_RCC_ClockConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001980:	f002 fbbc 	bl	80040fc <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	3778      	adds	r7, #120	@ 0x78
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	58000400 	.word	0x58000400
 8001990:	58024800 	.word	0x58024800
 8001994:	58024400 	.word	0x58024400

08001998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <MX_I2C1_Init+0x74>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <MX_I2C1_Init+0x78>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <MX_I2C1_Init+0x7c>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d2:	480e      	ldr	r0, [pc, #56]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019d4:	f004 f98a 	bl	8005cec <HAL_I2C_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019de:	f002 fb8d 	bl	80040fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4809      	ldr	r0, [pc, #36]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019e6:	f004 feeb 	bl	80067c0 <HAL_I2CEx_ConfigAnalogFilter>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019f0:	f002 fb84 	bl	80040fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_I2C1_Init+0x74>)
 80019f8:	f004 ff2d 	bl	8006856 <HAL_I2CEx_ConfigDigitalFilter>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f002 fb7b 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000314 	.word	0x24000314
 8001a10:	40005400 	.word	0x40005400
 8001a14:	00b03fdb 	.word	0x00b03fdb

08001a18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2224      	movs	r2, #36	@ 0x24
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f010 f9ec 	bl	8011e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a36:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a38:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <MX_TIM1_Init+0xb0>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a62:	2303      	movs	r3, #3
 8001a64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480d      	ldr	r0, [pc, #52]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001a8e:	f008 f813 	bl	8009ab8 <HAL_TIM_Encoder_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a98:	f002 fb30 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_TIM1_Init+0xac>)
 8001aae:	f009 f961 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ab8:	f002 fb20 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	@ 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	24000368 	.word	0x24000368
 8001ac8:	40010000 	.word	0x40010000

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f010 f992 	bl	8011e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001aec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b12:	2303      	movs	r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001b3e:	f007 ffbb 	bl	8009ab8 <HAL_TIM_Encoder_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b48:	f002 fad8 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_TIM2_Init+0xa4>)
 8001b5a:	f009 f90b 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b64:	f002 faca 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3730      	adds	r7, #48	@ 0x30
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	240003b4 	.word	0x240003b4

08001b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f010 f93e 	bl	8011e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <MX_TIM4_Init+0xa8>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001be4:	f007 ff68 	bl	8009ab8 <HAL_TIM_Encoder_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bee:	f002 fa85 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001c00:	f009 f8b8 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c0a:	f002 fa77 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	3730      	adds	r7, #48	@ 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000400 	.word	0x24000400
 8001c1c:	40000800 	.word	0x40000800

08001c20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	463b      	mov	r3, r7
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c46:	4a22      	ldr	r2, [pc, #136]	@ (8001cd0 <MX_TIM5_Init+0xb0>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c4c:	22ef      	movs	r2, #239	@ 0xef
 8001c4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c58:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c6a:	4818      	ldr	r0, [pc, #96]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c6c:	f007 fdbe 	bl	80097ec <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001c76:	f002 fa41 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001c8a:	f009 f873 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c94:	f002 fa32 	bl	80040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c98:	2360      	movs	r3, #96	@ 0x60
 8001c9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001cb0:	f008 f9ec 	bl	800a08c <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001cba:	f002 fa1f 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001cbe:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <MX_TIM5_Init+0xac>)
 8001cc0:	f002 fc6e 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	@ 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2400044c 	.word	0x2400044c
 8001cd0:	40000c00 	.word	0x40000c00

08001cd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	@ 0x30
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2224      	movs	r2, #36	@ 0x24
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f010 f88e 	bl	8011e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <MX_TIM8_Init+0xb0>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d26:	2301      	movs	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d36:	2301      	movs	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	480d      	ldr	r0, [pc, #52]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d4a:	f007 feb5 	bl	8009ab8 <HAL_TIM_Encoder_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001d54:	f002 f9d2 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d64:	463b      	mov	r3, r7
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_TIM8_Init+0xac>)
 8001d6a:	f009 f803 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d74:	f002 f9c2 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3730      	adds	r7, #48	@ 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000498 	.word	0x24000498
 8001d84:	40010400 	.word	0x40010400

08001d88 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <MX_TIM12_Init+0xec>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 239;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dc2:	22ef      	movs	r2, #239	@ 0xef
 8001dc4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dce:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001dd2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001de0:	4823      	ldr	r0, [pc, #140]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001de2:	f007 fc33 	bl	800964c <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001dec:	f002 f986 	bl	80040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481c      	ldr	r0, [pc, #112]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001dfe:	f008 fa59 	bl	800a2b4 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001e08:	f002 f978 	bl	80040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e0c:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001e0e:	f007 fced 	bl	80097ec <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001e18:	f002 f970 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001e2c:	f008 ffa2 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001e36:	f002 f961 	bl	80040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	@ 0x60
 8001e3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001e52:	f008 f91b 	bl	800a08c <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001e5c:	f002 f94e 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM12_Init+0xe8>)
 8001e62:	f002 fb9d 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3738      	adds	r7, #56	@ 0x38
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	240004e4 	.word	0x240004e4
 8001e74:	40001800 	.word	0x40001800

08001e78 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <MX_TIM13_Init+0x98>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001e98:	22ef      	movs	r2, #239	@ 0xef
 8001e9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001ea4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001eb6:	4815      	ldr	r0, [pc, #84]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001eb8:	f007 fbc8 	bl	800964c <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001ec2:	f002 f91b 	bl	80040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001ec6:	4811      	ldr	r0, [pc, #68]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001ec8:	f007 fc90 	bl	80097ec <HAL_TIM_PWM_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001ed2:	f002 f913 	bl	80040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	@ 0x60
 8001ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001eee:	f008 f8cd 	bl	800a08c <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001ef8:	f002 f900 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001efc:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MX_TIM13_Init+0x94>)
 8001efe:	f002 fb4f 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	24000530 	.word	0x24000530
 8001f10:	40001c00 	.word	0x40001c00

08001f14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	615a      	str	r2, [r3, #20]
 8001f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <MX_TIM14_Init+0x98>)
 8001f30:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f34:	22ef      	movs	r2, #239	@ 0xef
 8001f36:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f40:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f44:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f52:	4815      	ldr	r0, [pc, #84]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f54:	f007 fb7a 	bl	800964c <HAL_TIM_Base_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001f5e:	f002 f8cd 	bl	80040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001f62:	4811      	ldr	r0, [pc, #68]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f64:	f007 fc42 	bl	80097ec <HAL_TIM_PWM_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001f6e:	f002 f8c5 	bl	80040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f72:	2360      	movs	r3, #96	@ 0x60
 8001f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f8a:	f008 f87f 	bl	800a08c <HAL_TIM_PWM_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001f94:	f002 f8b2 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001f98:	4803      	ldr	r0, [pc, #12]	@ (8001fa8 <MX_TIM14_Init+0x94>)
 8001f9a:	f002 fb01 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2400057c 	.word	0x2400057c
 8001fac:	40002000 	.word	0x40002000

08001fb0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b096      	sub	sp, #88	@ 0x58
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	222c      	movs	r2, #44	@ 0x2c
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00f ff11 	bl	8011e04 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8001fe4:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <MX_TIM15_Init+0x108>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 239;
 8001fe8:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8001fea:	22ef      	movs	r2, #239	@ 0xef
 8001fec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8001ff6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ffa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <MX_TIM15_Init+0x104>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800200e:	4829      	ldr	r0, [pc, #164]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8002010:	f007 fbec 	bl	80097ec <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800201a:	f002 f86f 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002026:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800202a:	4619      	mov	r1, r3
 800202c:	4821      	ldr	r0, [pc, #132]	@ (80020b4 <MX_TIM15_Init+0x104>)
 800202e:	f008 fea1 	bl	800ad74 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002038:	f002 f860 	bl	80040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203c:	2360      	movs	r3, #96	@ 0x60
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	4814      	ldr	r0, [pc, #80]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8002062:	f008 f813 	bl	800a08c <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800206c:	f002 f846 	bl	80040fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002088:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <MX_TIM15_Init+0x104>)
 8002098:	f008 fefa 	bl	800ae90 <HAL_TIMEx_ConfigBreakDeadTime>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80020a2:	f002 f82b 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <MX_TIM15_Init+0x104>)
 80020a8:	f002 fa7a 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 80020ac:	bf00      	nop
 80020ae:	3758      	adds	r7, #88	@ 0x58
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	240005c8 	.word	0x240005c8
 80020b8:	40014000 	.word	0x40014000

080020bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020c2:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <MX_USART3_UART_Init+0x94>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020da:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_USART3_UART_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_USART3_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002104:	4811      	ldr	r0, [pc, #68]	@ (800214c <MX_USART3_UART_Init+0x90>)
 8002106:	f008 ff5f 	bl	800afc8 <HAL_UART_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002110:	f001 fff4 	bl	80040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <MX_USART3_UART_Init+0x90>)
 8002118:	f00b fb81 	bl	800d81e <HAL_UARTEx_SetTxFifoThreshold>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002122:	f001 ffeb 	bl	80040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	4808      	ldr	r0, [pc, #32]	@ (800214c <MX_USART3_UART_Init+0x90>)
 800212a:	f00b fbb6 	bl	800d89a <HAL_UARTEx_SetRxFifoThreshold>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002134:	f001 ffe2 	bl	80040fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <MX_USART3_UART_Init+0x90>)
 800213a:	f00b fb37 	bl	800d7ac <HAL_UARTEx_DisableFifoMode>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002144:	f001 ffda 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000614 	.word	0x24000614
 8002150:	40004800 	.word	0x40004800

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	@ 0x30
 8002158:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b42      	ldr	r3, [pc, #264]	@ (8002274 <MX_GPIO_Init+0x120>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002170:	4a40      	ldr	r2, [pc, #256]	@ (8002274 <MX_GPIO_Init+0x120>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800217a:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <MX_GPIO_Init+0x120>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <MX_GPIO_Init+0x120>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218e:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <MX_GPIO_Init+0x120>)
 8002190:	f043 0320 	orr.w	r3, r3, #32
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <MX_GPIO_Init+0x120>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ac:	4a31      	ldr	r2, [pc, #196]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <MX_GPIO_Init+0x120>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <MX_GPIO_Init+0x120>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002206:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <MX_GPIO_Init+0x120>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <MX_GPIO_Init+0x120>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOD, PD4_Pin|PD5_Pin|PD6_Pin|PD7_Pin, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	21f0      	movs	r1, #240	@ 0xf0
 8002222:	4815      	ldr	r0, [pc, #84]	@ (8002278 <MX_GPIO_Init+0x124>)
 8002224:	f003 fd1a 	bl	8005c5c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOE, PE2_Pin|PE4_Pin|PE3_Pin|PE6_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	215c      	movs	r1, #92	@ 0x5c
 800222c:	4813      	ldr	r0, [pc, #76]	@ (800227c <MX_GPIO_Init+0x128>)
 800222e:	f003 fd15 	bl	8005c5c <HAL_GPIO_WritePin>

   // Declare IN1, IN2, IN3 IN4 of H Bridge, in that order
   GPIO_InitStruct.Pin = PD4_Pin|PD5_Pin|PD6_Pin|PD7_Pin;
 8002232:	23f0      	movs	r3, #240	@ 0xf0
 8002234:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2302      	movs	r3, #2
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	480b      	ldr	r0, [pc, #44]	@ (8002278 <MX_GPIO_Init+0x124>)
 800224a:	f003 fb57 	bl	80058fc <HAL_GPIO_Init>

   // Declare IN1, IN2, IN3 IN4 of H Bridge, in that order
   GPIO_InitStruct.Pin = PE2_Pin|PE4_Pin|PE3_Pin|PE6_Pin;
 800224e:	235c      	movs	r3, #92	@ 0x5c
 8002250:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2302      	movs	r3, #2
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_GPIO_Init+0x128>)
 8002266:	f003 fb49 	bl	80058fc <HAL_GPIO_Init>
//   GPIOE->ODR ^= (0x1UL << 3U);
//   GPIOE->ODR ^= (0x1UL << 4U);
//   GPIOE->ODR ^= (0x1UL << 6U);

/* USER CODE END MX_GPIO_Init_2 */
}
 800226a:	bf00      	nop
 800226c:	3730      	adds	r7, #48	@ 0x30
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58024400 	.word	0x58024400
 8002278:	58020c00 	.word	0x58020c00
 800227c:	58021000 	.word	0x58021000

08002280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002288:	2001      	movs	r0, #1
 800228a:	f00b fcc8 	bl	800dc1e <osDelay>
 800228e:	e7fb      	b.n	8002288 <StartDefaultTask+0x8>

08002290 <HAL_UART_RxCpltCallback>:
*/


/* RECEIVED FUNCTION */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_UART_RxCpltCallback+0x3c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d110      	bne.n	80022c4 <HAL_UART_RxCpltCallback+0x34>
        // Store received char in ring buffer
        rx_buf[rx_tail] = rx_char;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_UART_RxCpltCallback+0x40>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_UART_RxCpltCallback+0x44>)
 80022a8:	7811      	ldrb	r1, [r2, #0]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <HAL_UART_RxCpltCallback+0x48>)
 80022ac:	54d1      	strb	r1, [r2, r3]
        rx_tail = (rx_tail + 1) % RX_BUF_SIZE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_UART_RxCpltCallback+0x40>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_UART_RxCpltCallback+0x40>)
 80022b8:	6013      	str	r3, [r2, #0]

        // Re-arm UART to receive next char
        HAL_UART_Receive_IT(huart, &rx_char, 1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	4905      	ldr	r1, [pc, #20]	@ (80022d4 <HAL_UART_RxCpltCallback+0x44>)
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f009 f828 	bl	800b314 <HAL_UART_Receive_IT>
    }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40004800 	.word	0x40004800
 80022d0:	2400030c 	.word	0x2400030c
 80022d4:	24000310 	.word	0x24000310
 80022d8:	24000208 	.word	0x24000208

080022dc <start_UART_RX_Task>:
static uint8_t rx_char;               // Temporary char buffer
/* USER CODE END Header_start_UART_RX_Task */


void start_UART_RX_Task(void *argument)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80022e2:	af1c      	add	r7, sp, #112	@ 0x70
 80022e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022ec:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN start_UART_RX_Task */


	char line_buf[RX_BUF_SIZE] = {0};
 80022ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022f6:	4618      	mov	r0, r3
 80022f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fc:	461a      	mov	r2, r3
 80022fe:	2100      	movs	r1, #0
 8002300:	f00f fd80 	bl	8011e04 <memset>
	uint16_t line_index = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
	InputData data = {0,0,0,1,1};
 800230a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800230e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002312:	4618      	mov	r0, r3
 8002314:	2338      	movs	r3, #56	@ 0x38
 8002316:	461a      	mov	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f00f fd73 	bl	8011e04 <memset>
 800231e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002322:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b8d      	ldr	r3, [pc, #564]	@ (8002560 <start_UART_RX_Task+0x284>)
 800232c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002330:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002334:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <start_UART_RX_Task+0x284>)
 800233e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PIDConfig kpids = {
 8002342:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002346:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800234a:	4618      	mov	r0, r3
 800234c:	2354      	movs	r3, #84	@ 0x54
 800234e:	461a      	mov	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f00f fd57 	bl	8011e04 <memset>
			{0.0f, 0.0f, 0.0f}
		}
	};

	// Start the first interrupt reception
	HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 8002356:	2201      	movs	r2, #1
 8002358:	4982      	ldr	r1, [pc, #520]	@ (8002564 <start_UART_RX_Task+0x288>)
 800235a:	4883      	ldr	r0, [pc, #524]	@ (8002568 <start_UART_RX_Task+0x28c>)
 800235c:	f008 ffda 	bl	800b314 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for (;;) {
//		printf("alive2\r\n");
		// Check if data is available
		while (rx_head != rx_tail) {
 8002360:	e0f2      	b.n	8002548 <start_UART_RX_Task+0x26c>
			uint8_t byte = rx_buf[rx_head];
 8002362:	4b82      	ldr	r3, [pc, #520]	@ (800256c <start_UART_RX_Task+0x290>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a82      	ldr	r2, [pc, #520]	@ (8002570 <start_UART_RX_Task+0x294>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
			rx_head = (rx_head + 1) % RX_BUF_SIZE;
 800236e:	4b7f      	ldr	r3, [pc, #508]	@ (800256c <start_UART_RX_Task+0x290>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4a7d      	ldr	r2, [pc, #500]	@ (800256c <start_UART_RX_Task+0x290>)
 8002378:	6013      	str	r3, [r2, #0]

			// End of line detected
			if (byte == '\n' || byte == '\r') {
 800237a:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d004      	beq.n	800238c <start_UART_RX_Task+0xb0>
 8002382:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 8002386:	2b0d      	cmp	r3, #13
 8002388:	f040 80be 	bne.w	8002508 <start_UART_RX_Task+0x22c>
				if (line_index > 0) {
 800238c:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80ad 	beq.w	80024f0 <start_UART_RX_Task+0x214>
					line_buf[line_index] = '\0'; // Null-terminate
 8002396:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 800239a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800239e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80023a2:	2100      	movs	r1, #0
 80023a4:	54d1      	strb	r1, [r2, r3]
//					printf("📥 Full line received: \"%s\"\r\n", line_buf);

					// Optional: parse float data
					if (sscanf(line_buf, "%lf %lf %lf %lf %lf %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f",
 80023a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023aa:	f103 0108 	add.w	r1, r3, #8
 80023ae:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80023b2:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	3350      	adds	r3, #80	@ 0x50
 80023bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	3348      	adds	r3, #72	@ 0x48
 80023cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	3344      	adds	r3, #68	@ 0x44
 80023d4:	9318      	str	r3, [sp, #96]	@ 0x60
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	3340      	adds	r3, #64	@ 0x40
 80023dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	333c      	adds	r3, #60	@ 0x3c
 80023e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	3338      	adds	r3, #56	@ 0x38
 80023ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	3334      	adds	r3, #52	@ 0x34
 80023f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	3330      	adds	r3, #48	@ 0x30
 80023fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	332c      	adds	r3, #44	@ 0x2c
 8002404:	9312      	str	r3, [sp, #72]	@ 0x48
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	3328      	adds	r3, #40	@ 0x28
 800240c:	9311      	str	r3, [sp, #68]	@ 0x44
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	3324      	adds	r3, #36	@ 0x24
 8002414:	9310      	str	r3, [sp, #64]	@ 0x40
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	3320      	adds	r3, #32
 800241c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	331c      	adds	r3, #28
 8002424:	930e      	str	r3, [sp, #56]	@ 0x38
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	3318      	adds	r3, #24
 800242c:	930d      	str	r3, [sp, #52]	@ 0x34
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	3314      	adds	r3, #20
 8002434:	930c      	str	r3, [sp, #48]	@ 0x30
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	3310      	adds	r3, #16
 800243c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	330c      	adds	r3, #12
 8002444:	930a      	str	r3, [sp, #40]	@ 0x28
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	3308      	adds	r3, #8
 800244c:	9309      	str	r3, [sp, #36]	@ 0x24
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	3304      	adds	r3, #4
 8002454:	9308      	str	r3, [sp, #32]
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	9307      	str	r3, [sp, #28]
 800245c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002460:	3334      	adds	r3, #52	@ 0x34
 8002462:	9306      	str	r3, [sp, #24]
 8002464:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002468:	3330      	adds	r3, #48	@ 0x30
 800246a:	9305      	str	r3, [sp, #20]
 800246c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002470:	332c      	adds	r3, #44	@ 0x2c
 8002472:	9304      	str	r3, [sp, #16]
 8002474:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002478:	3328      	adds	r3, #40	@ 0x28
 800247a:	9303      	str	r3, [sp, #12]
 800247c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002480:	3320      	adds	r3, #32
 8002482:	9302      	str	r3, [sp, #8]
 8002484:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002488:	3318      	adds	r3, #24
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002490:	3310      	adds	r3, #16
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	460b      	mov	r3, r1
 8002496:	4937      	ldr	r1, [pc, #220]	@ (8002574 <start_UART_RX_Task+0x298>)
 8002498:	f00f fbae 	bl	8011bf8 <siscanf>
 800249c:	4603      	mov	r3, r0
 800249e:	2b1e      	cmp	r3, #30
 80024a0:	d120      	bne.n	80024e4 <start_UART_RX_Task+0x208>
							   &kpids.u_pid[1].Kp, &kpids.u_pid[1].Ki, &kpids.u_pid[1].Kd,
							   &kpids.u_pid[2].Kp, &kpids.u_pid[2].Ki, &kpids.u_pid[2].Kd,
							   &kpids.u_pid[3].Kp, &kpids.u_pid[3].Ki, &kpids.u_pid[3].Kd) == 30)
					{

						osMessageQueuePut(UART2KPIDs_QueueHandle, &kpids, 0, 0);
 80024a2:	4b35      	ldr	r3, [pc, #212]	@ (8002578 <start_UART_RX_Task+0x29c>)
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	f107 010c 	add.w	r1, r7, #12
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	f00b fccb 	bl	800de48 <osMessageQueuePut>
						osMessageQueuePut(kpids_UART_TX_QueueHandle, &kpids, 0, 0);
 80024b2:	4b32      	ldr	r3, [pc, #200]	@ (800257c <start_UART_RX_Task+0x2a0>)
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	f107 010c 	add.w	r1, r7, #12
 80024ba:	2300      	movs	r3, #0
 80024bc:	2200      	movs	r2, #0
 80024be:	f00b fcc3 	bl	800de48 <osMessageQueuePut>
						osMessageQueuePut(UART_QueueHandle, &data, 0, 0);
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <start_UART_RX_Task+0x2a4>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80024ca:	2300      	movs	r3, #0
 80024cc:	2200      	movs	r2, #0
 80024ce:	f00b fcbb 	bl	800de48 <osMessageQueuePut>
						osMessageQueuePut(UART2CtrlTsk_QueueHandle, &data, 0, 0);
 80024d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <start_UART_RX_Task+0x2a8>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80024da:	2300      	movs	r3, #0
 80024dc:	2200      	movs	r2, #0
 80024de:	f00b fcb3 	bl	800de48 <osMessageQueuePut>
 80024e2:	e005      	b.n	80024f0 <start_UART_RX_Task+0x214>
//						printf("✅ Parsed: x=%.2f y=%.2f phi=%.2f d=%.2f r=%.2f\r\n",
//							   data.x_desired, data.y_desired, data.phi_end, data.d, data.r);
					} else {
						printf("❌ Failed to parse: \"%s\"\r\n", line_buf);
 80024e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4827      	ldr	r0, [pc, #156]	@ (8002588 <start_UART_RX_Task+0x2ac>)
 80024ec:	f00f fa3e 	bl	801196c <iprintf>
					}
				}
				line_index = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
				memset(line_buf, 0, sizeof(line_buf));
 80024f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f00f fc7f 	bl	8011e04 <memset>
 8002506:	e01f      	b.n	8002548 <start_UART_RX_Task+0x26c>
			}
			else if (line_index < RX_BUF_SIZE - 1) {
 8002508:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 800250c:	2bfe      	cmp	r3, #254	@ 0xfe
 800250e:	d80d      	bhi.n	800252c <start_UART_RX_Task+0x250>
				line_buf[line_index++] = byte;
 8002510:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	f8a7 219e 	strh.w	r2, [r7, #414]	@ 0x19e
 800251a:	4619      	mov	r1, r3
 800251c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002524:	f897 219d 	ldrb.w	r2, [r7, #413]	@ 0x19d
 8002528:	545a      	strb	r2, [r3, r1]
 800252a:	e00d      	b.n	8002548 <start_UART_RX_Task+0x26c>
			} else {
				// Overflow safety
				line_index = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
				memset(line_buf, 0, sizeof(line_buf));
 8002532:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002536:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f00f fc61 	bl	8011e04 <memset>
				printf("⚠️ Line buffer overflowed and reset.\r\n");
 8002542:	4812      	ldr	r0, [pc, #72]	@ (800258c <start_UART_RX_Task+0x2b0>)
 8002544:	f00f fa7a 	bl	8011a3c <puts>
		while (rx_head != rx_tail) {
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <start_UART_RX_Task+0x290>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <start_UART_RX_Task+0x2b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	f47f af06 	bne.w	8002362 <start_UART_RX_Task+0x86>
			}
		}

		osDelay(5); // Cooperative multitasking
 8002556:	2005      	movs	r0, #5
 8002558:	f00b fb61 	bl	800dc1e <osDelay>
		while (rx_head != rx_tail) {
 800255c:	e7f4      	b.n	8002548 <start_UART_RX_Task+0x26c>
 800255e:	bf00      	nop
 8002560:	3ff00000 	.word	0x3ff00000
 8002564:	24000310 	.word	0x24000310
 8002568:	24000614 	.word	0x24000614
 800256c:	24000308 	.word	0x24000308
 8002570:	24000208 	.word	0x24000208
 8002574:	08016b5c 	.word	0x08016b5c
 8002578:	240006c8 	.word	0x240006c8
 800257c:	240006cc 	.word	0x240006cc
 8002580:	240006b8 	.word	0x240006b8
 8002584:	240006c4 	.word	0x240006c4
 8002588:	08016bbc 	.word	0x08016bbc
 800258c:	08016bd8 	.word	0x08016bd8
 8002590:	2400030c 	.word	0x2400030c

08002594 <Start_UART_TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_TX_Task */
void Start_UART_TX_Task(void *argument)
{
 8002594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002598:	ed2d 8b10 	vpush	{d8-d15}
 800259c:	f2ad 5d04 	subw	sp, sp, #1284	@ 0x504
 80025a0:	af74      	add	r7, sp, #464	@ 0x1d0
 80025a2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80025a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025aa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_UART_TX_Task */
	  InputData data = {0,0,0,1,1};
 80025ac:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80025b0:	2238      	movs	r2, #56	@ 0x38
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00f fc25 	bl	8011e04 <memset>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b6f      	ldr	r3, [pc, #444]	@ (800277c <Start_UART_TX_Task+0x1e8>)
 80025c0:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b6c      	ldr	r3, [pc, #432]	@ (800277c <Start_UART_TX_Task+0x1e8>)
 80025ca:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
	  CtrlTsk_Data CtrlTsk_data;
	  IMUData      *imu      = &CtrlTsk_data.imu;
 80025ce:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80025d2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
	  EncoderData  *enc      = &CtrlTsk_data.encoders;
 80025d6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80025da:	3318      	adds	r3, #24
 80025dc:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  Errors       *err      = &CtrlTsk_data.error;
 80025e0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80025e4:	3358      	adds	r3, #88	@ 0x58
 80025e6:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	  TimeState    *ts       = &CtrlTsk_data.time;
 80025ea:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80025ee:	3390      	adds	r3, #144	@ 0x90
 80025f0:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
	  OdomData     *odom     = &CtrlTsk_data.odom;
 80025f4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80025f8:	33a0      	adds	r3, #160	@ 0xa0
 80025fa:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
	  CtrlOutData  *ctrl_out = &CtrlTsk_data.ctrl;
 80025fe:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002602:	33d0      	adds	r3, #208	@ 0xd0
 8002604:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

	  imu->yaw = 0.0;  imu->roll = 0.0;  imu->pitch = 0.0;
 8002608:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c1 2300 	strd	r2, r3, [r1]
 8002618:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002628:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i = 0; i < 4; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 800263e:	e022      	b.n	8002686 <Start_UART_TX_Task+0xf2>
	      enc->cnt_vals[i] = 0;  enc->angleVals[i] = 0.0f;  enc->omegaVals[i] = 0.0;
 8002640:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8002644:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8002648:	2100      	movs	r1, #0
 800264a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800264e:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8002652:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8002656:	3304      	adds	r3, #4
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8002666:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800266a:	3304      	adds	r3, #4
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	18d1      	adds	r1, r2, r3
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int i = 0; i < 4; i++) {
 800267c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8002680:	3301      	adds	r3, #1
 8002682:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8002686:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800268a:	2b03      	cmp	r3, #3
 800268c:	ddd8      	ble.n	8002640 <Start_UART_TX_Task+0xac>
	  }

	  err->err_x = 0.0;  err->err_y = 0.0;  err->err_phi = 0.0;
 800268e:	f8d7 1318 	ldr.w	r1, [r7, #792]	@ 0x318
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9c1 2300 	strd	r2, r3, [r1]
 800269e:	f8d7 1318 	ldr.w	r1, [r7, #792]	@ 0x318
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026ae:	f8d7 1318 	ldr.w	r1, [r7, #792]	@ 0x318
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  for (int i = 0; i < 4; i++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80026c4:	e011      	b.n	80026ea <Start_UART_TX_Task+0x156>
	      err->u_errs[i] = 0.0;
 80026c6:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 80026ca:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80026ce:	3303      	adds	r3, #3
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	18d1      	adds	r1, r2, r3
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int i = 0; i < 4; i++) {
 80026e0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80026ea:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	dde9      	ble.n	80026c6 <Start_UART_TX_Task+0x132>
	  }
	  ts->current = 1;  ts->previous = 0;  ts->delta = osKernelGetTickCount();  ts->print_prev = 1;
 80026f2:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	f00b f9e5 	bl	800dad0 <osKernelGetTickCount>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8002712:	2201      	movs	r2, #1
 8002714:	60da      	str	r2, [r3, #12]

	  odom->x_pos = 0.0;  odom->y_pos = 0.0;  odom->phi = 0.0;
 8002716:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
 8002726:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002736:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  ctrl_out->x_dot = 4.0;  ctrl_out->y_dot = 6.0;  ctrl_out->phi_dot = 0.0;
 8002746:	f8d7 130c 	ldr.w	r1, [r7, #780]	@ 0x30c
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <Start_UART_TX_Task+0x1ec>)
 8002750:	e9c1 2300 	strd	r2, r3, [r1]
 8002754:	f8d7 130c 	ldr.w	r1, [r7, #780]	@ 0x30c
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <Start_UART_TX_Task+0x1f0>)
 800275e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002762:	f8d7 130c 	ldr.w	r1, [r7, #780]	@ 0x30c
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i = 0; i < 4; i++) {
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8002778:	e028      	b.n	80027cc <Start_UART_TX_Task+0x238>
 800277a:	bf00      	nop
 800277c:	3ff00000 	.word	0x3ff00000
 8002780:	40100000 	.word	0x40100000
 8002784:	40180000 	.word	0x40180000
	      ctrl_out->PWM_vals[i] = 0.0;  ctrl_out->dutyCycles[i] = 0;  ctrl_out->M_dirs[i] = 0;
 8002788:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 800278c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8002790:	3303      	adds	r3, #3
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	18d1      	adds	r1, r2, r3
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9c1 2300 	strd	r2, r3, [r1]
 80027a2:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80027a6:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80027aa:	321c      	adds	r2, #28
 80027ac:	2100      	movs	r1, #0
 80027ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80027b2:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80027b6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80027ba:	4413      	add	r3, r2
 80027bc:	3340      	adds	r3, #64	@ 0x40
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 4; i++) {
 80027c2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80027c6:	3301      	adds	r3, #1
 80027c8:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 80027cc:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	ddd9      	ble.n	8002788 <Start_UART_TX_Task+0x1f4>
	  }

	  PIDConfig kpids = {
 80027d4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027dc:	4618      	mov	r0, r3
 80027de:	2354      	movs	r3, #84	@ 0x54
 80027e0:	461a      	mov	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f00f fb0e 	bl	8011e04 <memset>
	  		{0.0f, 0.0f, 0.0f},
	  		{0.0f, 0.0f, 0.0f}
	  	}
	    };

	    PIDGains *xPID_K   = &kpids.x_pid;
 80027e8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80027ec:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
	    PIDGains *yPID_K   = &kpids.y_pid;
 80027f0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80027f4:	330c      	adds	r3, #12
 80027f6:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
	    PIDGains *phiPID_K = &kpids.phi_pid;
 80027fa:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80027fe:	3318      	adds	r3, #24
 8002800:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
	    PIDGains *uPID_K   = kpids.u_pid;
 8002804:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002808:	3324      	adds	r3, #36	@ 0x24
 800280a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
//	    printf("alive\r\n");

  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f00b fa05 	bl	800dc1e <osDelay>
	osMessageQueueGet(UART_QueueHandle, &data, NULL, osWaitForever);
 8002814:	4be7      	ldr	r3, [pc, #924]	@ (8002bb4 <Start_UART_TX_Task+0x620>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800281c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002820:	2200      	movs	r2, #0
 8002822:	f00b fb71 	bl	800df08 <osMessageQueueGet>
	osMessageQueueGet(kpids_UART_TX_QueueHandle, &kpids, NULL, osWaitForever);
 8002826:	4be4      	ldr	r3, [pc, #912]	@ (8002bb8 <Start_UART_TX_Task+0x624>)
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002832:	2200      	movs	r2, #0
 8002834:	f00b fb68 	bl	800df08 <osMessageQueueGet>
	osMessageQueueGet(CtrlTsk_QueueHandle, &CtrlTsk_data, NULL, osWaitForever);
 8002838:	4be0      	ldr	r3, [pc, #896]	@ (8002bbc <Start_UART_TX_Task+0x628>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002844:	2200      	movs	r2, #0
 8002846:	f00b fb5f 	bl	800df08 <osMessageQueueGet>
	// ~60 variables sent
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800284a:	ed97 7bb0 	vldr	d7, [r7, #704]	@ 0x2c0
 800284e:	ed87 7b48 	vstr	d7, [r7, #288]	@ 0x120
 8002852:	ed97 7bb2 	vldr	d7, [r7, #712]	@ 0x2c8
 8002856:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
 800285a:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 800285e:	ed87 6b44 	vstr	d6, [r7, #272]	@ 0x110
 8002862:	ed97 5bb6 	vldr	d5, [r7, #728]	@ 0x2d8
 8002866:	ed87 5b42 	vstr	d5, [r7, #264]	@ 0x108
 800286a:	ed97 4bb8 	vldr	d4, [r7, #736]	@ 0x2e0
 800286e:	ed87 4b40 	vstr	d4, [r7, #256]	@ 0x100
 8002872:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8002876:	ed93 3b02 	vldr	d3, [r3, #8]
 800287a:	ed87 3b3e 	vstr	d3, [r7, #248]	@ 0xf8
 800287e:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8002882:	ed93 2b04 	vldr	d2, [r3, #16]
 8002886:	ed87 2b3c 	vstr	d2, [r7, #240]	@ 0xf0
 800288a:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 800288e:	ed93 1b00 	vldr	d1, [r3]
 8002892:	ed87 1b3a 	vstr	d1, [r7, #232]	@ 0xe8
			"u1Kp=%.3f,u1Ki=%.3f,u1Kd=%.3f,"
			"u2Kp=%.3f,u2Ki=%.3f,u2Kd=%.3f,"
			"u3Kp=%.3f,u3Ki=%.3f,u3Kd=%.3f\r\n",
			data.x_desired, data.y_desired, data.phi_end, data.d, data.r,
			imu->roll, imu->pitch, imu->yaw,
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 8002896:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800289a:	881b      	ldrh	r3, [r3, #0]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800289c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 80028a0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028a4:	885b      	ldrh	r3, [r3, #2]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80028a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 80028aa:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028ae:	889b      	ldrh	r3, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80028b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 80028b4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028b8:	88db      	ldrh	r3, [r3, #6]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80028ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80028be:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028c2:	ed93 0b08 	vldr	d0, [r3, #32]
 80028c6:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
 80028ca:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028ce:	ed93 8b0a 	vldr	d8, [r3, #40]	@ 0x28
 80028d2:	ed87 8b32 	vstr	d8, [r7, #200]	@ 0xc8
 80028d6:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028da:	ed93 9b0c 	vldr	d9, [r3, #48]	@ 0x30
 80028de:	ed87 9b30 	vstr	d9, [r7, #192]	@ 0xc0
 80028e2:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80028e6:	ed93 ab0e 	vldr	d10, [r3, #56]	@ 0x38
 80028ea:	ed87 ab2e 	vstr	d10, [r7, #184]	@ 0xb8
 80028ee:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80028f2:	ed93 bb06 	vldr	d11, [r3, #24]
 80028f6:	ed87 bb2c 	vstr	d11, [r7, #176]	@ 0xb0
 80028fa:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80028fe:	ed93 cb08 	vldr	d12, [r3, #32]
 8002902:	ed87 cb2a 	vstr	d12, [r7, #168]	@ 0xa8
 8002906:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800290a:	ed93 db0a 	vldr	d13, [r3, #40]	@ 0x28
 800290e:	ed87 db28 	vstr	d13, [r7, #160]	@ 0xa0
 8002912:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8002916:	ed93 eb02 	vldr	d14, [r3, #8]
 800291a:	ed87 eb26 	vstr	d14, [r7, #152]	@ 0x98
 800291e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8002922:	ed93 fb00 	vldr	d15, [r3]
 8002926:	ed87 fb24 	vstr	d15, [r7, #144]	@ 0x90
 800292a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800292e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002932:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
 8002936:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800293a:	ed93 6b00 	vldr	d6, [r3]
 800293e:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8002942:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002946:	ed93 5b02 	vldr	d5, [r3, #8]
 800294a:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 800294e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002952:	ed93 4b04 	vldr	d4, [r3, #16]
 8002956:	ed87 4b1c 	vstr	d4, [r7, #112]	@ 0x70
 800295a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800295e:	ed93 3b06 	vldr	d3, [r3, #24]
 8002962:	ed87 3b1a 	vstr	d3, [r7, #104]	@ 0x68
 8002966:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800296a:	ed93 2b08 	vldr	d2, [r3, #32]
 800296e:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
 8002972:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002976:	ed93 1b0a 	vldr	d1, [r3, #40]	@ 0x28
 800297a:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 800297e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8002982:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8002986:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 800298a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800298e:	ed93 8b00 	vldr	d8, [r3]
 8002992:	ed87 8b12 	vstr	d8, [r7, #72]	@ 0x48
 8002996:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800299a:	ed93 9b02 	vldr	d9, [r3, #8]
 800299e:	ed87 9b10 	vstr	d9, [r7, #64]	@ 0x40
 80029a2:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029a6:	ed93 ab04 	vldr	d10, [r3, #16]
 80029aa:	ed87 ab0e 	vstr	d10, [r7, #56]	@ 0x38
 80029ae:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029b2:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	@ 0x48
 80029b6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029ba:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	@ 0x50
 80029be:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029c2:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80029c6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029ca:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80029ce:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80029d8:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80029dc:	68de      	ldr	r6, [r3, #12]
 80029de:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80029e2:	689a      	ldr	r2, [r3, #8]
			odom->q_dot[0],odom->q_dot[1],odom->q_dot[2], odom->phi,odom->x_pos,odom->y_pos, err->err_x,
			err->err_y, err->err_phi,
			err->u_errs[0],err->u_errs[1],err->u_errs[2],err->u_errs[3],
			ctrl_out->x_dot, ctrl_out->y_dot, ctrl_out->phi_dot, ctrl_out->u[0], ctrl_out->u[1], ctrl_out->u[2], ctrl_out->u[3],
			ts->current, ts->print_prev, ts->delta,
			ctrl_out->dutyCycles[0], ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 80029e4:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
			ctrl_out->dutyCycles[0], ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 80029ec:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029f0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029f2:	633b      	str	r3, [r7, #48]	@ 0x30
			ctrl_out->dutyCycles[0], ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 80029f4:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80029f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			ctrl_out->dutyCycles[0], ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 80029fc:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 8002a04:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002a08:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a0c:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 8002a10:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a18:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 8002a1c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002a20:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a24:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002a28:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a30:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002a34:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002a38:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a3c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002a40:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002a44:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a48:	eeb7 aae7 	vcvt.f64.f32	d10, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 8002a4c:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002a50:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a54:	eeb7 bae7 	vcvt.f64.f32	d11, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 8002a58:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002a5c:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a60:	eeb7 cae7 	vcvt.f64.f32	d12, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 8002a64:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002a68:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a6c:	eeb7 dae7 	vcvt.f64.f32	d13, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 8002a70:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002a74:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a78:	eeb7 eae7 	vcvt.f64.f32	d14, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 8002a7c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002a80:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a84:	eeb7 fae7 	vcvt.f64.f32	d15, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 8002a88:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002a8c:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a94:	ed87 7b08 	vstr	d7, [r7, #32]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 8002a98:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002aa2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002aa6:	ed87 6b06 	vstr	d6, [r7, #24]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 8002aaa:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002aae:	330c      	adds	r3, #12
 8002ab0:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002ab4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002ab8:	ed87 5b04 	vstr	d5, [r7, #16]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 8002abc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002ac6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002aca:	ed87 4b02 	vstr	d4, [r7, #8]
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002ace:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002ad8:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8002adc:	ed87 3b00 	vstr	d3, [r7]
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002ae0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002aea:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002aee:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002af2:	3318      	adds	r3, #24
 8002af4:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002af8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002afc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002b00:	3324      	adds	r3, #36	@ 0x24
 8002b02:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002b06:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002b0a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002b0e:	3324      	adds	r3, #36	@ 0x24
 8002b10:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002b14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002b18:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002b1c:	3324      	adds	r3, #36	@ 0x24
 8002b1e:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002b22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b26:	ed8d 7b72 	vstr	d7, [sp, #456]	@ 0x1c8
 8002b2a:	ed8d 6b70 	vstr	d6, [sp, #448]	@ 0x1c0
 8002b2e:	ed8d 5b6e 	vstr	d5, [sp, #440]	@ 0x1b8
 8002b32:	ed8d 4b6c 	vstr	d4, [sp, #432]	@ 0x1b0
 8002b36:	ed8d 3b6a 	vstr	d3, [sp, #424]	@ 0x1a8
 8002b3a:	ed97 3b00 	vldr	d3, [r7]
 8002b3e:	ed8d 3b68 	vstr	d3, [sp, #416]	@ 0x1a0
 8002b42:	ed97 4b02 	vldr	d4, [r7, #8]
 8002b46:	ed8d 4b66 	vstr	d4, [sp, #408]	@ 0x198
 8002b4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8002b4e:	ed8d 5b64 	vstr	d5, [sp, #400]	@ 0x190
 8002b52:	ed97 6b06 	vldr	d6, [r7, #24]
 8002b56:	ed8d 6b62 	vstr	d6, [sp, #392]	@ 0x188
 8002b5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b5e:	ed8d 7b60 	vstr	d7, [sp, #384]	@ 0x180
 8002b62:	ed8d fb5e 	vstr	d15, [sp, #376]	@ 0x178
 8002b66:	ed8d eb5c 	vstr	d14, [sp, #368]	@ 0x170
 8002b6a:	ed8d db5a 	vstr	d13, [sp, #360]	@ 0x168
 8002b6e:	ed8d cb58 	vstr	d12, [sp, #352]	@ 0x160
 8002b72:	ed8d bb56 	vstr	d11, [sp, #344]	@ 0x158
 8002b76:	ed8d ab54 	vstr	d10, [sp, #336]	@ 0x150
 8002b7a:	ed8d 9b52 	vstr	d9, [sp, #328]	@ 0x148
 8002b7e:	ed8d 8b50 	vstr	d8, [sp, #320]	@ 0x140
 8002b82:	ed8d 0b4e 	vstr	d0, [sp, #312]	@ 0x138
 8002b86:	ed8d 1b4c 	vstr	d1, [sp, #304]	@ 0x130
 8002b8a:	ed8d 2b4a 	vstr	d2, [sp, #296]	@ 0x128
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	9348      	str	r3, [sp, #288]	@ 0x120
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	9346      	str	r3, [sp, #280]	@ 0x118
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	9345      	str	r3, [sp, #276]	@ 0x114
 8002b9e:	9244      	str	r2, [sp, #272]	@ 0x110
 8002ba0:	9643      	str	r6, [sp, #268]	@ 0x10c
 8002ba2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002ba6:	9242      	str	r2, [sp, #264]	@ 0x108
 8002ba8:	e9cd 0140 	strd	r0, r1, [sp, #256]	@ 0x100
 8002bac:	e9cd 453e 	strd	r4, r5, [sp, #248]	@ 0xf8
 8002bb0:	e006      	b.n	8002bc0 <Start_UART_TX_Task+0x62c>
 8002bb2:	bf00      	nop
 8002bb4:	240006b8 	.word	0x240006b8
 8002bb8:	240006cc 	.word	0x240006cc
 8002bbc:	240006c0 	.word	0x240006c0
 8002bc0:	e9cd 893c 	strd	r8, r9, [sp, #240]	@ 0xf0
 8002bc4:	e9cd ab3a 	strd	sl, fp, [sp, #232]	@ 0xe8
 8002bc8:	ed97 ab0e 	vldr	d10, [r7, #56]	@ 0x38
 8002bcc:	ed8d ab38 	vstr	d10, [sp, #224]	@ 0xe0
 8002bd0:	ed97 9b10 	vldr	d9, [r7, #64]	@ 0x40
 8002bd4:	ed8d 9b36 	vstr	d9, [sp, #216]	@ 0xd8
 8002bd8:	ed97 8b12 	vldr	d8, [r7, #72]	@ 0x48
 8002bdc:	ed8d 8b34 	vstr	d8, [sp, #208]	@ 0xd0
 8002be0:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002be4:	ed8d 0b32 	vstr	d0, [sp, #200]	@ 0xc8
 8002be8:	ed97 1b16 	vldr	d1, [r7, #88]	@ 0x58
 8002bec:	ed8d 1b30 	vstr	d1, [sp, #192]	@ 0xc0
 8002bf0:	ed97 2b18 	vldr	d2, [r7, #96]	@ 0x60
 8002bf4:	ed8d 2b2e 	vstr	d2, [sp, #184]	@ 0xb8
 8002bf8:	ed97 3b1a 	vldr	d3, [r7, #104]	@ 0x68
 8002bfc:	ed8d 3b2c 	vstr	d3, [sp, #176]	@ 0xb0
 8002c00:	ed97 4b1c 	vldr	d4, [r7, #112]	@ 0x70
 8002c04:	ed8d 4b2a 	vstr	d4, [sp, #168]	@ 0xa8
 8002c08:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8002c0c:	ed8d 5b28 	vstr	d5, [sp, #160]	@ 0xa0
 8002c10:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8002c14:	ed8d 6b26 	vstr	d6, [sp, #152]	@ 0x98
 8002c18:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8002c1c:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
 8002c20:	ed97 fb24 	vldr	d15, [r7, #144]	@ 0x90
 8002c24:	ed8d fb22 	vstr	d15, [sp, #136]	@ 0x88
 8002c28:	ed97 eb26 	vldr	d14, [r7, #152]	@ 0x98
 8002c2c:	ed8d eb20 	vstr	d14, [sp, #128]	@ 0x80
 8002c30:	ed97 db28 	vldr	d13, [r7, #160]	@ 0xa0
 8002c34:	ed8d db1e 	vstr	d13, [sp, #120]	@ 0x78
 8002c38:	ed97 cb2a 	vldr	d12, [r7, #168]	@ 0xa8
 8002c3c:	ed8d cb1c 	vstr	d12, [sp, #112]	@ 0x70
 8002c40:	ed97 bb2c 	vldr	d11, [r7, #176]	@ 0xb0
 8002c44:	ed8d bb1a 	vstr	d11, [sp, #104]	@ 0x68
 8002c48:	ed97 ab2e 	vldr	d10, [r7, #184]	@ 0xb8
 8002c4c:	ed8d ab18 	vstr	d10, [sp, #96]	@ 0x60
 8002c50:	ed97 9b30 	vldr	d9, [r7, #192]	@ 0xc0
 8002c54:	ed8d 9b16 	vstr	d9, [sp, #88]	@ 0x58
 8002c58:	ed97 8b32 	vldr	d8, [r7, #200]	@ 0xc8
 8002c5c:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8002c60:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8002c64:	ed8d 0b12 	vstr	d0, [sp, #72]	@ 0x48
 8002c68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002c6c:	9211      	str	r2, [sp, #68]	@ 0x44
 8002c6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c72:	9210      	str	r2, [sp, #64]	@ 0x40
 8002c74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c78:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002c80:	ed97 1b3a 	vldr	d1, [r7, #232]	@ 0xe8
 8002c84:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8002c88:	ed97 2b3c 	vldr	d2, [r7, #240]	@ 0xf0
 8002c8c:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8002c90:	ed97 3b3e 	vldr	d3, [r7, #248]	@ 0xf8
 8002c94:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002c98:	ed97 4b40 	vldr	d4, [r7, #256]	@ 0x100
 8002c9c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002ca0:	ed97 5b42 	vldr	d5, [r7, #264]	@ 0x108
 8002ca4:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002ca8:	ed97 6b44 	vldr	d6, [r7, #272]	@ 0x110
 8002cac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002cb0:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8002cb4:	ed8d 7b00 	vstr	d7, [sp]
 8002cb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002cbc:	4803      	ldr	r0, [pc, #12]	@ (8002ccc <Start_UART_TX_Task+0x738>)
 8002cbe:	f00e fe55 	bl	801196c <iprintf>

    osDelay(9);
 8002cc2:	2009      	movs	r0, #9
 8002cc4:	f00a ffab 	bl	800dc1e <osDelay>
	osDelay(1);
 8002cc8:	bf00      	nop
 8002cca:	e5a0      	b.n	800280e <Start_UART_TX_Task+0x27a>
 8002ccc:	08016c04 	.word	0x08016c04

08002cd0 <StartControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002cdc:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002ce0:	6018      	str	r0, [r3, #0]
  bno055_assignI2C(&hi2c1);
 8002ce2:	48c9      	ldr	r0, [pc, #804]	@ (8003008 <StartControlTask+0x338>)
 8002ce4:	f7fe f946 	bl	8000f74 <bno055_assignI2C>
  bno055_setup();
 8002ce8:	f7fd ffb2 	bl	8000c50 <bno055_setup>
  bno055_setOperationModeNDOF();
 8002cec:	f7fd ff9d 	bl	8000c2a <bno055_setOperationModeNDOF>
  /* USER CODE BEGIN StartControlTask */
  int16_t deltaEncCounts[4] = {0,0,0,0};
 8002cf0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]

  float PI = 3.141592;
 8002cfa:	4bc4      	ldr	r3, [pc, #784]	@ (800300c <StartControlTask+0x33c>)
 8002cfc:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

//  const float R_counts = 17380.0; // MOTORES GRANDES
  const float R_counts = 424.0; // MOTORES CHICOS
 8002d00:	4bc3      	ldr	r3, [pc, #780]	@ (8003010 <StartControlTask+0x340>)
 8002d02:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
  const float Degs_per_count = 360.0 / R_counts;
 8002d06:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8003014 <StartControlTask+0x344>
 8002d0a:	ed97 7aa3 	vldr	s14, [r7, #652]	@ 0x28c
 8002d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d12:	edc7 7aa2 	vstr	s15, [r7, #648]	@ 0x288
  const float Rads_per_count = 2*PI / R_counts;
 8002d16:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 8002d1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d1e:	ed97 7aa3 	vldr	s14, [r7, #652]	@ 0x28c
 8002d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d26:	edc7 7aa1 	vstr	s15, [r7, #644]	@ 0x284

  double u_err_trshld = 0.1;
 8002d2a:	a3b5      	add	r3, pc, #724	@ (adr r3, 8003000 <StartControlTask+0x330>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
//	  for (int j = 0; j < 3; j++) {
//		  uPID_K[i][j] = PID_K_oneM[j];
//	  }
//  }

  float xTrshld = 0.01; // Allowed error cm
 8002d34:	4bb8      	ldr	r3, [pc, #736]	@ (8003018 <StartControlTask+0x348>)
 8002d36:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
  float yTrshld = 0.01; // Allowed error cm
 8002d3a:	4bb7      	ldr	r3, [pc, #732]	@ (8003018 <StartControlTask+0x348>)
 8002d3c:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
  float phiTrshld = 0.01; // Allowed error radians
 8002d40:	4bb5      	ldr	r3, [pc, #724]	@ (8003018 <StartControlTask+0x348>)
 8002d42:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c

  double sumKI_x = 0;
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
  double sumKI_y = 0;
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
  double sumKI_phi = 0;
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
  double sumKI_u_errs[4] = {0,0,0,0};
 8002d6a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002d6e:	2220      	movs	r2, #32
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00f f846 	bl	8011e04 <memset>

  double dt = 0;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260

  bno055_vector_t BNO055_EulerVector = bno055_getVectorEuler();
 8002d84:	f7fe f8c2 	bl	8000f0c <bno055_getVectorEuler>
 8002d88:	eeb0 4b40 	vmov.f64	d4, d0
 8002d8c:	eeb0 5b41 	vmov.f64	d5, d1
 8002d90:	eeb0 6b42 	vmov.f64	d6, d2
 8002d94:	eeb0 7b43 	vmov.f64	d7, d3
 8002d98:	ed87 4b74 	vstr	d4, [r7, #464]	@ 0x1d0
 8002d9c:	ed87 5b76 	vstr	d5, [r7, #472]	@ 0x1d8
 8002da0:	ed87 6b78 	vstr	d6, [r7, #480]	@ 0x1e0
 8002da4:	ed87 7b7a 	vstr	d7, [r7, #488]	@ 0x1e8

  int16_t deadzone_duty_lim = 1000;
 8002da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dac:	f8a7 325e 	strh.w	r3, [r7, #606]	@ 0x25e
  int16_t max_duty_cycle = 19999;
 8002db0:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8002db4:	f8a7 325c 	strh.w	r3, [r7, #604]	@ 0x25c

  InputData data = {0,0,0,1,1,0,0,0,0};
 8002db8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002dbc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dc0:	4a96      	ldr	r2, [pc, #600]	@ (800301c <StartControlTask+0x34c>)
 8002dc2:	461c      	mov	r4, r3
 8002dc4:	4615      	mov	r5, r2
 8002dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002dd6:	e884 0003 	stmia.w	r4, {r0, r1}
  CtrlTsk_Data CtrlTsk_data;
  IMUData      *imu      = &CtrlTsk_data.imu;
 8002dda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002dde:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  EncoderData  *enc      = &CtrlTsk_data.encoders;
 8002de2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002de6:	3318      	adds	r3, #24
 8002de8:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
  Errors       *err      = &CtrlTsk_data.error;
 8002dec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002df0:	3358      	adds	r3, #88	@ 0x58
 8002df2:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  TimeState    *ts       = &CtrlTsk_data.time;
 8002df6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002dfa:	3390      	adds	r3, #144	@ 0x90
 8002dfc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  OdomData     *odom     = &CtrlTsk_data.odom;
 8002e00:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e04:	33a0      	adds	r3, #160	@ 0xa0
 8002e06:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  CtrlOutData  *ctrl_out = &CtrlTsk_data.ctrl;
 8002e0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e0e:	33d0      	adds	r3, #208	@ 0xd0
 8002e10:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  PIDConfig kpids = {
 8002e14:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002e18:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	2354      	movs	r3, #84	@ 0x54
 8002e20:	461a      	mov	r2, r3
 8002e22:	2100      	movs	r1, #0
 8002e24:	f00e ffee 	bl	8011e04 <memset>
		{0.0f, 0.0f, 0.0f},
		{0.0f, 0.0f, 0.0f}
	}
  };

  PIDGains *xPID_K   = &kpids.x_pid;
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  PIDGains *yPID_K   = &kpids.y_pid;
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	330c      	adds	r3, #12
 8002e36:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  PIDGains *phiPID_K = &kpids.phi_pid;
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	3318      	adds	r3, #24
 8002e40:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  PIDGains *uPID_K   = kpids.u_pid;
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	3324      	adds	r3, #36	@ 0x24
 8002e4a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  imu->yaw = 0.0;  imu->roll = 0.0;  imu->pitch = 0.0;
 8002e4e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9c1 2300 	strd	r2, r3, [r1]
 8002e5e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e6e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  for (int i = 0; i < 4; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8002e84:	e02a      	b.n	8002edc <StartControlTask+0x20c>
      enc->cnt_vals[i] = 0;  enc->prevcnt_vals[i] = 0;  enc->angleVals[i] = 0.0f;  enc->omegaVals[i] = 0.0;
 8002e86:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002e8a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002e94:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002e98:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8002e9c:	3204      	adds	r2, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002ea4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8002ea8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002eac:	3304      	adds	r3, #4
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8002ebc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	18d1      	adds	r1, r2, r3
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 8002ed2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8002edc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	ddd0      	ble.n	8002e86 <StartControlTask+0x1b6>
  }

  err->err_x = 0.0;  err->err_y = 0.0;  err->err_phi = 0.0;
 8002ee4:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9c1 2300 	strd	r2, r3, [r1]
 8002ef4:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f04:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (int i = 0; i < 4; i++) {
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8002f1a:	e011      	b.n	8002f40 <StartControlTask+0x270>
	  err->u_errs[i] = 0.0;
 8002f1c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8002f20:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002f24:	3303      	adds	r3, #3
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	18d1      	adds	r1, r2, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 8002f36:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8002f40:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	dde9      	ble.n	8002f1c <StartControlTask+0x24c>
  }
  ts->current = 1;  ts->previous = 0;  ts->delta = osKernelGetTickCount();  ts->print_prev = 1;
 8002f48:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002f54:	2200      	movs	r2, #0
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	f00a fdba 	bl	800dad0 <osKernelGetTickCount>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002f68:	2201      	movs	r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  odom->x_pos = 0.0;  odom->y_pos = 0.0;  odom->phi = 0.0; odom->q_dot[0] = 0; odom->q_dot[1] = 0; odom->q_dot[2] = 0;
 8002f6c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9c1 2300 	strd	r2, r3, [r1]
 8002f7c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002f8c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f9c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002fac:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002fbc:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  ctrl_out->x_dot = 4.0;  ctrl_out->y_dot = 6.0;  ctrl_out->phi_dot = 0.0;
 8002fcc:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <StartControlTask+0x350>)
 8002fd6:	e9c1 2300 	strd	r2, r3, [r1]
 8002fda:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <StartControlTask+0x354>)
 8002fe4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002fe8:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9c1 2304 	strd	r2, r3, [r1, #16]

  for (int i = 0; i < 4; i++) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8002ffe:	e042      	b.n	8003086 <StartControlTask+0x3b6>
 8003000:	9999999a 	.word	0x9999999a
 8003004:	3fb99999 	.word	0x3fb99999
 8003008:	24000314 	.word	0x24000314
 800300c:	40490fd8 	.word	0x40490fd8
 8003010:	43d40000 	.word	0x43d40000
 8003014:	43b40000 	.word	0x43b40000
 8003018:	3c23d70a 	.word	0x3c23d70a
 800301c:	08016fc0 	.word	0x08016fc0
 8003020:	40100000 	.word	0x40100000
 8003024:	40180000 	.word	0x40180000
      ctrl_out->PWM_vals[i] = 0.0;  ctrl_out->dutyCycles[i] = 0;  ctrl_out->M_dirs[i] = 0;  ctrl_out->u[i] = 0.0;
 8003028:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800302c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003030:	3303      	adds	r3, #3
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	18d1      	adds	r1, r2, r3
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9c1 2300 	strd	r2, r3, [r1]
 8003042:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003046:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 800304a:	321c      	adds	r2, #28
 800304c:	2100      	movs	r1, #0
 800304e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003052:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003056:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800305a:	4413      	add	r3, r2
 800305c:	3340      	adds	r3, #64	@ 0x40
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003066:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800306a:	3309      	adds	r3, #9
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	18d1      	adds	r1, r2, r3
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 800307c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003080:	3301      	adds	r3, #1
 8003082:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8003086:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800308a:	2b03      	cmp	r3, #3
 800308c:	ddcc      	ble.n	8003028 <StartControlTask+0x358>
  }

  osStatus_t queue_status;

  bool simulation_on = false;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233

  bool velocity_ctrl_mode = true;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232

  double max_integral_action_val = 999999999999999;
 800309a:	a3cd      	add	r3, pc, #820	@ (adr r3, 80033d0 <StartControlTask+0x700>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228

  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 80030a4:	200a      	movs	r0, #10
 80030a6:	f00a fdba 	bl	800dc1e <osDelay>

/*------------------------------------------------------------------------*/
/******* 1. Get angular position and velocity with encoders & IMU *********/
    if (!simulation_on) {
 80030aa:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 818f 	beq.w	80033d8 <StartControlTask+0x708>
		enc->cnt_vals[0] = TIM1->CNT; enc->cnt_vals[1] = TIM2->CNT; enc->cnt_vals[2] = TIM4->CNT; enc->cnt_vals[3] = TIM8->CNT;
 80030ba:	4bc1      	ldr	r3, [pc, #772]	@ (80033c0 <StartControlTask+0x6f0>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	b29a      	uxth	r2, r3
 80030c0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80030c4:	801a      	strh	r2, [r3, #0]
 80030c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80030d2:	805a      	strh	r2, [r3, #2]
 80030d4:	4bbb      	ldr	r3, [pc, #748]	@ (80033c4 <StartControlTask+0x6f4>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80030de:	809a      	strh	r2, [r3, #4]
 80030e0:	4bb9      	ldr	r3, [pc, #740]	@ (80033c8 <StartControlTask+0x6f8>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80030ea:	80da      	strh	r2, [r3, #6]

		BNO055_EulerVector = bno055_getVectorEuler();
 80030ec:	f7fd ff0e 	bl	8000f0c <bno055_getVectorEuler>
 80030f0:	eeb0 4b40 	vmov.f64	d4, d0
 80030f4:	eeb0 5b41 	vmov.f64	d5, d1
 80030f8:	eeb0 6b42 	vmov.f64	d6, d2
 80030fc:	eeb0 7b43 	vmov.f64	d7, d3
 8003100:	ed87 4b74 	vstr	d4, [r7, #464]	@ 0x1d0
 8003104:	ed87 5b76 	vstr	d5, [r7, #472]	@ 0x1d8
 8003108:	ed87 6b78 	vstr	d6, [r7, #480]	@ 0x1e0
 800310c:	ed87 7b7a 	vstr	d7, [r7, #488]	@ 0x1e8
		imu->yaw = BNO055_EulerVector.x;  imu->roll = BNO055_EulerVector.y;  imu->pitch = BNO055_EulerVector.z;
 8003110:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8003114:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8003118:	e9c1 2300 	strd	r2, r3, [r1]
 800311c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003120:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8003124:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003128:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800312c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8003130:	e9c1 2304 	strd	r2, r3, [r1, #16]

		// Calculate counter difference, considering wrap-around
		deltaEncCounts[0] = computeDeltaCNT(enc->cnt_vals[0], enc->prevcnt_vals[0]);
 8003134:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800313e:	891b      	ldrh	r3, [r3, #8]
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f7fe f840 	bl	80011c8 <computeDeltaCNT>
 8003148:	4603      	mov	r3, r0
 800314a:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
		deltaEncCounts[1] = computeDeltaCNT(enc->cnt_vals[1], enc->prevcnt_vals[1]);
 800314e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003152:	885a      	ldrh	r2, [r3, #2]
 8003154:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003158:	895b      	ldrh	r3, [r3, #10]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f7fe f833 	bl	80011c8 <computeDeltaCNT>
 8003162:	4603      	mov	r3, r0
 8003164:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
		deltaEncCounts[2] = computeDeltaCNT(enc->cnt_vals[2], enc->prevcnt_vals[2]);
 8003168:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800316c:	889a      	ldrh	r2, [r3, #4]
 800316e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003172:	899b      	ldrh	r3, [r3, #12]
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f7fe f826 	bl	80011c8 <computeDeltaCNT>
 800317c:	4603      	mov	r3, r0
 800317e:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
		deltaEncCounts[3] = computeDeltaCNT(enc->cnt_vals[3], enc->prevcnt_vals[3]);
 8003182:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003186:	88da      	ldrh	r2, [r3, #6]
 8003188:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800318c:	89db      	ldrh	r3, [r3, #14]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7fe f819 	bl	80011c8 <computeDeltaCNT>
 8003196:	4603      	mov	r3, r0
 8003198:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	//	printf("TIM1: %d TIM2: %d TIM4: %d TIM8: %d \r\n", CNT_Vals[0],CNT_Vals[1],CNT_Vals[2],CNT_Vals[3]);
		enc->prevcnt_vals[0] = enc->cnt_vals[0]; enc->prevcnt_vals[1] = enc->cnt_vals[1]; enc->prevcnt_vals[2] = enc->cnt_vals[2]; enc->prevcnt_vals[3] = enc->cnt_vals[3];
 800319c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031a6:	811a      	strh	r2, [r3, #8]
 80031a8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031ac:	885a      	ldrh	r2, [r3, #2]
 80031ae:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031b2:	815a      	strh	r2, [r3, #10]
 80031b4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031b8:	889a      	ldrh	r2, [r3, #4]
 80031ba:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031be:	819a      	strh	r2, [r3, #12]
 80031c0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031c4:	88da      	ldrh	r2, [r3, #6]
 80031c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031ca:	81da      	strh	r2, [r3, #14]

		// Update total angle value
		enc->angleVals[0] += deltaEncCounts[0] * Degs_per_count;
 80031cc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80031d4:	f9b7 3210 	ldrsh.w	r3, [r7, #528]	@ 0x210
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031e0:	edd7 7aa2 	vldr	s15, [r7, #648]	@ 0x288
 80031e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031f0:	edc3 7a04 	vstr	s15, [r3, #16]
		enc->angleVals[1] += deltaEncCounts[1] * Degs_per_count;
 80031f4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80031f8:	ed93 7a05 	vldr	s14, [r3, #20]
 80031fc:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	@ 0x212
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003208:	edd7 7aa2 	vldr	s15, [r7, #648]	@ 0x288
 800320c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003214:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003218:	edc3 7a05 	vstr	s15, [r3, #20]
		enc->angleVals[2] += deltaEncCounts[2] * Degs_per_count;
 800321c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003220:	ed93 7a06 	vldr	s14, [r3, #24]
 8003224:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003230:	edd7 7aa2 	vldr	s15, [r7, #648]	@ 0x288
 8003234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003240:	edc3 7a06 	vstr	s15, [r3, #24]
		enc->angleVals[3] += deltaEncCounts[3] * Degs_per_count;
 8003244:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003248:	ed93 7a07 	vldr	s14, [r3, #28]
 800324c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003258:	edd7 7aa2 	vldr	s15, [r7, #648]	@ 0x288
 800325c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003268:	edc3 7a07 	vstr	s15, [r3, #28]

		// Calculate velocities
		ts->print_prev = ts->previous;
 800326c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003276:	60da      	str	r2, [r3, #12]
		ts->current = osKernelGetTickCount();
 8003278:	f00a fc2a 	bl	800dad0 <osKernelGetTickCount>
 800327c:	4602      	mov	r2, r0
 800327e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003282:	601a      	str	r2, [r3, #0]
		ts->delta = ts->current - ts->previous;
 8003284:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003296:	609a      	str	r2, [r3, #8]
		ts->previous = ts->current;
 8003298:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80032a2:	605a      	str	r2, [r3, #4]
		//	printf(" currentTime: %lu prevTime: %lu deltaTime: %lu", currentTime, prevTime, deltaTime);

		enc->omegaVals[0] = deltaEncCounts[0] * Rads_per_count /  (ts->delta / 1000.0f) / (2*PI);
 80032a4:	f9b7 3210 	ldrsh.w	r3, [r7, #528]	@ 0x210
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032b0:	edd7 7aa1 	vldr	s15, [r7, #644]	@ 0x284
 80032b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c6:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 80033cc <StartControlTask+0x6fc>
 80032ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d2:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 80032d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80032da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80032e6:	ed83 7b08 	vstr	d7, [r3, #32]
		enc->omegaVals[1] = deltaEncCounts[1] * Rads_per_count /  (ts->delta / 1000.0f) / (2*PI);
 80032ea:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	@ 0x212
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f6:	edd7 7aa1 	vldr	s15, [r7, #644]	@ 0x284
 80032fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330c:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 80033cc <StartControlTask+0x6fc>
 8003310:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003314:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003318:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 800331c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003328:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800332c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
		enc->omegaVals[2] = deltaEncCounts[2] * Rads_per_count /  (ts->delta / 1000.0f) / (2*PI);
 8003330:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333c:	edd7 7aa1 	vldr	s15, [r7, #644]	@ 0x284
 8003340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003344:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003352:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80033cc <StartControlTask+0x6fc>
 8003356:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335e:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 8003362:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800336a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800336e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003372:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
		enc->omegaVals[3] = deltaEncCounts[3] * Rads_per_count /  (ts->delta / 1000.0f) / (2*PI);
 8003376:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003382:	edd7 7aa1 	vldr	s15, [r7, #644]	@ 0x284
 8003386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800338a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003398:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80033cc <StartControlTask+0x6fc>
 800339c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033a4:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 80033a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033b4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80033b8:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
 80033bc:	e11c      	b.n	80035f8 <StartControlTask+0x928>
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40010400 	.word	0x40010400
 80033cc:	447a0000 	.word	0x447a0000
 80033d0:	2633fff8 	.word	0x2633fff8
 80033d4:	430c6bf5 	.word	0x430c6bf5
    } else {
		BNO055_EulerVector = bno055_getVectorEuler();
 80033d8:	f7fd fd98 	bl	8000f0c <bno055_getVectorEuler>
 80033dc:	eeb0 4b40 	vmov.f64	d4, d0
 80033e0:	eeb0 5b41 	vmov.f64	d5, d1
 80033e4:	eeb0 6b42 	vmov.f64	d6, d2
 80033e8:	eeb0 7b43 	vmov.f64	d7, d3
 80033ec:	ed87 4b74 	vstr	d4, [r7, #464]	@ 0x1d0
 80033f0:	ed87 5b76 	vstr	d5, [r7, #472]	@ 0x1d8
 80033f4:	ed87 6b78 	vstr	d6, [r7, #480]	@ 0x1e0
 80033f8:	ed87 7b7a 	vstr	d7, [r7, #488]	@ 0x1e8
		imu->yaw = BNO055_EulerVector.x;  imu->roll = BNO055_EulerVector.y;  imu->pitch = BNO055_EulerVector.z;
 80033fc:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8003400:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8003404:	e9c1 2300 	strd	r2, r3, [r1]
 8003408:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800340c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8003410:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003414:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8003418:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800341c:	e9c1 2304 	strd	r2, r3, [r1, #16]

    	ts->print_prev = ts->previous;
 8003420:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800342a:	60da      	str	r2, [r3, #12]
		ts->current = osKernelGetTickCount();
 800342c:	f00a fb50 	bl	800dad0 <osKernelGetTickCount>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003436:	601a      	str	r2, [r3, #0]
		ts->delta = ts->current - ts->previous;
 8003438:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	1ad2      	subs	r2, r2, r3
 8003446:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800344a:	609a      	str	r2, [r3, #8]
		ts->previous = ts->current;
 800344c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003456:	605a      	str	r2, [r3, #4]

		// Simple first-order simulation model: omega approaches u with time
		float tau = 0.1f;  // time constant for motor response
 8003458:	4b10      	ldr	r3, [pc, #64]	@ (800349c <StartControlTask+0x7cc>)
 800345a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
		float alpha = ts->delta / (1000.0f * tau + ts->delta);  // convert delta to seconds
 800345e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346c:	edd7 7a89 	vldr	s15, [r7, #548]	@ 0x224
 8003470:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80034a0 <StartControlTask+0x7d0>
 8003474:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003478:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348e:	edc7 7a88 	vstr	s15, [r7, #544]	@ 0x220

    	for (int i = 0; i < 4; i++) {
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8003498:	e0a9      	b.n	80035ee <StartControlTask+0x91e>
 800349a:	bf00      	nop
 800349c:	3dcccccd 	.word	0x3dcccccd
 80034a0:	447a0000 	.word	0x447a0000
    	    enc->omegaVals[i] = (1 - alpha) * enc->omegaVals[i] + alpha * ctrl_out->u[i];
 80034a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034a8:	edd7 7a88 	vldr	s15, [r7, #544]	@ 0x220
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034b4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80034b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80034bc:	3304      	adds	r3, #4
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	ed93 7b00 	vldr	d7, [r3]
 80034c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80034ca:	edd7 7a88 	vldr	s15, [r7, #544]	@ 0x220
 80034ce:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80034d2:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80034d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80034da:	3309      	adds	r3, #9
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7b00 	vldr	d7, [r3]
 80034e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034ec:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80034f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80034f4:	3304      	adds	r3, #4
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	ed83 7b00 	vstr	d7, [r3]

    	    // Update total angle by integrating omega
    	    float dt = ts->delta / 1000.0f;  // ms to s
 80034fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800350c:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 80034a0 <StartControlTask+0x7d0>
 8003510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003514:	edc7 7a87 	vstr	s15, [r7, #540]	@ 0x21c
    	    enc->angleVals[i] += enc->omegaVals[i] * dt;
 8003518:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800351c:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003520:	3304      	adds	r3, #4
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800352e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003532:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003536:	3304      	adds	r3, #4
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	ed93 5b00 	vldr	d5, [r3]
 8003540:	edd7 7a87 	vldr	s15, [r7, #540]	@ 0x21c
 8003544:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003548:	ee25 7b07 	vmul.f64	d7, d5, d7
 800354c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003550:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003554:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003558:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800355c:	3304      	adds	r3, #4
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	edc3 7a00 	vstr	s15, [r3]

    	    // Simulate counts from angle
    	    enc->cnt_vals[i] = (uint16_t)(enc->angleVals[i] / Degs_per_count) % 65536;
 8003566:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800356a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800356e:	3304      	adds	r3, #4
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	edd3 6a00 	vldr	s13, [r3]
 8003578:	ed97 7aa2 	vldr	s14, [r7, #648]	@ 0x288
 800357c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 3a90 	vmov	r3, s15
 8003588:	b299      	uxth	r1, r3
 800358a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800358e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8003592:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	    deltaEncCounts[i] = computeDeltaCNT(enc->cnt_vals[i], enc->prevcnt_vals[i]);
 8003596:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800359a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800359e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80035a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80035a6:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80035aa:	3204      	adds	r2, #4
 80035ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd fe09 	bl	80011c8 <computeDeltaCNT>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 80035c4:	443b      	add	r3, r7
 80035c6:	f823 2cb0 	strh.w	r2, [r3, #-176]
    	    enc->prevcnt_vals[i] = enc->cnt_vals[i];
 80035ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80035ce:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80035d2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80035d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80035da:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80035de:	3204      	adds	r2, #4
 80035e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < 4; i++) {
 80035e4:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80035e8:	3301      	adds	r3, #1
 80035ea:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80035ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	f77f af56 	ble.w	80034a4 <StartControlTask+0x7d4>


/*------------------------------------------------------------------------*/
/**************** 2. Receive desired pose/pidKs from UART *****************/

	osMessageQueueGet(UART2CtrlTsk_QueueHandle, &data, NULL, osWaitForever);
 80035f8:	4bd5      	ldr	r3, [pc, #852]	@ (8003950 <StartControlTask+0xc80>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8003600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003604:	2200      	movs	r2, #0
 8003606:	f00a fc7f 	bl	800df08 <osMessageQueueGet>
	osMessageQueueGet(UART2KPIDs_QueueHandle, &kpids, NULL, osWaitForever);
 800360a:	4bd2      	ldr	r3, [pc, #840]	@ (8003954 <StartControlTask+0xc84>)
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f107 010c 	add.w	r1, r7, #12
 8003612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003616:	2200      	movs	r2, #0
 8003618:	f00a fc76 	bl	800df08 <osMessageQueueGet>
/*------------------------------------------------------------------------*/


/*------------------------------------------------------------------------*/
/************************** 3. Compute errors *****************************/
	err->err_x = data.x_desired - odom->x_pos;
 800361c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003620:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003624:	ed93 6b00 	vldr	d6, [r3]
 8003628:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800362c:	ed93 7b00 	vldr	d7, [r3]
 8003630:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003634:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003638:	ed83 7b00 	vstr	d7, [r3]
	err->err_y = data.y_desired - odom->y_pos;
 800363c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003640:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003644:	ed93 6b02 	vldr	d6, [r3, #8]
 8003648:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800364c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003650:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003654:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003658:	ed83 7b02 	vstr	d7, [r3, #8]
	//phi_desired = atan2(Err_y, Err_x); /*<-- Unnecessary? ony for diff drive?*/

	/* POTENTIALLY READ IMU HERE (TO UPDATE PHI)*/
	err->err_phi = data.phi_end - odom->phi;
 800365c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003660:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003664:	ed93 6b04 	vldr	d6, [r3, #16]
 8003668:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800366c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003670:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003674:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003678:	ed83 7b04 	vstr	d7, [r3, #16]
/**************************************************************************/
/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/
/***************************** 4. POSE PIDs *******************************/
	if (!velocity_ctrl_mode) {
 800367c:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 81fa 	beq.w	8003a80 <StartControlTask+0xdb0>

		if (abs(err->err_x) > xTrshld){
 800368c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003690:	ed93 7b00 	vldr	d7, [r3]
 8003694:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003698:	ee17 3a90 	vmov	r3, s15
 800369c:	2b00      	cmp	r3, #0
 800369e:	bfb8      	it	lt
 80036a0:	425b      	neglt	r3, r3
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036aa:	ed97 7a9d 	vldr	s14, [r7, #628]	@ 0x274
 80036ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	d54d      	bpl.n	8003754 <StartControlTask+0xa84>
			sumKI_x += err->err_x * ts->delta;
 80036b8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80036bc:	ed93 6b00 	vldr	d6, [r3]
 80036c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80036ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036d2:	ed97 6bae 	vldr	d6, [r7, #696]	@ 0x2b8
 80036d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036da:	ed87 7bae 	vstr	d7, [r7, #696]	@ 0x2b8
			ctrl_out->x_dot = xPID_K->Kp*err->err_x + xPID_K->Ki*sumKI_x + xPID_K->Kd * (err->err_x / ts->delta);
 80036de:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80036ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80036ee:	ed93 7b00 	vldr	d7, [r3]
 80036f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80036f6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80036fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80036fe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003702:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8003706:	ee25 7b07 	vmul.f64	d7, d5, d7
 800370a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800370e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8003712:	edd3 7a02 	vldr	s15, [r3, #8]
 8003716:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800371a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800371e:	ed93 3b00 	vldr	d3, [r3]
 8003722:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8003730:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003734:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003738:	ee36 7b07 	vadd.f64	d7, d6, d7
 800373c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003740:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->phi_dot = 0;
 8003744:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		if (abs(err->err_y) > yTrshld){
 8003754:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003758:	ed93 7b02 	vldr	d7, [r3, #8]
 800375c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003760:	ee17 3a90 	vmov	r3, s15
 8003764:	2b00      	cmp	r3, #0
 8003766:	bfb8      	it	lt
 8003768:	425b      	neglt	r3, r3
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003772:	ed97 7a9c 	vldr	s14, [r7, #624]	@ 0x270
 8003776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	d54d      	bpl.n	800381c <StartControlTask+0xb4c>
			sumKI_y += err->err_y * ts->delta;
 8003780:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003784:	ed93 6b02 	vldr	d6, [r3, #8]
 8003788:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003796:	ee26 7b07 	vmul.f64	d7, d6, d7
 800379a:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 800379e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037a2:	ed87 7bac 	vstr	d7, [r7, #688]	@ 0x2b0
			ctrl_out->y_dot = yPID_K->Kp*err->err_y + yPID_K->Ki*sumKI_y + yPID_K->Kd * (err->err_y / ts->delta);
 80037a6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037b2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80037b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80037ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80037be:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80037c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037ca:	ed97 7bac 	vldr	d7, [r7, #688]	@ 0x2b0
 80037ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80037d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80037da:	edd3 7a02 	vldr	s15, [r3, #8]
 80037de:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80037e6:	ed93 3b02 	vldr	d3, [r3, #8]
 80037ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 80037f8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80037fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003800:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003804:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003808:	ed83 7b02 	vstr	d7, [r3, #8]
			ctrl_out->phi_dot = 0;
 800380c:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		if (abs(err->err_x) <= xTrshld && abs(err->err_y) <= yTrshld) {
 800381c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003820:	ed93 7b00 	vldr	d7, [r3]
 8003824:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003828:	ee17 3a90 	vmov	r3, s15
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfb8      	it	lt
 8003830:	425b      	neglt	r3, r3
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383a:	ed97 7a9d 	vldr	s14, [r7, #628]	@ 0x274
 800383e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	f2c0 8087 	blt.w	8003958 <StartControlTask+0xc88>
 800384a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800384e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003852:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003856:	ee17 3a90 	vmov	r3, s15
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfb8      	it	lt
 800385e:	425b      	neglt	r3, r3
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	ed97 7a9c 	vldr	s14, [r7, #624]	@ 0x270
 800386c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003874:	db70      	blt.n	8003958 <StartControlTask+0xc88>
			ctrl_out->x_dot = 0;
 8003876:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9c1 2300 	strd	r2, r3, [r1]
			ctrl_out->y_dot = 0;
 8003886:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9c1 2302 	strd	r2, r3, [r1, #8]

			if (abs(err->err_phi) > phiTrshld){
 8003896:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800389a:	ed93 7b04 	vldr	d7, [r3, #16]
 800389e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80038a2:	ee17 3a90 	vmov	r3, s15
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bfb8      	it	lt
 80038aa:	425b      	neglt	r3, r3
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b4:	ed97 7a9b 	vldr	s14, [r7, #620]	@ 0x26c
 80038b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d54a      	bpl.n	8003958 <StartControlTask+0xc88>
				sumKI_phi += err->err_phi * ts->delta;
 80038c2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80038c6:	ed93 6b04 	vldr	d6, [r3, #16]
 80038ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80038d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80038dc:	ed97 6baa 	vldr	d6, [r7, #680]	@ 0x2a8
 80038e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038e4:	ed87 7baa 	vstr	d7, [r7, #680]	@ 0x2a8
				ctrl_out->phi_dot = phiPID_K->Kp*err->err_phi + phiPID_K->Ki*sumKI_phi + phiPID_K->Kd * (err->err_phi / ts->delta);
 80038e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038f4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80038f8:	ed93 7b04 	vldr	d7, [r3, #16]
 80038fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003900:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003904:	edd3 7a01 	vldr	s15, [r3, #4]
 8003908:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800390c:	ed97 7baa 	vldr	d7, [r7, #680]	@ 0x2a8
 8003910:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003914:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003918:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800391c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003920:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003924:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003928:	ed93 3b04 	vldr	d3, [r3, #16]
 800392c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 800393a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800393e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003942:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003946:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800394a:	ed83 7b04 	vstr	d7, [r3, #16]
 800394e:	e003      	b.n	8003958 <StartControlTask+0xc88>
 8003950:	240006c4 	.word	0x240006c4
 8003954:	240006c8 	.word	0x240006c8
			}
		}

		if (abs(err->err_x) <= xTrshld && abs(err->err_y) <= yTrshld && abs(err->err_phi) <= phiTrshld){
 8003958:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800395c:	ed93 7b00 	vldr	d7, [r3]
 8003960:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003964:	ee17 3a90 	vmov	r3, s15
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfb8      	it	lt
 800396c:	425b      	neglt	r3, r3
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003976:	ed97 7a9d 	vldr	s14, [r7, #628]	@ 0x274
 800397a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	db55      	blt.n	8003a30 <StartControlTask+0xd60>
 8003984:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003988:	ed93 7b02 	vldr	d7, [r3, #8]
 800398c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003990:	ee17 3a90 	vmov	r3, s15
 8003994:	2b00      	cmp	r3, #0
 8003996:	bfb8      	it	lt
 8003998:	425b      	neglt	r3, r3
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	ed97 7a9c 	vldr	s14, [r7, #624]	@ 0x270
 80039a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ae:	db3f      	blt.n	8003a30 <StartControlTask+0xd60>
 80039b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80039b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80039b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80039bc:	ee17 3a90 	vmov	r3, s15
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfb8      	it	lt
 80039c4:	425b      	neglt	r3, r3
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ce:	ed97 7a9b 	vldr	s14, [r7, #620]	@ 0x26c
 80039d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	db29      	blt.n	8003a30 <StartControlTask+0xd60>

			ctrl_out->x_dot = 0;
 80039dc:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9c1 2300 	strd	r2, r3, [r1]
			ctrl_out->y_dot = 0;
 80039ec:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ctrl_out->phi_dot = 0;
 80039fc:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c1 2304 	strd	r2, r3, [r1, #16]
			sumKI_x = 0; sumKI_y = 0; sumKI_phi = 0;
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8

	//	printf("Calling computeWheelSpeeds(phi=%.2f, d=%.2f, r=%.2f, phi_dot=%.2f, y_dot=%.2f, x_dot=%.2f)\r\n",
	//	       0.0, 1.0, 1.0, 0.0, 3.0, 6.0);

	//	computeNecessaryWheelSpeeds(0.0, data.d, data.r, ctrl_out->u, 0.0, 3.0, 6.0);
		computeNecessaryWheelSpeeds(odom->phi, data.d, data.r, ctrl_out->u, ctrl_out->phi_dot, ctrl_out->y_dot, ctrl_out->x_dot);
 8003a30:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003a34:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a38:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003a3c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a40:	ed93 6b06 	vldr	d6, [r3, #24]
 8003a44:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003a48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a4c:	ed93 2b08 	vldr	d2, [r3, #32]
 8003a50:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003a54:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003a58:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003a5c:	ed93 3b04 	vldr	d3, [r3, #16]
 8003a60:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003a64:	ed93 4b02 	vldr	d4, [r3, #8]
 8003a68:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003a6c:	ed93 5b00 	vldr	d5, [r3]
 8003a70:	4610      	mov	r0, r2
 8003a72:	eeb0 1b46 	vmov.f64	d1, d6
 8003a76:	eeb0 0b47 	vmov.f64	d0, d7
 8003a7a:	f7fd fc17 	bl	80012ac <computeNecessaryWheelSpeeds>
 8003a7e:	e02f      	b.n	8003ae0 <StartControlTask+0xe10>

	}
	else {
		ctrl_out->u[0] = data.u1_desired;
 8003a80:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003a84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a88:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a90:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003a94:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
		ctrl_out->u[1] = data.u2_desired;
 8003a98:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003a9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003aa0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003aa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aa8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003aac:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
		ctrl_out->u[2] = data.u3_desired;
 8003ab0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003ab4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ab8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ac0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003ac4:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
		ctrl_out->u[3] = data.u4_desired;
 8003ac8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003acc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ad0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003adc:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/
/***************************** 6. MOTOR PIDs *******************************/

	for (int i = 0; i < 4; i++) {
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8003ae6:	e1ea      	b.n	8003ebe <StartControlTask+0x11ee>

		err->u_errs[i] = ctrl_out->u[i] - enc->omegaVals[i];
 8003ae8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003aec:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003af0:	3309      	adds	r3, #9
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	ed93 6b00 	vldr	d6, [r3]
 8003afa:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003afe:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b02:	3304      	adds	r3, #4
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	ed93 7b00 	vldr	d7, [r3]
 8003b0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b10:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003b14:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b18:	3303      	adds	r3, #3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	ed83 7b00 	vstr	d7, [r3]
		sumKI_u_errs[i] += err->u_errs[i] * ts->delta;
 8003b22:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003b2c:	443b      	add	r3, r7
 8003b2e:	3bd0      	subs	r3, #208	@ 0xd0
 8003b30:	ed93 6b00 	vldr	d6, [r3]
 8003b34:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003b38:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	ed93 5b00 	vldr	d5, [r3]
 8003b46:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003b54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b5c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003b66:	443b      	add	r3, r7
 8003b68:	3bd0      	subs	r3, #208	@ 0xd0
 8003b6a:	ed83 7b00 	vstr	d7, [r3]
		if (sumKI_u_errs[i] > max_integral_action_val) sumKI_u_errs[i] = max_integral_action_val;
 8003b6e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003b78:	443b      	add	r3, r7
 8003b7a:	3bd0      	subs	r3, #208	@ 0xd0
 8003b7c:	ed93 7b00 	vldr	d7, [r3]
 8003b80:	ed97 6b8a 	vldr	d6, [r7, #552]	@ 0x228
 8003b84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8c:	d50b      	bpl.n	8003ba6 <StartControlTask+0xed6>
 8003b8e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003b98:	443b      	add	r3, r7
 8003b9a:	f1a3 01d0 	sub.w	r1, r3, #208	@ 0xd0
 8003b9e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8003ba2:	e9c1 2300 	strd	r2, r3, [r1]
		if (sumKI_u_errs[i] < -max_integral_action_val) sumKI_u_errs[i] = -max_integral_action_val;
 8003ba6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003bb0:	443b      	add	r3, r7
 8003bb2:	3bd0      	subs	r3, #208	@ 0xd0
 8003bb4:	ed93 6b00 	vldr	d6, [r3]
 8003bb8:	ed97 7b8a 	vldr	d7, [r7, #552]	@ 0x228
 8003bbc:	eeb1 7b47 	vneg.f64	d7, d7
 8003bc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	d50c      	bpl.n	8003be4 <StartControlTask+0xf14>
 8003bca:	ed97 7b8a 	vldr	d7, [r7, #552]	@ 0x228
 8003bce:	eeb1 7b47 	vneg.f64	d7, d7
 8003bd2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003bdc:	443b      	add	r3, r7
 8003bde:	3bd0      	subs	r3, #208	@ 0xd0
 8003be0:	ed83 7b00 	vstr	d7, [r3]

		ctrl_out->PWM_vals[i] = uPID_K[i].Kp*err->u_errs[i] + uPID_K[i].Ki*sumKI_u_errs[i] + uPID_K[i].Kd * (err->u_errs[i] / ts->delta);
 8003be4:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003bf6:	4413      	add	r3, r2
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c00:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003c04:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003c08:	3303      	adds	r3, #3
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	ed93 7b00 	vldr	d7, [r3]
 8003c12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c16:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c28:	4413      	add	r3, r2
 8003c2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c2e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003c32:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8003c3c:	443b      	add	r3, r7
 8003c3e:	3bd0      	subs	r3, #208	@ 0xd0
 8003c40:	ed93 7b00 	vldr	d7, [r3]
 8003c44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c4c:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c5e:	4413      	add	r3, r2
 8003c60:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c64:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003c68:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003c6c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003c70:	3303      	adds	r3, #3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	ed93 3b00 	vldr	d3, [r3]
 8003c7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8003c88:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c94:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003c98:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003c9c:	3303      	adds	r3, #3
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	ed83 7b00 	vstr	d7, [r3]

//		if (abs(err->u_errs[i]) < u_err_trshld){
//			sumKI_u_errs[i] = 0; // Reset Integral part if error small
//		}

		if (ctrl_out->PWM_vals[i] < 0){
 8003ca6:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003caa:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003cae:	3303      	adds	r3, #3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	ed93 7b00 	vldr	d7, [r3]
 8003cb8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	d578      	bpl.n	8003db4 <StartControlTask+0x10e4>
			ctrl_out->M_dirs[i] = 1;
 8003cc2:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003cc6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003cca:	4413      	add	r3, r2
 8003ccc:	3340      	adds	r3, #64	@ 0x40
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
			if (ctrl_out->PWM_vals[i] < 0 && ctrl_out->PWM_vals[i] > - deadzone_duty_lim) ctrl_out->PWM_vals[i] = -deadzone_duty_lim;
 8003cd2:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003cd6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003cda:	3303      	adds	r3, #3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	ed93 7b00 	vldr	d7, [r3]
 8003ce4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d525      	bpl.n	8003d3a <StartControlTask+0x106a>
 8003cee:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003cf2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003cf6:	3303      	adds	r3, #3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	ed93 6b00 	vldr	d6, [r3]
 8003d00:	f9b7 325e 	ldrsh.w	r3, [r7, #606]	@ 0x25e
 8003d04:	425b      	negs	r3, r3
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	dd10      	ble.n	8003d3a <StartControlTask+0x106a>
 8003d18:	f9b7 325e 	ldrsh.w	r3, [r7, #606]	@ 0x25e
 8003d1c:	425b      	negs	r3, r3
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d26:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003d2a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003d2e:	3303      	adds	r3, #3
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	ed83 7b00 	vstr	d7, [r3]
 8003d38:	e024      	b.n	8003d84 <StartControlTask+0x10b4>
			else if (ctrl_out->PWM_vals[i] < -max_duty_cycle) ctrl_out->PWM_vals[i] = -max_duty_cycle;
 8003d3a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003d3e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003d42:	3303      	adds	r3, #3
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	ed93 6b00 	vldr	d6, [r3]
 8003d4c:	f9b7 325c 	ldrsh.w	r3, [r7, #604]	@ 0x25c
 8003d50:	425b      	negs	r3, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	d50f      	bpl.n	8003d84 <StartControlTask+0x10b4>
 8003d64:	f9b7 325c 	ldrsh.w	r3, [r7, #604]	@ 0x25c
 8003d68:	425b      	negs	r3, r3
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d72:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003d76:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003d7a:	3303      	adds	r3, #3
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->dutyCycles[i] = (uint16_t)(ctrl_out->PWM_vals[i]*-1);
 8003d84:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003d88:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003d8c:	3303      	adds	r3, #3
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	ed93 7b00 	vldr	d7, [r3]
 8003d96:	eeb1 7b47 	vneg.f64	d7, d7
 8003d9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003d9e:	ee17 3a90 	vmov	r3, s15
 8003da2:	b299      	uxth	r1, r3
 8003da4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003da8:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8003dac:	321c      	adds	r2, #28
 8003dae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003db2:	e07f      	b.n	8003eb4 <StartControlTask+0x11e4>
		}
		else if (ctrl_out->PWM_vals[i] >= 0){
 8003db4:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003db8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003dbc:	3303      	adds	r3, #3
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	ed93 7b00 	vldr	d7, [r3]
 8003dc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	db71      	blt.n	8003eb4 <StartControlTask+0x11e4>
			ctrl_out->M_dirs[i] = 0;
 8003dd0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003dd4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003dd8:	4413      	add	r3, r2
 8003dda:	3340      	adds	r3, #64	@ 0x40
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
			if (ctrl_out->PWM_vals[i] > 0 && ctrl_out->PWM_vals[i] < deadzone_duty_lim) ctrl_out->PWM_vals[i] = deadzone_duty_lim;
 8003de0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003de4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003de8:	3303      	adds	r3, #3
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	ed93 7b00 	vldr	d7, [r3]
 8003df2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	dd23      	ble.n	8003e44 <StartControlTask+0x1174>
 8003dfc:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003e00:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003e04:	3303      	adds	r3, #3
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	ed93 6b00 	vldr	d6, [r3]
 8003e0e:	f9b7 325e 	ldrsh.w	r3, [r7, #606]	@ 0x25e
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	d50f      	bpl.n	8003e44 <StartControlTask+0x1174>
 8003e24:	f9b7 325e 	ldrsh.w	r3, [r7, #606]	@ 0x25e
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e30:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003e34:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003e38:	3303      	adds	r3, #3
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	ed83 7b00 	vstr	d7, [r3]
 8003e42:	e022      	b.n	8003e8a <StartControlTask+0x11ba>
			else if (ctrl_out->PWM_vals[i] > max_duty_cycle) ctrl_out->PWM_vals[i] = max_duty_cycle;
 8003e44:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003e48:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	ed93 6b00 	vldr	d6, [r3]
 8003e56:	f9b7 325c 	ldrsh.w	r3, [r7, #604]	@ 0x25c
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	dd0e      	ble.n	8003e8a <StartControlTask+0x11ba>
 8003e6c:	f9b7 325c 	ldrsh.w	r3, [r7, #604]	@ 0x25c
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e78:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003e7c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003e80:	3303      	adds	r3, #3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->dutyCycles[i] = (uint16_t)(ctrl_out->PWM_vals[i]);
 8003e8a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8003e8e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003e92:	3303      	adds	r3, #3
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	ed93 7b00 	vldr	d7, [r3]
 8003e9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ea0:	ee17 3a90 	vmov	r3, s15
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003eaa:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8003eae:	321c      	adds	r2, #28
 8003eb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 4; i++) {
 8003eb4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8003ebe:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	f77f ae10 	ble.w	8003ae8 <StartControlTask+0xe18>
		}
	}

	setMotorDirection(GPIOD, 4, 5, ctrl_out->M_dirs[0]);
 8003ec8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	4877      	ldr	r0, [pc, #476]	@ (80040b4 <StartControlTask+0x13e4>)
 8003ed6:	f7fd f990 	bl	80011fa <setMotorDirection>
	setMotorDirection(GPIOD, 6, 7, ctrl_out->M_dirs[1]);
 8003eda:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	2106      	movs	r1, #6
 8003ee6:	4873      	ldr	r0, [pc, #460]	@ (80040b4 <StartControlTask+0x13e4>)
 8003ee8:	f7fd f987 	bl	80011fa <setMotorDirection>
	setMotorDirection(GPIOE, 2, 4, ctrl_out->M_dirs[2]);
 8003eec:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	486f      	ldr	r0, [pc, #444]	@ (80040b8 <StartControlTask+0x13e8>)
 8003efa:	f7fd f97e 	bl	80011fa <setMotorDirection>
	setMotorDirection(GPIOE, 3, 6, ctrl_out->M_dirs[3]);
 8003efe:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f06:	2206      	movs	r2, #6
 8003f08:	2103      	movs	r1, #3
 8003f0a:	486b      	ldr	r0, [pc, #428]	@ (80040b8 <StartControlTask+0x13e8>)
 8003f0c:	f7fd f975 	bl	80011fa <setMotorDirection>

	__HAL_TIM_SET_COMPARE(&htim5 , TIM_CHANNEL_1, ctrl_out->dutyCycles[0]);  // Set duty cycle
 8003f10:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003f14:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8003f16:	4b69      	ldr	r3, [pc, #420]	@ (80040bc <StartControlTask+0x13ec>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, ctrl_out->dutyCycles[1]);  // Set duty cycle
 8003f1c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003f20:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8003f22:	4b67      	ldr	r3, [pc, #412]	@ (80040c0 <StartControlTask+0x13f0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, ctrl_out->dutyCycles[2]);  // Set duty cycle
 8003f28:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003f2c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8003f2e:	4b65      	ldr	r3, [pc, #404]	@ (80040c4 <StartControlTask+0x13f4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ctrl_out->dutyCycles[3]);  // Set duty cycle
 8003f34:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8003f38:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003f3a:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <StartControlTask+0x13f8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	635a      	str	r2, [r3, #52]	@ 0x34


/*------------------------------------------------------------------------*/
/***************************** 7. ODOMETRY ********************************/

	globalSpeedsFromU(odom->phi, data.d, data.r, enc->omegaVals, odom->q_dot); // q_dot = {phi_dot, x_dot, y_dot}
 8003f40:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003f44:	ed93 7b02 	vldr	d7, [r3, #8]
 8003f48:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003f4c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f50:	ed93 6b06 	vldr	d6, [r3, #24]
 8003f54:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003f58:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f5c:	ed93 5b08 	vldr	d5, [r3, #32]
 8003f60:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003f64:	f103 0220 	add.w	r2, r3, #32
 8003f68:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	eeb0 2b45 	vmov.f64	d2, d5
 8003f76:	eeb0 1b46 	vmov.f64	d1, d6
 8003f7a:	eeb0 0b47 	vmov.f64	d0, d7
 8003f7e:	f7fd fa45 	bl	800140c <globalSpeedsFromU>
//	globalSpeedsFromU(odom->phi, data.d, data.r, ctrl_out->u, odom->q_dot); // q_dot = {phi_dot, x_dot, y_dot}
	dt = ts->delta / 1000.0f;  // Convert ms to seconds
 8003f82:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f90:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80040cc <StartControlTask+0x13fc>
 8003f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f9c:	ed87 7b98 	vstr	d7, [r7, #608]	@ 0x260

	odom->phi    += odom->q_dot[0] * dt;         // Integrated angular velocity
 8003fa0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fa4:	ed93 6b02 	vldr	d6, [r3, #8]
 8003fa8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fac:	ed93 5b06 	vldr	d5, [r3, #24]
 8003fb0:	ed97 7b98 	vldr	d7, [r7, #608]	@ 0x260
 8003fb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fbc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fc0:	ed83 7b02 	vstr	d7, [r3, #8]
	odom->x_pos  += odom->q_dot[1] * dt;         // Integrated x velocity (global)
 8003fc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fc8:	ed93 6b00 	vldr	d6, [r3]
 8003fcc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fd0:	ed93 5b08 	vldr	d5, [r3, #32]
 8003fd4:	ed97 7b98 	vldr	d7, [r7, #608]	@ 0x260
 8003fd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fdc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fe0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fe4:	ed83 7b00 	vstr	d7, [r3]
	odom->y_pos  += odom->q_dot[2] * dt;         // Integrated y velocity (global)
 8003fe8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003fec:	ed93 6b04 	vldr	d6, [r3, #16]
 8003ff0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003ff4:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 8003ff8:	ed97 7b98 	vldr	d7, [r7, #608]	@ 0x260
 8003ffc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004000:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004004:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004008:	ed83 7b04 	vstr	d7, [r3, #16]

	odom->phi = (odom->phi > PI) ? (odom->phi - 2 * PI) : (odom->phi < -PI) ? (odom->phi + 2 * PI) : odom->phi; // 0 <= phi < 2PI
 800400c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004010:	ed93 6b02 	vldr	d6, [r3, #8]
 8004014:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 8004018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800401c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	dd0c      	ble.n	8004040 <StartControlTask+0x1370>
 8004026:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800402a:	ed93 6b02 	vldr	d6, [r3, #8]
 800402e:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 8004032:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800403a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800403e:	e01f      	b.n	8004080 <StartControlTask+0x13b0>
 8004040:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004044:	ed93 6b02 	vldr	d6, [r3, #8]
 8004048:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 800404c:	eef1 7a67 	vneg.f32	s15, s15
 8004050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004054:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	d50c      	bpl.n	8004078 <StartControlTask+0x13a8>
 800405e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004062:	ed93 6b02 	vldr	d6, [r3, #8]
 8004066:	edd7 7aa4 	vldr	s15, [r7, #656]	@ 0x290
 800406a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800406e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004072:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004076:	e003      	b.n	8004080 <StartControlTask+0x13b0>
 8004078:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800407c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004080:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004084:	ed83 7b02 	vstr	d7, [r3, #8]

//
//	printf(" currentTime: %lu prevTime: %lu deltaTime: %lu 	dt: %0.9lf     ", currentTime, printf_prevTime, deltaTime, dt);
//

	queue_status = osMessageQueuePut(CtrlTsk_QueueHandle, &CtrlTsk_data, 0, 0);
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <StartControlTask+0x1400>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8004090:	2300      	movs	r3, #0
 8004092:	2200      	movs	r2, #0
 8004094:	f009 fed8 	bl	800de48 <osMessageQueuePut>
 8004098:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218

	if (queue_status != osOK) {
 800409c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f43e afff 	beq.w	80030a4 <StartControlTask+0x3d4>
	    printf("❌ Failed to enqueue message! Error code: %d\r\n", queue_status);
 80040a6:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 80040aa:	480a      	ldr	r0, [pc, #40]	@ (80040d4 <StartControlTask+0x1404>)
 80040ac:	f00d fc5e 	bl	801196c <iprintf>
    osDelay(10);
 80040b0:	f7fe bff8 	b.w	80030a4 <StartControlTask+0x3d4>
 80040b4:	58020c00 	.word	0x58020c00
 80040b8:	58021000 	.word	0x58021000
 80040bc:	2400044c 	.word	0x2400044c
 80040c0:	240004e4 	.word	0x240004e4
 80040c4:	2400057c 	.word	0x2400057c
 80040c8:	240005c8 	.word	0x240005c8
 80040cc:	447a0000 	.word	0x447a0000
 80040d0:	240006c0 	.word	0x240006c0
 80040d4:	08016f90 	.word	0x08016f90

080040d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040ea:	f000 fd73 	bl	8004bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40001000 	.word	0x40001000

080040fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004100:	b672      	cpsid	i
}
 8004102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <Error_Handler+0x8>

08004108 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004110:	1d39      	adds	r1, r7, #4
 8004112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004116:	2201      	movs	r2, #1
 8004118:	4803      	ldr	r0, [pc, #12]	@ (8004128 <__io_putchar+0x20>)
 800411a:	f006 ffa5 	bl	800b068 <HAL_UART_Transmit>
  return ch;
 800411e:	687b      	ldr	r3, [r7, #4]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	24000614 	.word	0x24000614

0800412c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8004136:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <__io_getchar+0x2c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800413e:	1df9      	adds	r1, r7, #7
 8004140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004144:	2201      	movs	r2, #1
 8004146:	4804      	ldr	r0, [pc, #16]	@ (8004158 <__io_getchar+0x2c>)
 8004148:	f007 f81c 	bl	800b184 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 800414c:	79fb      	ldrb	r3, [r7, #7]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	24000614 	.word	0x24000614

0800415c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <HAL_MspInit+0x38>)
 8004164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004168:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <HAL_MspInit+0x38>)
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <HAL_MspInit+0x38>)
 8004174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004180:	2200      	movs	r2, #0
 8004182:	210f      	movs	r1, #15
 8004184:	f06f 0001 	mvn.w	r0, #1
 8004188:	f000 fe2c 	bl	8004de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58024400 	.word	0x58024400

08004198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b0ba      	sub	sp, #232	@ 0xe8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	22c0      	movs	r2, #192	@ 0xc0
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f00d fe23 	bl	8011e04 <memset>
  if(hi2c->Instance==I2C1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a26      	ldr	r2, [pc, #152]	@ (800425c <HAL_I2C_MspInit+0xc4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d145      	bne.n	8004254 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041c8:	f04f 0208 	mov.w	r2, #8
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	4618      	mov	r0, r3
 80041e0:	f003 fc08 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80041ea:	f7ff ff87 	bl	80040fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 80041f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041fe:	4b18      	ldr	r3, [pc, #96]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 8004200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800420c:	23c0      	movs	r3, #192	@ 0xc0
 800420e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004212:	2312      	movs	r3, #18
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004224:	2304      	movs	r3, #4
 8004226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800422e:	4619      	mov	r1, r3
 8004230:	480c      	ldr	r0, [pc, #48]	@ (8004264 <HAL_I2C_MspInit+0xcc>)
 8004232:	f001 fb63 	bl	80058fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 8004238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800423c:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 800423e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_I2C_MspInit+0xc8>)
 8004248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800424c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004254:	bf00      	nop
 8004256:	37e8      	adds	r7, #232	@ 0xe8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40005400 	.word	0x40005400
 8004260:	58024400 	.word	0x58024400
 8004264:	58020400 	.word	0x58020400

08004268 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	@ 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a78      	ldr	r2, [pc, #480]	@ (8004468 <HAL_TIM_Encoder_MspInit+0x200>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12f      	bne.n	80042ea <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800428a:	4b78      	ldr	r3, [pc, #480]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800428c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004290:	4a76      	ldr	r2, [pc, #472]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800429a:	4b74      	ldr	r3, [pc, #464]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800429c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a8:	4b70      	ldr	r3, [pc, #448]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80042aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ae:	4a6f      	ldr	r2, [pc, #444]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80042b0:	f043 0310 	orr.w	r3, r3, #16
 80042b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042b8:	4b6c      	ldr	r3, [pc, #432]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80042ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042c6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80042ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042d8:	2301      	movs	r3, #1
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042e0:	4619      	mov	r1, r3
 80042e2:	4863      	ldr	r0, [pc, #396]	@ (8004470 <HAL_TIM_Encoder_MspInit+0x208>)
 80042e4:	f001 fb0a 	bl	80058fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042e8:	e0ba      	b.n	8004460 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d14d      	bne.n	8004390 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f4:	4b5d      	ldr	r3, [pc, #372]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80042f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042fa:	4a5c      	ldr	r2, [pc, #368]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	4b56      	ldr	r3, [pc, #344]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004318:	4a54      	ldr	r2, [pc, #336]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004322:	4b52      	ldr	r3, [pc, #328]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004330:	4b4e      	ldr	r3, [pc, #312]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004336:	4a4d      	ldr	r2, [pc, #308]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004340:	4b4a      	ldr	r3, [pc, #296]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800434e:	2320      	movs	r3, #32
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004352:	2302      	movs	r3, #2
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435a:	2300      	movs	r3, #0
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800435e:	2301      	movs	r3, #1
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004366:	4619      	mov	r1, r3
 8004368:	4842      	ldr	r0, [pc, #264]	@ (8004474 <HAL_TIM_Encoder_MspInit+0x20c>)
 800436a:	f001 fac7 	bl	80058fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800436e:	2308      	movs	r3, #8
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800437e:	2301      	movs	r3, #1
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004386:	4619      	mov	r1, r3
 8004388:	483b      	ldr	r0, [pc, #236]	@ (8004478 <HAL_TIM_Encoder_MspInit+0x210>)
 800438a:	f001 fab7 	bl	80058fc <HAL_GPIO_Init>
}
 800438e:	e067      	b.n	8004460 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a39      	ldr	r2, [pc, #228]	@ (800447c <HAL_TIM_Encoder_MspInit+0x214>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d12f      	bne.n	80043fa <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800439a:	4b34      	ldr	r3, [pc, #208]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800439c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043a0:	4a32      	ldr	r2, [pc, #200]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043aa:	4b30      	ldr	r3, [pc, #192]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80043ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b8:	4b2c      	ldr	r3, [pc, #176]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80043ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043be:	4a2b      	ldr	r2, [pc, #172]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043c8:	4b28      	ldr	r3, [pc, #160]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 80043ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80043d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043dc:	2302      	movs	r3, #2
 80043de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e4:	2300      	movs	r3, #0
 80043e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043e8:	2302      	movs	r3, #2
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043f0:	4619      	mov	r1, r3
 80043f2:	4823      	ldr	r0, [pc, #140]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x218>)
 80043f4:	f001 fa82 	bl	80058fc <HAL_GPIO_Init>
}
 80043f8:	e032      	b.n	8004460 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	@ (8004484 <HAL_TIM_Encoder_MspInit+0x21c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d12d      	bne.n	8004460 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004414:	4b15      	ldr	r3, [pc, #84]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004428:	4a10      	ldr	r2, [pc, #64]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004432:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_TIM_Encoder_MspInit+0x204>)
 8004434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004440:	23c0      	movs	r3, #192	@ 0xc0
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	2300      	movs	r3, #0
 800444e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004450:	2303      	movs	r3, #3
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004458:	4619      	mov	r1, r3
 800445a:	480b      	ldr	r0, [pc, #44]	@ (8004488 <HAL_TIM_Encoder_MspInit+0x220>)
 800445c:	f001 fa4e 	bl	80058fc <HAL_GPIO_Init>
}
 8004460:	bf00      	nop
 8004462:	3740      	adds	r7, #64	@ 0x40
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40010000 	.word	0x40010000
 800446c:	58024400 	.word	0x58024400
 8004470:	58021000 	.word	0x58021000
 8004474:	58020000 	.word	0x58020000
 8004478:	58020400 	.word	0x58020400
 800447c:	40000800 	.word	0x40000800
 8004480:	58020c00 	.word	0x58020c00
 8004484:	40010400 	.word	0x40010400
 8004488:	58020800 	.word	0x58020800

0800448c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a16      	ldr	r2, [pc, #88]	@ (80044f4 <HAL_TIM_PWM_MspInit+0x68>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10f      	bne.n	80044be <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800449e:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044a4:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044a6:	f043 0308 	orr.w	r3, r3, #8
 80044aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044ae:	4b12      	ldr	r3, [pc, #72]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80044bc:	e013      	b.n	80044e6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a0e      	ldr	r2, [pc, #56]	@ (80044fc <HAL_TIM_PWM_MspInit+0x70>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10e      	bne.n	80044e6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ce:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044d8:	4b07      	ldr	r3, [pc, #28]	@ (80044f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80044da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	58024400 	.word	0x58024400
 80044fc:	40014000 	.word	0x40014000

08004500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a20      	ldr	r2, [pc, #128]	@ (8004590 <HAL_TIM_Base_MspInit+0x90>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10f      	bne.n	8004532 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004512:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 8004514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004518:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 800451a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004522:	4b1c      	ldr	r3, [pc, #112]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 8004524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004530:	e028      	b.n	8004584 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM13)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a18      	ldr	r2, [pc, #96]	@ (8004598 <HAL_TIM_Base_MspInit+0x98>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10f      	bne.n	800455c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 800453e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004542:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 8004544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004548:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 800454e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
}
 800455a:	e013      	b.n	8004584 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0e      	ldr	r2, [pc, #56]	@ (800459c <HAL_TIM_Base_MspInit+0x9c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 8004568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800456c:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004572:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <HAL_TIM_Base_MspInit+0x94>)
 8004578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40001800 	.word	0x40001800
 8004594:	58024400 	.word	0x58024400
 8004598:	40001c00 	.word	0x40001c00
 800459c:	40002000 	.word	0x40002000

080045a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	@ 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 031c 	add.w	r3, r7, #28
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004738 <HAL_TIM_MspPostInit+0x198>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d11f      	bne.n	8004602 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b5e      	ldr	r3, [pc, #376]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80045c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045c8:	4a5c      	ldr	r2, [pc, #368]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045d2:	4b5a      	ldr	r3, [pc, #360]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80045d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045e0:	2301      	movs	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80045f0:	2302      	movs	r3, #2
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f4:	f107 031c 	add.w	r3, r7, #28
 80045f8:	4619      	mov	r1, r3
 80045fa:	4851      	ldr	r0, [pc, #324]	@ (8004740 <HAL_TIM_MspPostInit+0x1a0>)
 80045fc:	f001 f97e 	bl	80058fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004600:	e095      	b.n	800472e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a4f      	ldr	r2, [pc, #316]	@ (8004744 <HAL_TIM_MspPostInit+0x1a4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d120      	bne.n	800464e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460c:	4b4b      	ldr	r3, [pc, #300]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 800460e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004612:	4a4a      	ldr	r2, [pc, #296]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800461c:	4b47      	ldr	r3, [pc, #284]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 800461e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800462a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800462e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004630:	2302      	movs	r3, #2
 8004632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800463c:	2302      	movs	r3, #2
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	4619      	mov	r1, r3
 8004646:	4840      	ldr	r0, [pc, #256]	@ (8004748 <HAL_TIM_MspPostInit+0x1a8>)
 8004648:	f001 f958 	bl	80058fc <HAL_GPIO_Init>
}
 800464c:	e06f      	b.n	800472e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM13)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3e      	ldr	r2, [pc, #248]	@ (800474c <HAL_TIM_MspPostInit+0x1ac>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d120      	bne.n	800469a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004658:	4b38      	ldr	r3, [pc, #224]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 800465a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800465e:	4a37      	ldr	r2, [pc, #220]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004668:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 800466a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800467a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004688:	2309      	movs	r3, #9
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	4619      	mov	r1, r3
 8004692:	482f      	ldr	r0, [pc, #188]	@ (8004750 <HAL_TIM_MspPostInit+0x1b0>)
 8004694:	f001 f932 	bl	80058fc <HAL_GPIO_Init>
}
 8004698:	e049      	b.n	800472e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM14)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <HAL_TIM_MspPostInit+0x1b4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046a4:	4b25      	ldr	r3, [pc, #148]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80046a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046aa:	4a24      	ldr	r2, [pc, #144]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046b4:	4b21      	ldr	r3, [pc, #132]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80046b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80046d4:	2309      	movs	r3, #9
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046d8:	f107 031c 	add.w	r3, r7, #28
 80046dc:	4619      	mov	r1, r3
 80046de:	481c      	ldr	r0, [pc, #112]	@ (8004750 <HAL_TIM_MspPostInit+0x1b0>)
 80046e0:	f001 f90c 	bl	80058fc <HAL_GPIO_Init>
}
 80046e4:	e023      	b.n	800472e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <HAL_TIM_MspPostInit+0x1b8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d11e      	bne.n	800472e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046f0:	4b12      	ldr	r3, [pc, #72]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80046f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f6:	4a11      	ldr	r2, [pc, #68]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 80046f8:	f043 0310 	orr.w	r3, r3, #16
 80046fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004700:	4b0e      	ldr	r3, [pc, #56]	@ (800473c <HAL_TIM_MspPostInit+0x19c>)
 8004702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800470e:	2320      	movs	r3, #32
 8004710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800471e:	2304      	movs	r3, #4
 8004720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	4619      	mov	r1, r3
 8004728:	480c      	ldr	r0, [pc, #48]	@ (800475c <HAL_TIM_MspPostInit+0x1bc>)
 800472a:	f001 f8e7 	bl	80058fc <HAL_GPIO_Init>
}
 800472e:	bf00      	nop
 8004730:	3730      	adds	r7, #48	@ 0x30
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40000c00 	.word	0x40000c00
 800473c:	58024400 	.word	0x58024400
 8004740:	58020000 	.word	0x58020000
 8004744:	40001800 	.word	0x40001800
 8004748:	58020400 	.word	0x58020400
 800474c:	40001c00 	.word	0x40001c00
 8004750:	58021400 	.word	0x58021400
 8004754:	40002000 	.word	0x40002000
 8004758:	40014000 	.word	0x40014000
 800475c:	58021000 	.word	0x58021000

08004760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0ba      	sub	sp, #232	@ 0xe8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004768:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	22c0      	movs	r2, #192	@ 0xc0
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f00d fb3f 	bl	8011e04 <memset>
  if(huart->Instance==USART3)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <HAL_UART_MspInit+0xd8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d14e      	bne.n	800482e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004790:	f04f 0202 	mov.w	r2, #2
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 f924 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80047b2:	f7ff fca3 	bl	80040fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80047b6:	4b21      	ldr	r3, [pc, #132]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047bc:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047c6:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d4:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047da:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047e4:	4b15      	ldr	r3, [pc, #84]	@ (800483c <HAL_UART_MspInit+0xdc>)
 80047e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80047f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fa:	2302      	movs	r3, #2
 80047fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800480c:	2307      	movs	r3, #7
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004812:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004816:	4619      	mov	r1, r3
 8004818:	4809      	ldr	r0, [pc, #36]	@ (8004840 <HAL_UART_MspInit+0xe0>)
 800481a:	f001 f86f 	bl	80058fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2105      	movs	r1, #5
 8004822:	2027      	movs	r0, #39	@ 0x27
 8004824:	f000 fade 	bl	8004de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004828:	2027      	movs	r0, #39	@ 0x27
 800482a:	f000 faf5 	bl	8004e18 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800482e:	bf00      	nop
 8004830:	37e8      	adds	r7, #232	@ 0xe8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40004800 	.word	0x40004800
 800483c:	58024400 	.word	0x58024400
 8004840:	58020c00 	.word	0x58020c00

08004844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b090      	sub	sp, #64	@ 0x40
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	d827      	bhi.n	80048a2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004852:	2200      	movs	r2, #0
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	2036      	movs	r0, #54	@ 0x36
 8004858:	f000 fac4 	bl	8004de4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800485c:	2036      	movs	r0, #54	@ 0x36
 800485e:	f000 fadb 	bl	8004e18 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004862:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <HAL_InitTick+0xc4>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_InitTick+0xc8>)
 800486a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800486e:	4a27      	ldr	r2, [pc, #156]	@ (800490c <HAL_InitTick+0xc8>)
 8004870:	f043 0310 	orr.w	r3, r3, #16
 8004874:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004878:	4b24      	ldr	r3, [pc, #144]	@ (800490c <HAL_InitTick+0xc8>)
 800487a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004886:	f107 0210 	add.w	r2, r7, #16
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f003 f86d 	bl	8007970 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_InitTick+0x6a>
 80048a0:	e001      	b.n	80048a6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e02b      	b.n	80048fe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048a6:	f003 f837 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 80048aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80048ac:	e004      	b.n	80048b8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048ae:	f003 f833 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 80048b2:	4603      	mov	r3, r0
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ba:	4a15      	ldr	r2, [pc, #84]	@ (8004910 <HAL_InitTick+0xcc>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	0c9b      	lsrs	r3, r3, #18
 80048c2:	3b01      	subs	r3, #1
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80048c6:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <HAL_InitTick+0xd0>)
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <HAL_InitTick+0xd4>)
 80048ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80048cc:	4b11      	ldr	r3, [pc, #68]	@ (8004914 <HAL_InitTick+0xd0>)
 80048ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80048d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80048d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004914 <HAL_InitTick+0xd0>)
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80048da:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <HAL_InitTick+0xd0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <HAL_InitTick+0xd0>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80048e6:	480b      	ldr	r0, [pc, #44]	@ (8004914 <HAL_InitTick+0xd0>)
 80048e8:	f004 feb0 	bl	800964c <HAL_TIM_Base_Init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80048f2:	4808      	ldr	r0, [pc, #32]	@ (8004914 <HAL_InitTick+0xd0>)
 80048f4:	f004 ff02 	bl	80096fc <HAL_TIM_Base_Start_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	e000      	b.n	80048fe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3740      	adds	r7, #64	@ 0x40
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	24000014 	.word	0x24000014
 800490c:	58024400 	.word	0x58024400
 8004910:	431bde83 	.word	0x431bde83
 8004914:	240006d0 	.word	0x240006d0
 8004918:	40001000 	.word	0x40001000

0800491c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <NMI_Handler+0x4>

08004924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <HardFault_Handler+0x4>

0800492c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <MemManage_Handler+0x4>

08004934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <BusFault_Handler+0x4>

0800493c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <UsageFault_Handler+0x4>

08004944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004958:	4802      	ldr	r0, [pc, #8]	@ (8004964 <USART3_IRQHandler+0x10>)
 800495a:	f006 fd27 	bl	800b3ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	24000614 	.word	0x24000614

08004968 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800496c:	4802      	ldr	r0, [pc, #8]	@ (8004978 <TIM6_DAC_IRQHandler+0x10>)
 800496e:	f005 fa85 	bl	8009e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	240006d0 	.word	0x240006d0

0800497c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return 1;
 8004980:	2301      	movs	r3, #1
}
 8004982:	4618      	mov	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_kill>:

int _kill(int pid, int sig)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004996:	f00d fae5 	bl	8011f64 <__errno>
 800499a:	4603      	mov	r3, r0
 800499c:	2216      	movs	r2, #22
 800499e:	601a      	str	r2, [r3, #0]
  return -1;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_exit>:

void _exit (int status)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ffe7 	bl	800498c <_kill>
  while (1) {}    /* Make sure we hang here */
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <_exit+0x12>

080049c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e00a      	b.n	80049ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049d4:	f7ff fbaa 	bl	800412c <__io_getchar>
 80049d8:	4601      	mov	r1, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	60ba      	str	r2, [r7, #8]
 80049e0:	b2ca      	uxtb	r2, r1
 80049e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3301      	adds	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	dbf0      	blt.n	80049d4 <_read+0x12>
  }

  return len;
 80049f2:	687b      	ldr	r3, [r7, #4]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e009      	b.n	8004a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	60ba      	str	r2, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fb76 	bl	8004108 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	dbf1      	blt.n	8004a0e <_write+0x12>
  }
  return len;
 8004a2a:	687b      	ldr	r3, [r7, #4]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_close>:

int _close(int file)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <_isatty>:

int _isatty(int file)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <_sbrk+0x5c>)
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <_sbrk+0x60>)
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ab0:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <_sbrk+0x64>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <_sbrk+0x64>)
 8004aba:	4a12      	ldr	r2, [pc, #72]	@ (8004b04 <_sbrk+0x68>)
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004abe:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <_sbrk+0x64>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d207      	bcs.n	8004adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004acc:	f00d fa4a 	bl	8011f64 <__errno>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	220c      	movs	r2, #12
 8004ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ada:	e009      	b.n	8004af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004adc:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <_sbrk+0x64>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ae2:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <_sbrk+0x64>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	4a05      	ldr	r2, [pc, #20]	@ (8004b00 <_sbrk+0x64>)
 8004aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	24080000 	.word	0x24080000
 8004afc:	00000400 	.word	0x00000400
 8004b00:	2400071c 	.word	0x2400071c
 8004b04:	24005258 	.word	0x24005258

08004b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b0c:	f7fb ffca 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b10:	480c      	ldr	r0, [pc, #48]	@ (8004b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b12:	490d      	ldr	r1, [pc, #52]	@ (8004b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b14:	4a0d      	ldr	r2, [pc, #52]	@ (8004b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b18:	e002      	b.n	8004b20 <LoopCopyDataInit>

08004b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b1e:	3304      	adds	r3, #4

08004b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b24:	d3f9      	bcc.n	8004b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b26:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b28:	4c0a      	ldr	r4, [pc, #40]	@ (8004b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b2c:	e001      	b.n	8004b32 <LoopFillZerobss>

08004b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b30:	3204      	adds	r2, #4

08004b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b34:	d3fb      	bcc.n	8004b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b36:	f00d fa1b 	bl	8011f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b3a:	f7fc fcff 	bl	800153c <main>
  bx  lr
 8004b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004b48:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8004b4c:	08017798 	.word	0x08017798
  ldr r2, =_sbss
 8004b50:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8004b54:	24005258 	.word	0x24005258

08004b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b58:	e7fe      	b.n	8004b58 <ADC3_IRQHandler>
	...

08004b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b62:	2003      	movs	r0, #3
 8004b64:	f000 f933 	bl	8004dce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b68:	f002 fd2c 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b15      	ldr	r3, [pc, #84]	@ (8004bc4 <HAL_Init+0x68>)
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	4913      	ldr	r1, [pc, #76]	@ (8004bc8 <HAL_Init+0x6c>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <HAL_Init+0x68>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <HAL_Init+0x6c>)
 8004b90:	5cd3      	ldrb	r3, [r2, r3]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8004bcc <HAL_Init+0x70>)
 8004b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd0 <HAL_Init+0x74>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ba6:	200f      	movs	r0, #15
 8004ba8:	f7ff fe4c 	bl	8004844 <HAL_InitTick>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e002      	b.n	8004bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004bb6:	f7ff fad1 	bl	800415c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	0801701c 	.word	0x0801701c
 8004bcc:	24000004 	.word	0x24000004
 8004bd0:	24000000 	.word	0x24000000

08004bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_IncTick+0x20>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_IncTick+0x24>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	4a04      	ldr	r2, [pc, #16]	@ (8004bf8 <HAL_IncTick+0x24>)
 8004be6:	6013      	str	r3, [r2, #0]
}
 8004be8:	bf00      	nop
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	24000018 	.word	0x24000018
 8004bf8:	24000720 	.word	0x24000720

08004bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <HAL_GetTick+0x14>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	24000720 	.word	0x24000720

08004c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7ff ffee 	bl	8004bfc <HAL_GetTick>
 8004c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c2c:	d005      	beq.n	8004c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <HAL_Delay+0x44>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c3a:	bf00      	nop
 8004c3c:	f7ff ffde 	bl	8004bfc <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d8f7      	bhi.n	8004c3c <HAL_Delay+0x28>
  {
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	24000018 	.word	0x24000018

08004c5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004c60:	4b03      	ldr	r3, [pc, #12]	@ (8004c70 <HAL_GetREVID+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0c1b      	lsrs	r3, r3, #16
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	5c001000 	.word	0x5c001000

08004c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c84:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c90:	4013      	ands	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c9c:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ca2:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	60d3      	str	r3, [r2, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000ed00 	.word	0xe000ed00
 8004cb8:	05fa0000 	.word	0x05fa0000

08004cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f003 0307 	and.w	r3, r3, #7
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	db0b      	blt.n	8004d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4907      	ldr	r1, [pc, #28]	@ (8004d10 <__NVIC_EnableIRQ+0x38>)
 8004cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e100 	.word	0xe000e100

08004d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db0a      	blt.n	8004d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	490c      	ldr	r1, [pc, #48]	@ (8004d60 <__NVIC_SetPriority+0x4c>)
 8004d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d32:	0112      	lsls	r2, r2, #4
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	440b      	add	r3, r1
 8004d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d3c:	e00a      	b.n	8004d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4908      	ldr	r1, [pc, #32]	@ (8004d64 <__NVIC_SetPriority+0x50>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	440b      	add	r3, r1
 8004d52:	761a      	strb	r2, [r3, #24]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000e100 	.word	0xe000e100
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f1c3 0307 	rsb	r3, r3, #7
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	bf28      	it	cs
 8004d86:	2304      	movcs	r3, #4
 8004d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d902      	bls.n	8004d98 <NVIC_EncodePriority+0x30>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3b03      	subs	r3, #3
 8004d96:	e000      	b.n	8004d9a <NVIC_EncodePriority+0x32>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	401a      	ands	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	43d9      	mvns	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	4313      	orrs	r3, r2
         );
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	@ 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff4c 	bl	8004c74 <__NVIC_SetPriorityGrouping>
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004df2:	f7ff ff63 	bl	8004cbc <__NVIC_GetPriorityGrouping>
 8004df6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f7ff ffb3 	bl	8004d68 <NVIC_EncodePriority>
 8004e02:	4602      	mov	r2, r0
 8004e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff82 	bl	8004d14 <__NVIC_SetPriority>
}
 8004e10:	bf00      	nop
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ff56 	bl	8004cd8 <__NVIC_EnableIRQ>
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e3c:	f7ff fede 	bl	8004bfc <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e2dc      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d008      	beq.n	8004e6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	@ 0x80
 8004e5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e2cd      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a76      	ldr	r2, [pc, #472]	@ (8005048 <HAL_DMA_Abort+0x214>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a74      	ldr	r2, [pc, #464]	@ (800504c <HAL_DMA_Abort+0x218>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a73      	ldr	r2, [pc, #460]	@ (8005050 <HAL_DMA_Abort+0x21c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a71      	ldr	r2, [pc, #452]	@ (8005054 <HAL_DMA_Abort+0x220>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a70      	ldr	r2, [pc, #448]	@ (8005058 <HAL_DMA_Abort+0x224>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800505c <HAL_DMA_Abort+0x228>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8005060 <HAL_DMA_Abort+0x22c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005064 <HAL_DMA_Abort+0x230>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8005068 <HAL_DMA_Abort+0x234>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	@ (800506c <HAL_DMA_Abort+0x238>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a67      	ldr	r2, [pc, #412]	@ (8005070 <HAL_DMA_Abort+0x23c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a65      	ldr	r2, [pc, #404]	@ (8005074 <HAL_DMA_Abort+0x240>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a64      	ldr	r2, [pc, #400]	@ (8005078 <HAL_DMA_Abort+0x244>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a62      	ldr	r2, [pc, #392]	@ (800507c <HAL_DMA_Abort+0x248>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a61      	ldr	r2, [pc, #388]	@ (8005080 <HAL_DMA_Abort+0x24c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5f      	ldr	r2, [pc, #380]	@ (8005084 <HAL_DMA_Abort+0x250>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_Abort+0xda>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_DMA_Abort+0xdc>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 021e 	bic.w	r2, r2, #30
 8004f22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e00a      	b.n	8004f52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 020e 	bic.w	r2, r2, #14
 8004f4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3c      	ldr	r2, [pc, #240]	@ (8005048 <HAL_DMA_Abort+0x214>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d072      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3a      	ldr	r2, [pc, #232]	@ (800504c <HAL_DMA_Abort+0x218>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d06d      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a39      	ldr	r2, [pc, #228]	@ (8005050 <HAL_DMA_Abort+0x21c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d068      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a37      	ldr	r2, [pc, #220]	@ (8005054 <HAL_DMA_Abort+0x220>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d063      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a36      	ldr	r2, [pc, #216]	@ (8005058 <HAL_DMA_Abort+0x224>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d05e      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_DMA_Abort+0x228>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d059      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a33      	ldr	r2, [pc, #204]	@ (8005060 <HAL_DMA_Abort+0x22c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d054      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a31      	ldr	r2, [pc, #196]	@ (8005064 <HAL_DMA_Abort+0x230>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04f      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a30      	ldr	r2, [pc, #192]	@ (8005068 <HAL_DMA_Abort+0x234>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <HAL_DMA_Abort+0x238>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <HAL_DMA_Abort+0x23c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005074 <HAL_DMA_Abort+0x240>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2a      	ldr	r2, [pc, #168]	@ (8005078 <HAL_DMA_Abort+0x244>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	@ (800507c <HAL_DMA_Abort+0x248>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a27      	ldr	r2, [pc, #156]	@ (8005080 <HAL_DMA_Abort+0x24c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a25      	ldr	r2, [pc, #148]	@ (8005084 <HAL_DMA_Abort+0x250>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a24      	ldr	r2, [pc, #144]	@ (8005088 <HAL_DMA_Abort+0x254>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a22      	ldr	r2, [pc, #136]	@ (800508c <HAL_DMA_Abort+0x258>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <HAL_DMA_Abort+0x25c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <HAL_DMA_Abort+0x260>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <HAL_DMA_Abort+0x264>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <HAL_DMA_Abort+0x268>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	@ (80050a0 <HAL_DMA_Abort+0x26c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <HAL_DMA_Abort+0x270>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d132      	bne.n	80050a8 <HAL_DMA_Abort+0x274>
 8005042:	2301      	movs	r3, #1
 8005044:	e031      	b.n	80050aa <HAL_DMA_Abort+0x276>
 8005046:	bf00      	nop
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005278 <HAL_DMA_Abort+0x444>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_DMA_Abort+0x448>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_DMA_Abort+0x44c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <HAL_DMA_Abort+0x450>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <HAL_DMA_Abort+0x454>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_DMA_Abort+0x458>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a64      	ldr	r2, [pc, #400]	@ (8005290 <HAL_DMA_Abort+0x45c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_DMA_Abort+0x460>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a61      	ldr	r2, [pc, #388]	@ (8005298 <HAL_DMA_Abort+0x464>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5f      	ldr	r2, [pc, #380]	@ (800529c <HAL_DMA_Abort+0x468>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5e      	ldr	r2, [pc, #376]	@ (80052a0 <HAL_DMA_Abort+0x46c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5c      	ldr	r2, [pc, #368]	@ (80052a4 <HAL_DMA_Abort+0x470>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5b      	ldr	r2, [pc, #364]	@ (80052a8 <HAL_DMA_Abort+0x474>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a59      	ldr	r2, [pc, #356]	@ (80052ac <HAL_DMA_Abort+0x478>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_DMA_Abort+0x47c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a56      	ldr	r2, [pc, #344]	@ (80052b4 <HAL_DMA_Abort+0x480>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_DMA_Abort+0x33c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e007      	b.n	8005180 <HAL_DMA_Abort+0x34c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005180:	e013      	b.n	80051aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005182:	f7ff fd3b 	bl	8004bfc <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b05      	cmp	r3, #5
 800518e:	d90c      	bls.n	80051aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2203      	movs	r2, #3
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e12d      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005278 <HAL_DMA_Abort+0x444>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	@ (800527c <HAL_DMA_Abort+0x448>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005280 <HAL_DMA_Abort+0x44c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <HAL_DMA_Abort+0x450>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <HAL_DMA_Abort+0x454>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a27      	ldr	r2, [pc, #156]	@ (800528c <HAL_DMA_Abort+0x458>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a26      	ldr	r2, [pc, #152]	@ (8005290 <HAL_DMA_Abort+0x45c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a24      	ldr	r2, [pc, #144]	@ (8005294 <HAL_DMA_Abort+0x460>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a23      	ldr	r2, [pc, #140]	@ (8005298 <HAL_DMA_Abort+0x464>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_DMA_Abort+0x468>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a20      	ldr	r2, [pc, #128]	@ (80052a0 <HAL_DMA_Abort+0x46c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <HAL_DMA_Abort+0x470>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <HAL_DMA_Abort+0x474>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <HAL_DMA_Abort+0x478>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <HAL_DMA_Abort+0x47c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <HAL_DMA_Abort+0x480>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_DMA_Abort+0x426>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_DMA_Abort+0x428>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02b      	beq.n	80052b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	223f      	movs	r2, #63	@ 0x3f
 8005270:	409a      	lsls	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	e02a      	b.n	80052ce <HAL_DMA_Abort+0x49a>
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2201      	movs	r2, #1
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4f      	ldr	r2, [pc, #316]	@ (8005410 <HAL_DMA_Abort+0x5dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d072      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005414 <HAL_DMA_Abort+0x5e0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d06d      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005418 <HAL_DMA_Abort+0x5e4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d068      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a4a      	ldr	r2, [pc, #296]	@ (800541c <HAL_DMA_Abort+0x5e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d063      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a49      	ldr	r2, [pc, #292]	@ (8005420 <HAL_DMA_Abort+0x5ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d05e      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a47      	ldr	r2, [pc, #284]	@ (8005424 <HAL_DMA_Abort+0x5f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d059      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a46      	ldr	r2, [pc, #280]	@ (8005428 <HAL_DMA_Abort+0x5f4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d054      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a44      	ldr	r2, [pc, #272]	@ (800542c <HAL_DMA_Abort+0x5f8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d04f      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <HAL_DMA_Abort+0x5fc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a41      	ldr	r2, [pc, #260]	@ (8005434 <HAL_DMA_Abort+0x600>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a40      	ldr	r2, [pc, #256]	@ (8005438 <HAL_DMA_Abort+0x604>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3e      	ldr	r2, [pc, #248]	@ (800543c <HAL_DMA_Abort+0x608>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3d      	ldr	r2, [pc, #244]	@ (8005440 <HAL_DMA_Abort+0x60c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3b      	ldr	r2, [pc, #236]	@ (8005444 <HAL_DMA_Abort+0x610>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3a      	ldr	r2, [pc, #232]	@ (8005448 <HAL_DMA_Abort+0x614>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a38      	ldr	r2, [pc, #224]	@ (800544c <HAL_DMA_Abort+0x618>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a37      	ldr	r2, [pc, #220]	@ (8005450 <HAL_DMA_Abort+0x61c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <HAL_DMA_Abort+0x620>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a34      	ldr	r2, [pc, #208]	@ (8005458 <HAL_DMA_Abort+0x624>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a32      	ldr	r2, [pc, #200]	@ (800545c <HAL_DMA_Abort+0x628>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <HAL_DMA_Abort+0x62c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <HAL_DMA_Abort+0x630>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <HAL_DMA_Abort+0x634>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	@ (800546c <HAL_DMA_Abort+0x638>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <HAL_DMA_Abort+0x58e>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <HAL_DMA_Abort+0x590>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8
 8005450:	58025408 	.word	0x58025408
 8005454:	5802541c 	.word	0x5802541c
 8005458:	58025430 	.word	0x58025430
 800545c:	58025444 	.word	0x58025444
 8005460:	58025458 	.word	0x58025458
 8005464:	5802546c 	.word	0x5802546c
 8005468:	58025480 	.word	0x58025480
 800546c:	58025494 	.word	0x58025494

08005470 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e237      	b.n	80058f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d004      	beq.n	8005498 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2280      	movs	r2, #128	@ 0x80
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e22c      	b.n	80058f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5c      	ldr	r2, [pc, #368]	@ (8005610 <HAL_DMA_Abort_IT+0x1a0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005614 <HAL_DMA_Abort_IT+0x1a4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d045      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a59      	ldr	r2, [pc, #356]	@ (8005618 <HAL_DMA_Abort_IT+0x1a8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d040      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a58      	ldr	r2, [pc, #352]	@ (800561c <HAL_DMA_Abort_IT+0x1ac>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d03b      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a56      	ldr	r2, [pc, #344]	@ (8005620 <HAL_DMA_Abort_IT+0x1b0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d036      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a55      	ldr	r2, [pc, #340]	@ (8005624 <HAL_DMA_Abort_IT+0x1b4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d031      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a53      	ldr	r2, [pc, #332]	@ (8005628 <HAL_DMA_Abort_IT+0x1b8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02c      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a52      	ldr	r2, [pc, #328]	@ (800562c <HAL_DMA_Abort_IT+0x1bc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d027      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a50      	ldr	r2, [pc, #320]	@ (8005630 <HAL_DMA_Abort_IT+0x1c0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005634 <HAL_DMA_Abort_IT+0x1c4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01d      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a4d      	ldr	r2, [pc, #308]	@ (8005638 <HAL_DMA_Abort_IT+0x1c8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4c      	ldr	r2, [pc, #304]	@ (800563c <HAL_DMA_Abort_IT+0x1cc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a4a      	ldr	r2, [pc, #296]	@ (8005640 <HAL_DMA_Abort_IT+0x1d0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a49      	ldr	r2, [pc, #292]	@ (8005644 <HAL_DMA_Abort_IT+0x1d4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a47      	ldr	r2, [pc, #284]	@ (8005648 <HAL_DMA_Abort_IT+0x1d8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_DMA_Abort_IT+0xc8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a46      	ldr	r2, [pc, #280]	@ (800564c <HAL_DMA_Abort_IT+0x1dc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_DMA_Abort_IT+0xcc>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_DMA_Abort_IT+0xce>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8086 	beq.w	8005650 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2f      	ldr	r2, [pc, #188]	@ (8005610 <HAL_DMA_Abort_IT+0x1a0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2e      	ldr	r2, [pc, #184]	@ (8005614 <HAL_DMA_Abort_IT+0x1a4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2c      	ldr	r2, [pc, #176]	@ (8005618 <HAL_DMA_Abort_IT+0x1a8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2b      	ldr	r2, [pc, #172]	@ (800561c <HAL_DMA_Abort_IT+0x1ac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a29      	ldr	r2, [pc, #164]	@ (8005620 <HAL_DMA_Abort_IT+0x1b0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a28      	ldr	r2, [pc, #160]	@ (8005624 <HAL_DMA_Abort_IT+0x1b4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a26      	ldr	r2, [pc, #152]	@ (8005628 <HAL_DMA_Abort_IT+0x1b8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a25      	ldr	r2, [pc, #148]	@ (800562c <HAL_DMA_Abort_IT+0x1bc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a23      	ldr	r2, [pc, #140]	@ (8005630 <HAL_DMA_Abort_IT+0x1c0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a22      	ldr	r2, [pc, #136]	@ (8005634 <HAL_DMA_Abort_IT+0x1c4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a20      	ldr	r2, [pc, #128]	@ (8005638 <HAL_DMA_Abort_IT+0x1c8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1f      	ldr	r2, [pc, #124]	@ (800563c <HAL_DMA_Abort_IT+0x1cc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <HAL_DMA_Abort_IT+0x1d0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <HAL_DMA_Abort_IT+0x1d4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005648 <HAL_DMA_Abort_IT+0x1d8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_Abort_IT+0x17c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a19      	ldr	r2, [pc, #100]	@ (800564c <HAL_DMA_Abort_IT+0x1dc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <HAL_DMA_Abort_IT+0x18e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e178      	b.n	80058f0 <HAL_DMA_Abort_IT+0x480>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e16f      	b.n	80058f0 <HAL_DMA_Abort_IT+0x480>
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 020e 	bic.w	r2, r2, #14
 800565e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a6c      	ldr	r2, [pc, #432]	@ (8005818 <HAL_DMA_Abort_IT+0x3a8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d04a      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6b      	ldr	r2, [pc, #428]	@ (800581c <HAL_DMA_Abort_IT+0x3ac>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d045      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a69      	ldr	r2, [pc, #420]	@ (8005820 <HAL_DMA_Abort_IT+0x3b0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d040      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a68      	ldr	r2, [pc, #416]	@ (8005824 <HAL_DMA_Abort_IT+0x3b4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d03b      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a66      	ldr	r2, [pc, #408]	@ (8005828 <HAL_DMA_Abort_IT+0x3b8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d036      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a65      	ldr	r2, [pc, #404]	@ (800582c <HAL_DMA_Abort_IT+0x3bc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d031      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a63      	ldr	r2, [pc, #396]	@ (8005830 <HAL_DMA_Abort_IT+0x3c0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02c      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a62      	ldr	r2, [pc, #392]	@ (8005834 <HAL_DMA_Abort_IT+0x3c4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d027      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a60      	ldr	r2, [pc, #384]	@ (8005838 <HAL_DMA_Abort_IT+0x3c8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d022      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a5f      	ldr	r2, [pc, #380]	@ (800583c <HAL_DMA_Abort_IT+0x3cc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d01d      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005840 <HAL_DMA_Abort_IT+0x3d0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005844 <HAL_DMA_Abort_IT+0x3d4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005848 <HAL_DMA_Abort_IT+0x3d8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a59      	ldr	r2, [pc, #356]	@ (800584c <HAL_DMA_Abort_IT+0x3dc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a57      	ldr	r2, [pc, #348]	@ (8005850 <HAL_DMA_Abort_IT+0x3e0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_DMA_Abort_IT+0x290>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a56      	ldr	r2, [pc, #344]	@ (8005854 <HAL_DMA_Abort_IT+0x3e4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <HAL_DMA_Abort_IT+0x2a2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e007      	b.n	8005722 <HAL_DMA_Abort_IT+0x2b2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3c      	ldr	r2, [pc, #240]	@ (8005818 <HAL_DMA_Abort_IT+0x3a8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d072      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a3a      	ldr	r2, [pc, #232]	@ (800581c <HAL_DMA_Abort_IT+0x3ac>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d06d      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a39      	ldr	r2, [pc, #228]	@ (8005820 <HAL_DMA_Abort_IT+0x3b0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d068      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a37      	ldr	r2, [pc, #220]	@ (8005824 <HAL_DMA_Abort_IT+0x3b4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d063      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a36      	ldr	r2, [pc, #216]	@ (8005828 <HAL_DMA_Abort_IT+0x3b8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d05e      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a34      	ldr	r2, [pc, #208]	@ (800582c <HAL_DMA_Abort_IT+0x3bc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d059      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a33      	ldr	r2, [pc, #204]	@ (8005830 <HAL_DMA_Abort_IT+0x3c0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d054      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a31      	ldr	r2, [pc, #196]	@ (8005834 <HAL_DMA_Abort_IT+0x3c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d04f      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a30      	ldr	r2, [pc, #192]	@ (8005838 <HAL_DMA_Abort_IT+0x3c8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d04a      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2e      	ldr	r2, [pc, #184]	@ (800583c <HAL_DMA_Abort_IT+0x3cc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d045      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2d      	ldr	r2, [pc, #180]	@ (8005840 <HAL_DMA_Abort_IT+0x3d0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d040      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2b      	ldr	r2, [pc, #172]	@ (8005844 <HAL_DMA_Abort_IT+0x3d4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d03b      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2a      	ldr	r2, [pc, #168]	@ (8005848 <HAL_DMA_Abort_IT+0x3d8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d036      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a28      	ldr	r2, [pc, #160]	@ (800584c <HAL_DMA_Abort_IT+0x3dc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d031      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a27      	ldr	r2, [pc, #156]	@ (8005850 <HAL_DMA_Abort_IT+0x3e0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d02c      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <HAL_DMA_Abort_IT+0x3e4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d027      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a24      	ldr	r2, [pc, #144]	@ (8005858 <HAL_DMA_Abort_IT+0x3e8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d022      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a22      	ldr	r2, [pc, #136]	@ (800585c <HAL_DMA_Abort_IT+0x3ec>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01d      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a21      	ldr	r2, [pc, #132]	@ (8005860 <HAL_DMA_Abort_IT+0x3f0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <HAL_DMA_Abort_IT+0x3f4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <HAL_DMA_Abort_IT+0x3f8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <HAL_DMA_Abort_IT+0x3fc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <HAL_DMA_Abort_IT+0x400>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_DMA_Abort_IT+0x3a2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_DMA_Abort_IT+0x404>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d132      	bne.n	8005878 <HAL_DMA_Abort_IT+0x408>
 8005812:	2301      	movs	r3, #1
 8005814:	e031      	b.n	800587a <HAL_DMA_Abort_IT+0x40a>
 8005816:	bf00      	nop
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
 8005858:	58025408 	.word	0x58025408
 800585c:	5802541c 	.word	0x5802541c
 8005860:	58025430 	.word	0x58025430
 8005864:	58025444 	.word	0x58025444
 8005868:	58025458 	.word	0x58025458
 800586c:	5802546c 	.word	0x5802546c
 8005870:	58025480 	.word	0x58025480
 8005874:	58025494 	.word	0x58025494
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d028      	beq.n	80058d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800588c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2201      	movs	r2, #1
 800589e:	409a      	lsls	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	@ 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800590a:	4b89      	ldr	r3, [pc, #548]	@ (8005b30 <HAL_GPIO_Init+0x234>)
 800590c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800590e:	e194      	b.n	8005c3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8186 	beq.w	8005c34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d005      	beq.n	8005940 <HAL_GPIO_Init+0x44>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d130      	bne.n	80059a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	2203      	movs	r2, #3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005976:	2201      	movs	r2, #1
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 0201 	and.w	r2, r3, #1
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d017      	beq.n	80059de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d123      	bne.n	8005a32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	08da      	lsrs	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3208      	adds	r2, #8
 80059f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	08da      	lsrs	r2, r3, #3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3208      	adds	r2, #8
 8005a2c:	69b9      	ldr	r1, [r7, #24]
 8005a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0203 	and.w	r2, r3, #3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80e0 	beq.w	8005c34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a74:	4b2f      	ldr	r3, [pc, #188]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005a84:	4b2b      	ldr	r3, [pc, #172]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a92:	4a29      	ldr	r2, [pc, #164]	@ (8005b38 <HAL_GPIO_Init+0x23c>)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	@ (8005b3c <HAL_GPIO_Init+0x240>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d052      	beq.n	8005b64 <HAL_GPIO_Init+0x268>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b40 <HAL_GPIO_Init+0x244>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_GPIO_Init+0x22e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b44 <HAL_GPIO_Init+0x248>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d02b      	beq.n	8005b26 <HAL_GPIO_Init+0x22a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b48 <HAL_GPIO_Init+0x24c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d025      	beq.n	8005b22 <HAL_GPIO_Init+0x226>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <HAL_GPIO_Init+0x250>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01f      	beq.n	8005b1e <HAL_GPIO_Init+0x222>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b50 <HAL_GPIO_Init+0x254>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d019      	beq.n	8005b1a <HAL_GPIO_Init+0x21e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b54 <HAL_GPIO_Init+0x258>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <HAL_GPIO_Init+0x21a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <HAL_GPIO_Init+0x25c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00d      	beq.n	8005b12 <HAL_GPIO_Init+0x216>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_GPIO_Init+0x260>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d007      	beq.n	8005b0e <HAL_GPIO_Init+0x212>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <HAL_GPIO_Init+0x264>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <HAL_GPIO_Init+0x20e>
 8005b06:	2309      	movs	r3, #9
 8005b08:	e02d      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b0a:	230a      	movs	r3, #10
 8005b0c:	e02b      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	e029      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b12:	2307      	movs	r3, #7
 8005b14:	e027      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b16:	2306      	movs	r3, #6
 8005b18:	e025      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b1a:	2305      	movs	r3, #5
 8005b1c:	e023      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	e021      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b22:	2303      	movs	r3, #3
 8005b24:	e01f      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e01d      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e01b      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b2e:	bf00      	nop
 8005b30:	58000080 	.word	0x58000080
 8005b34:	58024400 	.word	0x58024400
 8005b38:	58000400 	.word	0x58000400
 8005b3c:	58020000 	.word	0x58020000
 8005b40:	58020400 	.word	0x58020400
 8005b44:	58020800 	.word	0x58020800
 8005b48:	58020c00 	.word	0x58020c00
 8005b4c:	58021000 	.word	0x58021000
 8005b50:	58021400 	.word	0x58021400
 8005b54:	58021800 	.word	0x58021800
 8005b58:	58021c00 	.word	0x58021c00
 8005b5c:	58022000 	.word	0x58022000
 8005b60:	58022400 	.word	0x58022400
 8005b64:	2300      	movs	r3, #0
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	f002 0203 	and.w	r2, r2, #3
 8005b6c:	0092      	lsls	r2, r2, #2
 8005b6e:	4093      	lsls	r3, r2
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b76:	4938      	ldr	r1, [pc, #224]	@ (8005c58 <HAL_GPIO_Init+0x35c>)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f47f ae63 	bne.w	8005910 <HAL_GPIO_Init+0x14>
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3724      	adds	r7, #36	@ 0x24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	58000400 	.word	0x58000400

08005c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c6c:	787b      	ldrb	r3, [r7, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c78:	e003      	b.n	8005c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	041a      	lsls	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	619a      	str	r2, [r3, #24]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005c98:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <HAL_HSEM_FastTake+0x2c>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3320      	adds	r3, #32
 8005c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca2:	4a07      	ldr	r2, [pc, #28]	@ (8005cc0 <HAL_HSEM_FastTake+0x30>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e000      	b.n	8005cae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	58026400 	.word	0x58026400
 8005cc0:	80000300 	.word	0x80000300

08005cc4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005cce:	4906      	ldr	r1, [pc, #24]	@ (8005ce8 <HAL_HSEM_Release+0x24>)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	58026400 	.word	0x58026400

08005cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e08b      	b.n	8005e16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe fa40 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	@ 0x24
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0201 	bic.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d107      	bne.n	8005d66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	e006      	b.n	8005d74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d108      	bne.n	8005d8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e007      	b.n	8005d9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_I2C_Init+0x134>)
 8005daa:	430b      	orrs	r3, r1
 8005dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69d9      	ldr	r1, [r3, #28]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	02008000 	.word	0x02008000

08005e24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	460b      	mov	r3, r1
 8005e32:	817b      	strh	r3, [r7, #10]
 8005e34:	4613      	mov	r3, r2
 8005e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	f040 80fd 	bne.w	8006040 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_I2C_Master_Transmit+0x30>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0f6      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fe fece 	bl	8004bfc <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2319      	movs	r3, #25
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa24 	bl	80062bc <I2C_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0e1      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2221      	movs	r2, #33	@ 0x21
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	893a      	ldrh	r2, [r7, #8]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2bff      	cmp	r3, #255	@ 0xff
 8005eae:	d906      	bls.n	8005ebe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	22ff      	movs	r2, #255	@ 0xff
 8005eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005eb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e007      	b.n	8005ece <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ecc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d024      	beq.n	8005f20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	8979      	ldrh	r1, [r7, #10]
 8005f12:	4b4e      	ldr	r3, [pc, #312]	@ (800604c <HAL_I2C_Master_Transmit+0x228>)
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fc1f 	bl	800675c <I2C_TransferConfig>
 8005f1e:	e066      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	8979      	ldrh	r1, [r7, #10]
 8005f28:	4b48      	ldr	r3, [pc, #288]	@ (800604c <HAL_I2C_Master_Transmit+0x228>)
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fc14 	bl	800675c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f34:	e05b      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	6a39      	ldr	r1, [r7, #32]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fa17 	bl	800636e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e07b      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d034      	beq.n	8005fee <HAL_I2C_Master_Transmit+0x1ca>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d130      	bne.n	8005fee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2180      	movs	r1, #128	@ 0x80
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f990 	bl	80062bc <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e04d      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2bff      	cmp	r3, #255	@ 0xff
 8005fae:	d90e      	bls.n	8005fce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	22ff      	movs	r2, #255	@ 0xff
 8005fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fbc8 	bl	800675c <I2C_TransferConfig>
 8005fcc:	e00f      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	8979      	ldrh	r1, [r7, #10]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fbb7 	bl	800675c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d19e      	bne.n	8005f36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	6a39      	ldr	r1, [r7, #32]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f9fd 	bl	80063fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e01a      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2220      	movs	r2, #32
 8006012:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <HAL_I2C_Master_Transmit+0x22c>)
 8006020:	400b      	ands	r3, r1
 8006022:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	80002000 	.word	0x80002000
 8006050:	fe00e800 	.word	0xfe00e800

08006054 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	461a      	mov	r2, r3
 8006060:	460b      	mov	r3, r1
 8006062:	817b      	strh	r3, [r7, #10]
 8006064:	4613      	mov	r3, r2
 8006066:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	f040 80db 	bne.w	800622c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_I2C_Master_Receive+0x30>
 8006080:	2302      	movs	r3, #2
 8006082:	e0d4      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800608c:	f7fe fdb6 	bl	8004bfc <HAL_GetTick>
 8006090:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2319      	movs	r3, #25
 8006098:	2201      	movs	r2, #1
 800609a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f90c 	bl	80062bc <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0bf      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2222      	movs	r2, #34	@ 0x22
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2210      	movs	r2, #16
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	893a      	ldrh	r2, [r7, #8]
 80060ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2bff      	cmp	r3, #255	@ 0xff
 80060de:	d90e      	bls.n	80060fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	22ff      	movs	r2, #255	@ 0xff
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	4b52      	ldr	r3, [pc, #328]	@ (8006238 <HAL_I2C_Master_Receive+0x1e4>)
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fb30 	bl	800675c <I2C_TransferConfig>
 80060fc:	e06d      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	4b49      	ldr	r3, [pc, #292]	@ (8006238 <HAL_I2C_Master_Receive+0x1e4>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fb1f 	bl	800675c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800611e:	e05c      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	6a39      	ldr	r1, [r7, #32]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f9ad 	bl	8006484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e07c      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d034      	beq.n	80061da <HAL_I2C_Master_Receive+0x186>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d130      	bne.n	80061da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f89a 	bl	80062bc <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e04d      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	2bff      	cmp	r3, #255	@ 0xff
 800619a:	d90e      	bls.n	80061ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	22ff      	movs	r2, #255	@ 0xff
 80061a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	8979      	ldrh	r1, [r7, #10]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fad2 	bl	800675c <I2C_TransferConfig>
 80061b8:	e00f      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	8979      	ldrh	r1, [r7, #10]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fac1 	bl	800675c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d19d      	bne.n	8006120 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	6a39      	ldr	r1, [r7, #32]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f907 	bl	80063fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01a      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2220      	movs	r2, #32
 80061fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <HAL_I2C_Master_Receive+0x1e8>)
 800620c:	400b      	ands	r3, r1
 800620e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	80002400 	.word	0x80002400
 800623c:	fe00e800 	.word	0xfe00e800

08006240 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624e:	b2db      	uxtb	r3, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d103      	bne.n	8006292 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d007      	beq.n	80062b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	619a      	str	r2, [r3, #24]
  }
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062cc:	e03b      	b.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f962 	bl	800659c <I2C_IsErrorOccurred>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e041      	b.n	8006366 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e8:	d02d      	beq.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fe fc87 	bl	8004bfc <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <I2C_WaitOnFlagUntilTimeout+0x44>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d122      	bne.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	429a      	cmp	r2, r3
 800631c:	d113      	bne.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e00f      	b.n	8006366 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	429a      	cmp	r2, r3
 8006362:	d0b4      	beq.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800637a:	e033      	b.n	80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f90b 	bl	800659c <I2C_IsErrorOccurred>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e031      	b.n	80063f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006396:	d025      	beq.n	80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fe fc30 	bl	8004bfc <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11a      	bne.n	80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d013      	beq.n	80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e007      	b.n	80063f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d1c4      	bne.n	800637c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006408:	e02f      	b.n	800646a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f8c4 	bl	800659c <I2C_IsErrorOccurred>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e02d      	b.n	800647a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fe fbed 	bl	8004bfc <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11a      	bne.n	800646a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b20      	cmp	r3, #32
 8006440:	d013      	beq.n	800646a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006446:	f043 0220 	orr.w	r2, r3, #32
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e007      	b.n	800647a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b20      	cmp	r3, #32
 8006476:	d1c8      	bne.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006494:	e071      	b.n	800657a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f87e 	bl	800659c <I2C_IsErrorOccurred>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d13b      	bne.n	8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d138      	bne.n	8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d105      	bne.n	80064d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d121      	bne.n	800652a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2204      	movs	r2, #4
 80064f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2220      	movs	r2, #32
 80064fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6859      	ldr	r1, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b24      	ldr	r3, [pc, #144]	@ (8006598 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006508:	400b      	ands	r3, r1
 800650a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
 8006528:	e002      	b.n	8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006530:	f7fe fb64 	bl	8004bfc <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	429a      	cmp	r2, r3
 800653e:	d302      	bcc.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d119      	bne.n	800657a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b04      	cmp	r3, #4
 8006558:	d00f      	beq.n	800657a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f043 0220 	orr.w	r2, r3, #32
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b04      	cmp	r3, #4
 8006586:	d002      	beq.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d083      	beq.n	8006496 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	fe00e800 	.word	0xfe00e800

0800659c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	@ 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d068      	beq.n	800669a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2210      	movs	r2, #16
 80065ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065d0:	e049      	b.n	8006666 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d8:	d045      	beq.n	8006666 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fe fb0f 	bl	8004bfc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <I2C_IsErrorOccurred+0x54>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d13a      	bne.n	8006666 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006612:	d121      	bne.n	8006658 <I2C_IsErrorOccurred+0xbc>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800661a:	d01d      	beq.n	8006658 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800661c:	7cfb      	ldrb	r3, [r7, #19]
 800661e:	2b20      	cmp	r3, #32
 8006620:	d01a      	beq.n	8006658 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006632:	f7fe fae3 	bl	8004bfc <HAL_GetTick>
 8006636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006638:	e00e      	b.n	8006658 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800663a:	f7fe fadf 	bl	8004bfc <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b19      	cmp	r3, #25
 8006646:	d907      	bls.n	8006658 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f043 0320 	orr.w	r3, r3, #32
 800664e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006656:	e006      	b.n	8006666 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b20      	cmp	r3, #32
 8006664:	d1e9      	bne.n	800663a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d003      	beq.n	800667c <I2C_IsErrorOccurred+0xe0>
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0aa      	beq.n	80065d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2220      	movs	r2, #32
 800668a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f043 0304 	orr.w	r3, r3, #4
 8006692:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f043 0308 	orr.w	r3, r3, #8
 80066d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006700:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01c      	beq.n	800674a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fdaf 	bl	8006274 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <I2C_IsErrorOccurred+0x1bc>)
 8006722:	400b      	ands	r3, r1
 8006724:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	431a      	orrs	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800674a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	@ 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	fe00e800 	.word	0xfe00e800

0800675c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	4613      	mov	r3, r2
 800676c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006774:	7a7b      	ldrb	r3, [r7, #9]
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800677c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	4313      	orrs	r3, r2
 8006786:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800678a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	0d5b      	lsrs	r3, r3, #21
 8006796:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800679a:	4b08      	ldr	r3, [pc, #32]	@ (80067bc <I2C_TransferConfig+0x60>)
 800679c:	430b      	orrs	r3, r1
 800679e:	43db      	mvns	r3, r3
 80067a0:	ea02 0103 	and.w	r1, r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	03ff63ff 	.word	0x03ff63ff

080067c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d138      	bne.n	8006848 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e032      	b.n	800684a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	@ 0x24
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006812:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b20      	cmp	r3, #32
 800686a:	d139      	bne.n	80068e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006876:	2302      	movs	r3, #2
 8006878:	e033      	b.n	80068e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2224      	movs	r2, #36	@ 0x24
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80068f8:	4b29      	ldr	r3, [pc, #164]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	2b06      	cmp	r3, #6
 8006902:	d00a      	beq.n	800691a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006904:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d001      	beq.n	8006916 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e040      	b.n	8006998 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e03e      	b.n	8006998 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006922:	491f      	ldr	r1, [pc, #124]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4313      	orrs	r3, r2
 8006928:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800692a:	f7fe f967 	bl	8004bfc <HAL_GetTick>
 800692e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006930:	e009      	b.n	8006946 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006932:	f7fe f963 	bl	8004bfc <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006940:	d901      	bls.n	8006946 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e028      	b.n	8006998 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006946:	4b16      	ldr	r3, [pc, #88]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800694e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006952:	d1ee      	bne.n	8006932 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b1e      	cmp	r3, #30
 8006958:	d008      	beq.n	800696c <HAL_PWREx_ConfigSupply+0x7c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b2e      	cmp	r3, #46	@ 0x2e
 800695e:	d005      	beq.n	800696c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b1d      	cmp	r3, #29
 8006964:	d002      	beq.n	800696c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b2d      	cmp	r3, #45	@ 0x2d
 800696a:	d114      	bne.n	8006996 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800696c:	f7fe f946 	bl	8004bfc <HAL_GetTick>
 8006970:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006972:	e009      	b.n	8006988 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006974:	f7fe f942 	bl	8004bfc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006982:	d901      	bls.n	8006988 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e007      	b.n	8006998 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006988:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006994:	d1ee      	bne.n	8006974 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	58024800 	.word	0x58024800

080069a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08c      	sub	sp, #48	@ 0x30
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f000 bc48 	b.w	8007248 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8088 	beq.w	8006ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c6:	4b99      	ldr	r3, [pc, #612]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069d0:	4b96      	ldr	r3, [pc, #600]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d007      	beq.n	80069ec <HAL_RCC_OscConfig+0x48>
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	2b18      	cmp	r3, #24
 80069e0:	d111      	bne.n	8006a06 <HAL_RCC_OscConfig+0x62>
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d10c      	bne.n	8006a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	4b8f      	ldr	r3, [pc, #572]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d06d      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x130>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d169      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f000 bc21 	b.w	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x7a>
 8006a10:	4b86      	ldr	r3, [pc, #536]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a85      	ldr	r2, [pc, #532]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e02e      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x9c>
 8006a26:	4b81      	ldr	r3, [pc, #516]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a80      	ldr	r2, [pc, #512]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b7e      	ldr	r3, [pc, #504]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7d      	ldr	r2, [pc, #500]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e01d      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0xc0>
 8006a4a:	4b78      	ldr	r3, [pc, #480]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a77      	ldr	r2, [pc, #476]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b75      	ldr	r3, [pc, #468]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a74      	ldr	r2, [pc, #464]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e00b      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a64:	4b71      	ldr	r3, [pc, #452]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a70      	ldr	r2, [pc, #448]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b6e      	ldr	r3, [pc, #440]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6d      	ldr	r2, [pc, #436]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fe f8ba 	bl	8004bfc <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fe f8b6 	bl	8004bfc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	@ 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e3d4      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9e:	4b63      	ldr	r3, [pc, #396]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0xe8>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fe f8a6 	bl	8004bfc <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fe f8a2 	bl	8004bfc <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	@ 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e3c0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ac6:	4b59      	ldr	r3, [pc, #356]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x110>
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80ca 	beq.w	8006c78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ae4:	4b51      	ldr	r3, [pc, #324]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006aee:	4b4f      	ldr	r3, [pc, #316]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_RCC_OscConfig+0x166>
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b18      	cmp	r3, #24
 8006afe:	d156      	bne.n	8006bae <HAL_RCC_OscConfig+0x20a>
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d151      	bne.n	8006bae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b0a:	4b48      	ldr	r3, [pc, #288]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_RCC_OscConfig+0x17e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e392      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b22:	4b42      	ldr	r3, [pc, #264]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 0219 	bic.w	r2, r3, #25
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	493f      	ldr	r1, [pc, #252]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fe f862 	bl	8004bfc <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3c:	f7fe f85e 	bl	8004bfc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e37c      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b4e:	4b37      	ldr	r3, [pc, #220]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	f7fe f87f 	bl	8004c5c <HAL_GetREVID>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d817      	bhi.n	8006b98 <HAL_RCC_OscConfig+0x1f4>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b40      	cmp	r3, #64	@ 0x40
 8006b6e:	d108      	bne.n	8006b82 <HAL_RCC_OscConfig+0x1de>
 8006b70:	4b2e      	ldr	r3, [pc, #184]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b78:	4a2c      	ldr	r2, [pc, #176]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b80:	e07a      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b82:	4b2a      	ldr	r3, [pc, #168]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	031b      	lsls	r3, r3, #12
 8006b90:	4926      	ldr	r1, [pc, #152]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b96:	e06f      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b98:	4b24      	ldr	r3, [pc, #144]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	4921      	ldr	r1, [pc, #132]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bac:	e064      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d047      	beq.n	8006c46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0219 	bic.w	r2, r3, #25
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	491a      	ldr	r1, [pc, #104]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fe f818 	bl	8004bfc <HAL_GetTick>
 8006bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fe f814 	bl	8004bfc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e332      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	f7fe f835 	bl	8004c5c <HAL_GetREVID>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d819      	bhi.n	8006c30 <HAL_RCC_OscConfig+0x28c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b40      	cmp	r3, #64	@ 0x40
 8006c02:	d108      	bne.n	8006c16 <HAL_RCC_OscConfig+0x272>
 8006c04:	4b09      	ldr	r3, [pc, #36]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c0c:	4a07      	ldr	r2, [pc, #28]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c12:	6053      	str	r3, [r2, #4]
 8006c14:	e030      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
 8006c16:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	031b      	lsls	r3, r3, #12
 8006c24:	4901      	ldr	r1, [pc, #4]	@ (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
 8006c2a:	e025      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	4b9a      	ldr	r3, [pc, #616]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	061b      	lsls	r3, r3, #24
 8006c3e:	4997      	ldr	r1, [pc, #604]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
 8006c44:	e018      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c46:	4b95      	ldr	r3, [pc, #596]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a94      	ldr	r2, [pc, #592]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fd ffd3 	bl	8004bfc <HAL_GetTick>
 8006c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fd ffcf 	bl	8004bfc <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e2ed      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c6c:	4b8b      	ldr	r3, [pc, #556]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80a9 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c86:	4b85      	ldr	r3, [pc, #532]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c90:	4b82      	ldr	r3, [pc, #520]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d007      	beq.n	8006cac <HAL_RCC_OscConfig+0x308>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b18      	cmp	r3, #24
 8006ca0:	d13a      	bne.n	8006d18 <HAL_RCC_OscConfig+0x374>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f003 0303 	and.w	r3, r3, #3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d135      	bne.n	8006d18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cac:	4b7b      	ldr	r3, [pc, #492]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x320>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2b80      	cmp	r3, #128	@ 0x80
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e2c1      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cc4:	f7fd ffca 	bl	8004c5c <HAL_GetREVID>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d817      	bhi.n	8006d02 <HAL_RCC_OscConfig+0x35e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_OscConfig+0x348>
 8006cda:	4b70      	ldr	r3, [pc, #448]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ce8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cea:	e075      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cec:	4b6b      	ldr	r3, [pc, #428]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	069b      	lsls	r3, r3, #26
 8006cfa:	4968      	ldr	r1, [pc, #416]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d00:	e06a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d02:	4b66      	ldr	r3, [pc, #408]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	061b      	lsls	r3, r3, #24
 8006d10:	4962      	ldr	r1, [pc, #392]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d16:	e05f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d042      	beq.n	8006da6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d20:	4b5e      	ldr	r3, [pc, #376]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5d      	ldr	r2, [pc, #372]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fd ff66 	bl	8004bfc <HAL_GetTick>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d34:	f7fd ff62 	bl	8004bfc <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e280      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d46:	4b55      	ldr	r3, [pc, #340]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d52:	f7fd ff83 	bl	8004c5c <HAL_GetREVID>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d817      	bhi.n	8006d90 <HAL_RCC_OscConfig+0x3ec>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d108      	bne.n	8006d7a <HAL_RCC_OscConfig+0x3d6>
 8006d68:	4b4c      	ldr	r3, [pc, #304]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d70:	4a4a      	ldr	r2, [pc, #296]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	e02e      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
 8006d7a:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	069b      	lsls	r3, r3, #26
 8006d88:	4944      	ldr	r1, [pc, #272]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
 8006d8e:	e023      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
 8006d90:	4b42      	ldr	r3, [pc, #264]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	493f      	ldr	r1, [pc, #252]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60cb      	str	r3, [r1, #12]
 8006da4:	e018      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006da6:	4b3d      	ldr	r3, [pc, #244]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fd ff23 	bl	8004bfc <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dba:	f7fd ff1f 	bl	8004bfc <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e23d      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dcc:	4b33      	ldr	r3, [pc, #204]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d036      	beq.n	8006e52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d019      	beq.n	8006e20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dec:	4b2b      	ldr	r3, [pc, #172]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df8:	f7fd ff00 	bl	8004bfc <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e00:	f7fd fefc 	bl	8004bfc <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e21a      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e12:	4b22      	ldr	r3, [pc, #136]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x45c>
 8006e1e:	e018      	b.n	8006e52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e20:	4b1e      	ldr	r3, [pc, #120]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e24:	4a1d      	ldr	r2, [pc, #116]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fd fee6 	bl	8004bfc <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e34:	f7fd fee2 	bl	8004bfc <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e200      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e46:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d039      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01c      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006e70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e72:	f7fd fec3 	bl	8004bfc <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e7a:	f7fd febf 	bl	8004bfc <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e1dd      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e8c:	4b03      	ldr	r3, [pc, #12]	@ (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x4d6>
 8006e98:	e01b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x52e>
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ea0:	4b9b      	ldr	r3, [pc, #620]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a9a      	ldr	r2, [pc, #616]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eac:	f7fd fea6 	bl	8004bfc <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb4:	f7fd fea2 	bl	8004bfc <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e1c0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ec6:	4b92      	ldr	r3, [pc, #584]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8081 	beq.w	8006fe2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8007114 <HAL_RCC_OscConfig+0x770>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a8b      	ldr	r2, [pc, #556]	@ (8007114 <HAL_RCC_OscConfig+0x770>)
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eec:	f7fd fe86 	bl	8004bfc <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef4:	f7fd fe82 	bl	8004bfc <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	@ 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e1a0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f06:	4b83      	ldr	r3, [pc, #524]	@ (8007114 <HAL_RCC_OscConfig+0x770>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_OscConfig+0x584>
 8006f1a:	4b7d      	ldr	r3, [pc, #500]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f26:	e02d      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10c      	bne.n	8006f4a <HAL_RCC_OscConfig+0x5a6>
 8006f30:	4b77      	ldr	r3, [pc, #476]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f34:	4a76      	ldr	r2, [pc, #472]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f3c:	4b74      	ldr	r3, [pc, #464]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f40:	4a73      	ldr	r2, [pc, #460]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	f023 0304 	bic.w	r3, r3, #4
 8006f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f48:	e01c      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x5c8>
 8006f52:	4b6f      	ldr	r3, [pc, #444]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f56:	4a6e      	ldr	r2, [pc, #440]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f62:	4a6b      	ldr	r2, [pc, #428]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f6c:	4b68      	ldr	r3, [pc, #416]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f70:	4a67      	ldr	r2, [pc, #412]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f78:	4b65      	ldr	r3, [pc, #404]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7c:	4a64      	ldr	r2, [pc, #400]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f7e:	f023 0304 	bic.w	r3, r3, #4
 8006f82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d015      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fd fe36 	bl	8004bfc <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f94:	f7fd fe32 	bl	8004bfc <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e14e      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006faa:	4b59      	ldr	r3, [pc, #356]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ee      	beq.n	8006f94 <HAL_RCC_OscConfig+0x5f0>
 8006fb6:	e014      	b.n	8006fe2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7fd fe20 	bl	8004bfc <HAL_GetTick>
 8006fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7fd fe1c 	bl	8004bfc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e138      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ee      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 812d 	beq.w	8007246 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fec:	4b48      	ldr	r3, [pc, #288]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ff4:	2b18      	cmp	r3, #24
 8006ff6:	f000 80bd 	beq.w	8007174 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	f040 809e 	bne.w	8007140 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007004:	4b42      	ldr	r3, [pc, #264]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a41      	ldr	r2, [pc, #260]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 800700a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800700e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fd fdf4 	bl	8004bfc <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007018:	f7fd fdf0 	bl	8004bfc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e10e      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007036:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800703a:	4b37      	ldr	r3, [pc, #220]	@ (8007118 <HAL_RCC_OscConfig+0x774>)
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007046:	0112      	lsls	r2, r2, #4
 8007048:	430a      	orrs	r2, r1
 800704a:	4931      	ldr	r1, [pc, #196]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	3b01      	subs	r3, #1
 8007056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705e:	3b01      	subs	r3, #1
 8007060:	025b      	lsls	r3, r3, #9
 8007062:	b29b      	uxth	r3, r3
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	3b01      	subs	r3, #1
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007078:	3b01      	subs	r3, #1
 800707a:	061b      	lsls	r3, r3, #24
 800707c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007080:	4923      	ldr	r1, [pc, #140]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007086:	4b22      	ldr	r3, [pc, #136]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4a21      	ldr	r2, [pc, #132]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007096:	4b21      	ldr	r3, [pc, #132]	@ (800711c <HAL_RCC_OscConfig+0x778>)
 8007098:	4013      	ands	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800709e:	00d2      	lsls	r2, r2, #3
 80070a0:	491b      	ldr	r1, [pc, #108]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	f023 020c 	bic.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	4917      	ldr	r1, [pc, #92]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070b8:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	f023 0202 	bic.w	r2, r3, #2
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c4:	4912      	ldr	r1, [pc, #72]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070ca:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	4a10      	ldr	r2, [pc, #64]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	4a0d      	ldr	r2, [pc, #52]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80070ee:	4b08      	ldr	r3, [pc, #32]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	4a07      	ldr	r2, [pc, #28]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070fa:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a04      	ldr	r2, [pc, #16]	@ (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7fd fd79 	bl	8004bfc <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800710c:	e011      	b.n	8007132 <HAL_RCC_OscConfig+0x78e>
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	58024800 	.word	0x58024800
 8007118:	fffffc0c 	.word	0xfffffc0c
 800711c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007120:	f7fd fd6c 	bl	8004bfc <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e08a      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007132:	4b47      	ldr	r3, [pc, #284]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x77c>
 800713e:	e082      	b.n	8007246 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007140:	4b43      	ldr	r3, [pc, #268]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a42      	ldr	r2, [pc, #264]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800714a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fd fd56 	bl	8004bfc <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007154:	f7fd fd52 	bl	8004bfc <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e070      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007166:	4b3a      	ldr	r3, [pc, #232]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x7b0>
 8007172:	e068      	b.n	8007246 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007174:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800717a:	4b35      	ldr	r3, [pc, #212]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	2b01      	cmp	r3, #1
 8007186:	d031      	beq.n	80071ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f003 0203 	and.w	r2, r3, #3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d12a      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d122      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d11a      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d111      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d108      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	0e1b      	lsrs	r3, r3, #24
 80071de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d001      	beq.n	80071f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e02b      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071f0:	4b17      	ldr	r3, [pc, #92]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 80071f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f4:	08db      	lsrs	r3, r3, #3
 80071f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d01f      	beq.n	8007246 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007206:	4b12      	ldr	r3, [pc, #72]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a11      	ldr	r2, [pc, #68]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007212:	f7fd fcf3 	bl	8004bfc <HAL_GetTick>
 8007216:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007218:	bf00      	nop
 800721a:	f7fd fcef 	bl	8004bfc <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	4293      	cmp	r3, r2
 8007224:	d0f9      	beq.n	800721a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007226:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800722a:	4b0a      	ldr	r3, [pc, #40]	@ (8007254 <HAL_RCC_OscConfig+0x8b0>)
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007232:	00d2      	lsls	r2, r2, #3
 8007234:	4906      	ldr	r1, [pc, #24]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007236:	4313      	orrs	r3, r2
 8007238:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800723a:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	4a04      	ldr	r2, [pc, #16]	@ (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	@ 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024400 	.word	0x58024400
 8007254:	ffff0007 	.word	0xffff0007

08007258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e19c      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800726c:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d910      	bls.n	800729c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b87      	ldr	r3, [pc, #540]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 020f 	bic.w	r2, r3, #15
 8007282:	4985      	ldr	r1, [pc, #532]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b83      	ldr	r3, [pc, #524]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e184      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	4b7b      	ldr	r3, [pc, #492]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d908      	bls.n	80072ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072b8:	4b78      	ldr	r3, [pc, #480]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4975      	ldr	r1, [pc, #468]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	4b70      	ldr	r3, [pc, #448]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d908      	bls.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072e6:	4b6d      	ldr	r3, [pc, #436]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	496a      	ldr	r1, [pc, #424]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	4b64      	ldr	r3, [pc, #400]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007310:	429a      	cmp	r2, r3
 8007312:	d908      	bls.n	8007326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007314:	4b61      	ldr	r3, [pc, #388]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	495e      	ldr	r1, [pc, #376]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007322:	4313      	orrs	r3, r2
 8007324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	4b59      	ldr	r3, [pc, #356]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800733e:	429a      	cmp	r2, r3
 8007340:	d908      	bls.n	8007354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007342:	4b56      	ldr	r3, [pc, #344]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4953      	ldr	r1, [pc, #332]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007350:	4313      	orrs	r3, r2
 8007352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	4b4d      	ldr	r3, [pc, #308]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	429a      	cmp	r2, r3
 800736e:	d908      	bls.n	8007382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007370:	4b4a      	ldr	r3, [pc, #296]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f023 020f 	bic.w	r2, r3, #15
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4947      	ldr	r1, [pc, #284]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 800737e:	4313      	orrs	r3, r2
 8007380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d055      	beq.n	800743a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800738e:	4b43      	ldr	r3, [pc, #268]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4940      	ldr	r1, [pc, #256]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 800739c:	4313      	orrs	r3, r2
 800739e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a8:	4b3c      	ldr	r3, [pc, #240]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d121      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0f6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d107      	bne.n	80073d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073c0:	4b36      	ldr	r3, [pc, #216]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d115      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0ea      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073d8:	4b30      	ldr	r3, [pc, #192]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0de      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073e8:	4b2c      	ldr	r3, [pc, #176]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0d6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073f8:	4b28      	ldr	r3, [pc, #160]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f023 0207 	bic.w	r2, r3, #7
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4925      	ldr	r1, [pc, #148]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740a:	f7fd fbf7 	bl	8004bfc <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007410:	e00a      	b.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007412:	f7fd fbf3 	bl	8004bfc <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0be      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007428:	4b1c      	ldr	r3, [pc, #112]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	429a      	cmp	r2, r3
 8007438:	d1eb      	bne.n	8007412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	4b14      	ldr	r3, [pc, #80]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	429a      	cmp	r2, r3
 8007454:	d208      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007456:	4b11      	ldr	r3, [pc, #68]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f023 020f 	bic.w	r2, r3, #15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	490e      	ldr	r1, [pc, #56]	@ (800749c <HAL_RCC_ClockConfig+0x244>)
 8007464:	4313      	orrs	r3, r2
 8007466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d214      	bcs.n	80074a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	4906      	ldr	r1, [pc, #24]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b04      	ldr	r3, [pc, #16]	@ (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e086      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
 8007498:	52002000 	.word	0x52002000
 800749c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d010      	beq.n	80074ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	4b3f      	ldr	r3, [pc, #252]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d208      	bcs.n	80074ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074bc:	4b3c      	ldr	r3, [pc, #240]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4939      	ldr	r1, [pc, #228]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695a      	ldr	r2, [r3, #20]
 80074de:	4b34      	ldr	r3, [pc, #208]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d208      	bcs.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074ea:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	492e      	ldr	r1, [pc, #184]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007514:	429a      	cmp	r2, r3
 8007516:	d208      	bcs.n	800752a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007518:	4b25      	ldr	r3, [pc, #148]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4922      	ldr	r1, [pc, #136]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	4b1d      	ldr	r3, [pc, #116]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007542:	429a      	cmp	r2, r3
 8007544:	d208      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007546:	4b1a      	ldr	r3, [pc, #104]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	4917      	ldr	r1, [pc, #92]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007554:	4313      	orrs	r3, r2
 8007556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007558:	f000 f834 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 030f 	and.w	r3, r3, #15
 8007568:	4912      	ldr	r1, [pc, #72]	@ (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007576:	4b0e      	ldr	r3, [pc, #56]	@ (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	4a0d      	ldr	r2, [pc, #52]	@ (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 8007580:	5cd3      	ldrb	r3, [r2, r3]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	4a0a      	ldr	r2, [pc, #40]	@ (80075b8 <HAL_RCC_ClockConfig+0x360>)
 800758e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007590:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <HAL_RCC_ClockConfig+0x364>)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <HAL_RCC_ClockConfig+0x368>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd f952 	bl	8004844 <HAL_InitTick>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
 80075b4:	0801701c 	.word	0x0801701c
 80075b8:	24000004 	.word	0x24000004
 80075bc:	24000000 	.word	0x24000000
 80075c0:	24000014 	.word	0x24000014

080075c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	@ 0x24
 80075c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ca:	4bb3      	ldr	r3, [pc, #716]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075d2:	2b18      	cmp	r3, #24
 80075d4:	f200 8155 	bhi.w	8007882 <HAL_RCC_GetSysClockFreq+0x2be>
 80075d8:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007883 	.word	0x08007883
 80075e8:	08007883 	.word	0x08007883
 80075ec:	08007883 	.word	0x08007883
 80075f0:	08007883 	.word	0x08007883
 80075f4:	08007883 	.word	0x08007883
 80075f8:	08007883 	.word	0x08007883
 80075fc:	08007883 	.word	0x08007883
 8007600:	0800766b 	.word	0x0800766b
 8007604:	08007883 	.word	0x08007883
 8007608:	08007883 	.word	0x08007883
 800760c:	08007883 	.word	0x08007883
 8007610:	08007883 	.word	0x08007883
 8007614:	08007883 	.word	0x08007883
 8007618:	08007883 	.word	0x08007883
 800761c:	08007883 	.word	0x08007883
 8007620:	08007671 	.word	0x08007671
 8007624:	08007883 	.word	0x08007883
 8007628:	08007883 	.word	0x08007883
 800762c:	08007883 	.word	0x08007883
 8007630:	08007883 	.word	0x08007883
 8007634:	08007883 	.word	0x08007883
 8007638:	08007883 	.word	0x08007883
 800763c:	08007883 	.word	0x08007883
 8007640:	08007677 	.word	0x08007677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b94      	ldr	r3, [pc, #592]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007650:	4b91      	ldr	r3, [pc, #580]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a90      	ldr	r2, [pc, #576]	@ (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007662:	e111      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007664:	4b8d      	ldr	r3, [pc, #564]	@ (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007666:	61bb      	str	r3, [r7, #24]
      break;
 8007668:	e10e      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800766a:	4b8d      	ldr	r3, [pc, #564]	@ (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800766c:	61bb      	str	r3, [r7, #24]
      break;
 800766e:	e10b      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007670:	4b8c      	ldr	r3, [pc, #560]	@ (80078a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007672:	61bb      	str	r3, [r7, #24]
      break;
 8007674:	e108      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007676:	4b88      	ldr	r3, [pc, #544]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007680:	4b85      	ldr	r3, [pc, #532]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800768a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800768c:	4b82      	ldr	r3, [pc, #520]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007696:	4b80      	ldr	r3, [pc, #512]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e1 	beq.w	800787c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	f000 8083 	beq.w	80077c8 <HAL_RCC_GetSysClockFreq+0x204>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	f200 80a1 	bhi.w	800780c <HAL_RCC_GetSysClockFreq+0x248>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x114>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d056      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076d6:	e099      	b.n	800780c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d02d      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	4a6b      	ldr	r2, [pc, #428]	@ (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b62      	ldr	r3, [pc, #392]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007722:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800773e:	e087      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80078ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b51      	ldr	r3, [pc, #324]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a02 	vldr	s12, [r7, #8]
 8007766:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007782:	e065      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007796:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077c6:	e043      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80078b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077da:	4b2f      	ldr	r3, [pc, #188]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800780a:	e021      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b1e      	ldr	r3, [pc, #120]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007832:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800784e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007850:	4b11      	ldr	r3, [pc, #68]	@ (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007854:	0a5b      	lsrs	r3, r3, #9
 8007856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800785a:	3301      	adds	r3, #1
 800785c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007868:	edd7 6a07 	vldr	s13, [r7, #28]
 800786c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007874:	ee17 3a90 	vmov	r3, s15
 8007878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800787a:	e005      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
      break;
 8007880:	e002      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007882:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007884:	61bb      	str	r3, [r7, #24]
      break;
 8007886:	bf00      	nop
  }

  return sysclockfreq;
 8007888:	69bb      	ldr	r3, [r7, #24]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	@ 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	58024400 	.word	0x58024400
 800789c:	03d09000 	.word	0x03d09000
 80078a0:	003d0900 	.word	0x003d0900
 80078a4:	007a1200 	.word	0x007a1200
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4af42400 	.word	0x4af42400

080078b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078be:	f7ff fe81 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 80078c2:	4602      	mov	r2, r0
 80078c4:	4b10      	ldr	r3, [pc, #64]	@ (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	490f      	ldr	r1, [pc, #60]	@ (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078d0:	5ccb      	ldrb	r3, [r1, r3]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	4a09      	ldr	r2, [pc, #36]	@ (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078e6:	5cd3      	ldrb	r3, [r2, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	4a07      	ldr	r2, [pc, #28]	@ (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078f6:	4a07      	ldr	r2, [pc, #28]	@ (8007914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58024400 	.word	0x58024400
 800790c:	0801701c 	.word	0x0801701c
 8007910:	24000004 	.word	0x24000004
 8007914:	24000000 	.word	0x24000000

08007918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800791c:	f7ff ffcc 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8007920:	4602      	mov	r2, r0
 8007922:	4b06      	ldr	r3, [pc, #24]	@ (800793c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	4904      	ldr	r1, [pc, #16]	@ (8007940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800792e:	5ccb      	ldrb	r3, [r1, r3]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58024400 	.word	0x58024400
 8007940:	0801701c 	.word	0x0801701c

08007944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007948:	f7ff ffb6 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4904      	ldr	r1, [pc, #16]	@ (800796c <HAL_RCC_GetPCLK2Freq+0x28>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	58024400 	.word	0x58024400
 800796c:	0801701c 	.word	0x0801701c

08007970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	223f      	movs	r2, #63	@ 0x3f
 800797e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007980:	4b1a      	ldr	r3, [pc, #104]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0207 	and.w	r2, r3, #7
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800798c:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007998:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80079a4:	4b11      	ldr	r3, [pc, #68]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80079b0:	4b0e      	ldr	r3, [pc, #56]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079bc:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80079c8:	4b08      	ldr	r3, [pc, #32]	@ (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079d4:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <HAL_RCC_GetClockConfig+0x80>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	601a      	str	r2, [r3, #0]
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	58024400 	.word	0x58024400
 80079f0:	52002000 	.word	0x52002000

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f8:	b0ca      	sub	sp, #296	@ 0x128
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a18:	2500      	movs	r5, #0
 8007a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8007a1e:	d049      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a2a:	d02f      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a30:	d828      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a36:	d01a      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a3c:	d822      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a46:	d007      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a48:	e01c      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4a:	4bb8      	ldr	r3, [pc, #736]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	4ab7      	ldr	r2, [pc, #732]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a56:	e01a      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fc8f 	bl	8009384 <RCCEx_PLL2_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00f      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	3328      	adds	r3, #40	@ 0x28
 8007a74:	2102      	movs	r1, #2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fd36 	bl	80094e8 <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a82:	e004      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a96:	4ba5      	ldr	r3, [pc, #660]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa4:	4aa1      	ldr	r2, [pc, #644]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8007ac8:	d047      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d82a      	bhi.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007aff 	.word	0x08007aff
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b33 	.word	0x08007b33
 8007aec:	08007b33 	.word	0x08007b33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af0:	4b8e      	ldr	r3, [pc, #568]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	4a8d      	ldr	r2, [pc, #564]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007afc:	e01a      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	3308      	adds	r3, #8
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fc3c 	bl	8009384 <RCCEx_PLL2_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b12:	e00f      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	3328      	adds	r3, #40	@ 0x28
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fce3 	bl	80094e8 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b28:	e004      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b30:	e000      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b40:	f023 0107 	bic.w	r1, r3, #7
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	4a78      	ldr	r2, [pc, #480]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b50:	e003      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007b66:	f04f 0b00 	mov.w	fp, #0
 8007b6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b6e:	d04c      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7a:	d030      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b80:	d829      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b84:	d02d      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b88:	d825      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b8a:	2b80      	cmp	r3, #128	@ 0x80
 8007b8c:	d018      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b8e:	2b80      	cmp	r3, #128	@ 0x80
 8007b90:	d821      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007b96:	2b40      	cmp	r3, #64	@ 0x40
 8007b98:	d007      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b9a:	e01c      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9c:	4b63      	ldr	r3, [pc, #396]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	4a62      	ldr	r2, [pc, #392]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ba8:	e01c      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bae:	3308      	adds	r3, #8
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fbe6 	bl	8009384 <RCCEx_PLL2_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bbe:	e011      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	3328      	adds	r3, #40	@ 0x28
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 fc8d 	bl	80094e8 <RCCEx_PLL3_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bd4:	e006      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bdc:	e002      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007bde:	bf00      	nop
 8007be0:	e000      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007bec:	4b4f      	ldr	r3, [pc, #316]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c00:	e003      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007c16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007c20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007c24:	460b      	mov	r3, r1
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d053      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c36:	d035      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c3c:	d82e      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c42:	d031      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c48:	d828      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c4e:	d01a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c54:	d822      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c5e:	d007      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c60:	e01c      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c62:	4b32      	ldr	r3, [pc, #200]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	4a31      	ldr	r2, [pc, #196]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e01c      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	3308      	adds	r3, #8
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fb83 	bl	8009384 <RCCEx_PLL2_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c84:	e011      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8a:	3328      	adds	r3, #40	@ 0x28
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fc2a 	bl	80094e8 <RCCEx_PLL3_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ca2:	e002      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007cde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d056      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cfe:	d038      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d04:	d831      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d0a:	d034      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d10:	d82b      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d16:	d01d      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d1c:	d825      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d006      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d28:	e01f      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d30:	4ba2      	ldr	r3, [pc, #648]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	4aa1      	ldr	r2, [pc, #644]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d3c:	e01c      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	3308      	adds	r3, #8
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 fb1c 	bl	8009384 <RCCEx_PLL2_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d52:	e011      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d58:	3328      	adds	r3, #40	@ 0x28
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 fbc3 	bl	80094e8 <RCCEx_PLL3_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d68:	e006      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d80:	4b8e      	ldr	r3, [pc, #568]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d90:	4a8a      	ldr	r2, [pc, #552]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007db6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d03a      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc6:	2b30      	cmp	r3, #48	@ 0x30
 8007dc8:	d01f      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007dca:	2b30      	cmp	r3, #48	@ 0x30
 8007dcc:	d819      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d00c      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d815      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d019      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d111      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dde:	4b77      	ldr	r3, [pc, #476]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	4a76      	ldr	r2, [pc, #472]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007dea:	e011      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df0:	3308      	adds	r3, #8
 8007df2:	2102      	movs	r1, #2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 fac5 	bl	8009384 <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e00:	e006      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e18:	4b68      	ldr	r3, [pc, #416]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e26:	4a65      	ldr	r2, [pc, #404]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e2c:	e003      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e46:	2300      	movs	r3, #0
 8007e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4313      	orrs	r3, r2
 8007e54:	d051      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e60:	d035      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e66:	d82e      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e6c:	d031      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007e6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e72:	d828      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e78:	d01a      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e7e:	d822      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e88:	d007      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e8a:	e01c      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	4a4a      	ldr	r2, [pc, #296]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 fa6e 	bl	8009384 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	3328      	adds	r3, #40	@ 0x28
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fb15 	bl	80094e8 <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007edc:	4b37      	ldr	r3, [pc, #220]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eea:	4a34      	ldr	r2, [pc, #208]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d056      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f24:	d033      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f2a:	d82c      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f30:	d02f      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f36:	d826      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f3c:	d02b      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f42:	d820      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f48:	d012      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f4e:	d81a      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d022      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f58:	d115      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2101      	movs	r1, #1
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 fa0e 	bl	8009384 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f6e:	e015      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	3328      	adds	r3, #40	@ 0x28
 8007f76:	2101      	movs	r1, #1
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fab5 	bl	80094e8 <RCCEx_PLL3_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f84:	e00a      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f8c:	e006      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e004      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fa4:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb2:	4a02      	ldr	r2, [pc, #8]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fba:	bf00      	nop
 8007fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	d055      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ff4:	d033      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ffa:	d82c      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008000:	d02f      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008006:	d826      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800800c:	d02b      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800800e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008012:	d820      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008018:	d012      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800801e:	d81a      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d022      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008028:	d115      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	3308      	adds	r3, #8
 8008030:	2101      	movs	r1, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f001 f9a6 	bl	8009384 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800803e:	e015      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	3328      	adds	r3, #40	@ 0x28
 8008046:	2101      	movs	r1, #1
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fa4d 	bl	80094e8 <RCCEx_PLL3_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008054:	e00a      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800805e:	bf00      	nop
 8008060:	e004      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800806a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008074:	4ba3      	ldr	r3, [pc, #652]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008078:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008084:	4a9f      	ldr	r2, [pc, #636]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008086:	430b      	orrs	r3, r1
 8008088:	6593      	str	r3, [r2, #88]	@ 0x58
 800808a:	e003      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80080a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080a4:	2300      	movs	r3, #0
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080ae:	460b      	mov	r3, r1
 80080b0:	4313      	orrs	r3, r2
 80080b2:	d037      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080be:	d00e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c4:	d816      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ce:	d111      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4b8c      	ldr	r3, [pc, #560]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	4a8b      	ldr	r2, [pc, #556]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080dc:	e00f      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e2:	3308      	adds	r3, #8
 80080e4:	2101      	movs	r1, #1
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 f94c 	bl	8009384 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080f2:	e004      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008106:	4b7f      	ldr	r3, [pc, #508]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008114:	4a7b      	ldr	r2, [pc, #492]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008116:	430b      	orrs	r3, r1
 8008118:	6513      	str	r3, [r2, #80]	@ 0x50
 800811a:	e003      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008134:	2300      	movs	r3, #0
 8008136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800813a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800813e:	460b      	mov	r3, r1
 8008140:	4313      	orrs	r3, r2
 8008142:	d039      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814a:	2b03      	cmp	r3, #3
 800814c:	d81c      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800814e:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008191 	.word	0x08008191
 8008158:	08008165 	.word	0x08008165
 800815c:	08008173 	.word	0x08008173
 8008160:	08008191 	.word	0x08008191
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008164:	4b67      	ldr	r3, [pc, #412]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	4a66      	ldr	r2, [pc, #408]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800816e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008170:	e00f      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008176:	3308      	adds	r3, #8
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 f902 	bl	8009384 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008186:	e004      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800818e:	e000      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800819a:	4b5a      	ldr	r3, [pc, #360]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800819e:	f023 0103 	bic.w	r1, r3, #3
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a8:	4a56      	ldr	r2, [pc, #344]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081ae:	e003      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80081c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80081d2:	460b      	mov	r3, r1
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f000 809f 	beq.w	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081da:	4b4b      	ldr	r3, [pc, #300]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a4a      	ldr	r2, [pc, #296]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081e6:	f7fc fd09 	bl	8004bfc <HAL_GetTick>
 80081ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ee:	e00b      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f0:	f7fc fd04 	bl	8004bfc <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b64      	cmp	r3, #100	@ 0x64
 80081fe:	d903      	bls.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008206:	e005      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008208:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0ed      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008218:	2b00      	cmp	r3, #0
 800821a:	d179      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800821c:	4b39      	ldr	r3, [pc, #228]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800821e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008228:	4053      	eors	r3, r2
 800822a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d015      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008232:	4b34      	ldr	r3, [pc, #208]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800823a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800823e:	4b31      	ldr	r3, [pc, #196]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	4a30      	ldr	r2, [pc, #192]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008248:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800824a:	4b2e      	ldr	r3, [pc, #184]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	4a2d      	ldr	r2, [pc, #180]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008254:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008256:	4a2b      	ldr	r2, [pc, #172]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800825c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826a:	d118      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826c:	f7fc fcc6 	bl	8004bfc <HAL_GetTick>
 8008270:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008274:	e00d      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fc fcc1 	bl	8004bfc <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008286:	429a      	cmp	r2, r3
 8008288:	d903      	bls.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008290:	e005      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008292:	4b1c      	ldr	r3, [pc, #112]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0eb      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800829e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d129      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082b6:	d10e      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80082b8:	4b12      	ldr	r3, [pc, #72]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082c8:	091a      	lsrs	r2, r3, #4
 80082ca:	4b10      	ldr	r3, [pc, #64]	@ (800830c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6113      	str	r3, [r2, #16]
 80082d4:	e005      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80082d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	4a0a      	ldr	r2, [pc, #40]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082e0:	6113      	str	r3, [r2, #16]
 80082e2:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f2:	4a04      	ldr	r2, [pc, #16]	@ (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f4:	430b      	orrs	r3, r1
 80082f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082f8:	e00e      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008302:	e009      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008304:	58024400 	.word	0x58024400
 8008308:	58024800 	.word	0x58024800
 800830c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f002 0301 	and.w	r3, r2, #1
 8008324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008328:	2300      	movs	r3, #0
 800832a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800832e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008332:	460b      	mov	r3, r1
 8008334:	4313      	orrs	r3, r2
 8008336:	f000 8089 	beq.w	800844c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008340:	2b28      	cmp	r3, #40	@ 0x28
 8008342:	d86b      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008425 	.word	0x08008425
 8008350:	0800841d 	.word	0x0800841d
 8008354:	0800841d 	.word	0x0800841d
 8008358:	0800841d 	.word	0x0800841d
 800835c:	0800841d 	.word	0x0800841d
 8008360:	0800841d 	.word	0x0800841d
 8008364:	0800841d 	.word	0x0800841d
 8008368:	0800841d 	.word	0x0800841d
 800836c:	080083f1 	.word	0x080083f1
 8008370:	0800841d 	.word	0x0800841d
 8008374:	0800841d 	.word	0x0800841d
 8008378:	0800841d 	.word	0x0800841d
 800837c:	0800841d 	.word	0x0800841d
 8008380:	0800841d 	.word	0x0800841d
 8008384:	0800841d 	.word	0x0800841d
 8008388:	0800841d 	.word	0x0800841d
 800838c:	08008407 	.word	0x08008407
 8008390:	0800841d 	.word	0x0800841d
 8008394:	0800841d 	.word	0x0800841d
 8008398:	0800841d 	.word	0x0800841d
 800839c:	0800841d 	.word	0x0800841d
 80083a0:	0800841d 	.word	0x0800841d
 80083a4:	0800841d 	.word	0x0800841d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	08008425 	.word	0x08008425
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	0800841d 	.word	0x0800841d
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008425 	.word	0x08008425
 80083d0:	0800841d 	.word	0x0800841d
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	0800841d 	.word	0x0800841d
 80083dc:	0800841d 	.word	0x0800841d
 80083e0:	0800841d 	.word	0x0800841d
 80083e4:	0800841d 	.word	0x0800841d
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	08008425 	.word	0x08008425
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f4:	3308      	adds	r3, #8
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 ffc3 	bl	8009384 <RCCEx_PLL2_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008404:	e00f      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840a:	3328      	adds	r3, #40	@ 0x28
 800840c:	2101      	movs	r1, #1
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f86a 	bl	80094e8 <RCCEx_PLL3_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800841a:	e004      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008422:	e000      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800842e:	4bbf      	ldr	r3, [pc, #764]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008432:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800843c:	4abb      	ldr	r2, [pc, #748]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800843e:	430b      	orrs	r3, r1
 8008440:	6553      	str	r3, [r2, #84]	@ 0x54
 8008442:	e003      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f002 0302 	and.w	r3, r2, #2
 8008458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008462:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008466:	460b      	mov	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	d041      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008472:	2b05      	cmp	r3, #5
 8008474:	d824      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084c9 	.word	0x080084c9
 8008480:	08008495 	.word	0x08008495
 8008484:	080084ab 	.word	0x080084ab
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008498:	3308      	adds	r3, #8
 800849a:	2101      	movs	r1, #1
 800849c:	4618      	mov	r0, r3
 800849e:	f000 ff71 	bl	8009384 <RCCEx_PLL2_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084a8:	e00f      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	3328      	adds	r3, #40	@ 0x28
 80084b0:	2101      	movs	r1, #1
 80084b2:	4618      	mov	r0, r3
 80084b4:	f001 f818 	bl	80094e8 <RCCEx_PLL3_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084be:	e004      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c6:	e000      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80084c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084d2:	4b96      	ldr	r3, [pc, #600]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d6:	f023 0107 	bic.w	r1, r3, #7
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e0:	4a92      	ldr	r2, [pc, #584]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f002 0304 	and.w	r3, r2, #4
 80084fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008506:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d044      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008518:	2b05      	cmp	r3, #5
 800851a:	d825      	bhi.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008571 	.word	0x08008571
 8008528:	0800853d 	.word	0x0800853d
 800852c:	08008553 	.word	0x08008553
 8008530:	08008571 	.word	0x08008571
 8008534:	08008571 	.word	0x08008571
 8008538:	08008571 	.word	0x08008571
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	3308      	adds	r3, #8
 8008542:	2101      	movs	r1, #1
 8008544:	4618      	mov	r0, r3
 8008546:	f000 ff1d 	bl	8009384 <RCCEx_PLL2_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008550:	e00f      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008556:	3328      	adds	r3, #40	@ 0x28
 8008558:	2101      	movs	r1, #1
 800855a:	4618      	mov	r0, r3
 800855c:	f000 ffc4 	bl	80094e8 <RCCEx_PLL3_Config>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008566:	e004      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800856e:	e000      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800857a:	4b6c      	ldr	r3, [pc, #432]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800857c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857e:	f023 0107 	bic.w	r1, r3, #7
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800858a:	4a68      	ldr	r2, [pc, #416]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800858c:	430b      	orrs	r3, r1
 800858e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008590:	e003      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f002 0320 	and.w	r3, r2, #32
 80085a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085b4:	460b      	mov	r3, r1
 80085b6:	4313      	orrs	r3, r2
 80085b8:	d055      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085c6:	d033      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085cc:	d82c      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d02f      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d8:	d826      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085de:	d02b      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80085e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085e4:	d820      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ea:	d012      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085f0:	d81a      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d022      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80085f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085fa:	d115      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008600:	3308      	adds	r3, #8
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f000 febd 	bl	8009384 <RCCEx_PLL2_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008610:	e015      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	3328      	adds	r3, #40	@ 0x28
 8008618:	2102      	movs	r1, #2
 800861a:	4618      	mov	r0, r3
 800861c:	f000 ff64 	bl	80094e8 <RCCEx_PLL3_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008626:	e00a      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800862e:	e006      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008630:	bf00      	nop
 8008632:	e004      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800863c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008646:	4b39      	ldr	r3, [pc, #228]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008656:	4a35      	ldr	r2, [pc, #212]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008658:	430b      	orrs	r3, r1
 800865a:	6553      	str	r3, [r2, #84]	@ 0x54
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800867c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d058      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800868e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008692:	d033      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008694:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008698:	d82c      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800869a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800869e:	d02f      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a4:	d826      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086aa:	d02b      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80086ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086b0:	d820      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b6:	d012      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80086b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086bc:	d81a      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d022      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c6:	d115      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086cc:	3308      	adds	r3, #8
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 fe57 	bl	8009384 <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086dc:	e015      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	3328      	adds	r3, #40	@ 0x28
 80086e4:	2102      	movs	r1, #2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fefe 	bl	80094e8 <RCCEx_PLL3_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086f2:	e00a      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086fa:	e006      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086fc:	bf00      	nop
 80086fe:	e004      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800870a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10e      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008712:	4b06      	ldr	r3, [pc, #24]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008716:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008722:	4a02      	ldr	r2, [pc, #8]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008724:	430b      	orrs	r3, r1
 8008726:	6593      	str	r3, [r2, #88]	@ 0x58
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800874e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008752:	460b      	mov	r3, r1
 8008754:	4313      	orrs	r3, r2
 8008756:	d055      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008760:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008764:	d033      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008766:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800876a:	d82c      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008770:	d02f      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008776:	d826      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008778:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800877c:	d02b      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800877e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008782:	d820      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008788:	d012      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800878e:	d81a      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d022      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008798:	d115      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	3308      	adds	r3, #8
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fdee 	bl	8009384 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087ae:	e015      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b4:	3328      	adds	r3, #40	@ 0x28
 80087b6:	2102      	movs	r1, #2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fe95 	bl	80094e8 <RCCEx_PLL3_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087c4:	e00a      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087cc:	e006      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087ce:	bf00      	nop
 80087d0:	e004      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10b      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087e4:	4ba1      	ldr	r3, [pc, #644]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087f4:	4a9d      	ldr	r2, [pc, #628]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f6:	430b      	orrs	r3, r1
 80087f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f002 0308 	and.w	r3, r2, #8
 8008810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800881a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800881e:	460b      	mov	r3, r1
 8008820:	4313      	orrs	r3, r2
 8008822:	d01e      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008830:	d10c      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	3328      	adds	r3, #40	@ 0x28
 8008838:	2102      	movs	r1, #2
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fe54 	bl	80094e8 <RCCEx_PLL3_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800884c:	4b87      	ldr	r3, [pc, #540]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008850:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800885c:	4a83      	ldr	r2, [pc, #524]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800885e:	430b      	orrs	r3, r1
 8008860:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f002 0310 	and.w	r3, r2, #16
 800886e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008872:	2300      	movs	r3, #0
 8008874:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008878:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800887c:	460b      	mov	r3, r1
 800887e:	4313      	orrs	r3, r2
 8008880:	d01e      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800888a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888e:	d10c      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008894:	3328      	adds	r3, #40	@ 0x28
 8008896:	2102      	movs	r1, #2
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fe25 	bl	80094e8 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088aa:	4b70      	ldr	r3, [pc, #448]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ba:	4a6c      	ldr	r2, [pc, #432]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088bc:	430b      	orrs	r3, r1
 80088be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088da:	460b      	mov	r3, r1
 80088dc:	4313      	orrs	r3, r2
 80088de:	d03e      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ec:	d022      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80088ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088f2:	d81b      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80088f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088fc:	d00b      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80088fe:	e015      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008904:	3308      	adds	r3, #8
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fd3b 	bl	8009384 <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008914:	e00f      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891a:	3328      	adds	r3, #40	@ 0x28
 800891c:	2102      	movs	r1, #2
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fde2 	bl	80094e8 <RCCEx_PLL3_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800892a:	e004      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008932:	e000      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800893e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008942:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800894e:	4a47      	ldr	r2, [pc, #284]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008950:	430b      	orrs	r3, r1
 8008952:	6593      	str	r3, [r2, #88]	@ 0x58
 8008954:	e003      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800896a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800896c:	2300      	movs	r3, #0
 800896e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008970:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d03b      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008986:	d01f      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008988:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800898c:	d818      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800898e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008992:	d003      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008994:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008998:	d007      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800899a:	e011      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899c:	4b33      	ldr	r3, [pc, #204]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	4a32      	ldr	r2, [pc, #200]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089a8:	e00f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ae:	3328      	adds	r3, #40	@ 0x28
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fd98 	bl	80094e8 <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089d2:	4b26      	ldr	r3, [pc, #152]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e2:	4a22      	ldr	r2, [pc, #136]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80089fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a00:	2300      	movs	r3, #0
 8008a02:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	d034      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a1c:	d007      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a1e:	e011      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4b12      	ldr	r3, [pc, #72]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	4a11      	ldr	r2, [pc, #68]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a2c:	e00e      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a32:	3308      	adds	r3, #8
 8008a34:	2102      	movs	r1, #2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fca4 	bl	8009384 <RCCEx_PLL2_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a42:	e003      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a62:	4a02      	ldr	r2, [pc, #8]	@ (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a68:	e006      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a86:	2300      	movs	r3, #0
 8008a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d00c      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a98:	3328      	adds	r3, #40	@ 0x28
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fd23 	bl	80094e8 <RCCEx_PLL3_Config>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8008abc:	2300      	movs	r3, #0
 8008abe:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ac0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	d038      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ad6:	d018      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008adc:	d811      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae2:	d014      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae8:	d80b      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d011      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af2:	d106      	bne.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af4:	4bc3      	ldr	r3, [pc, #780]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af8:	4ac2      	ldr	r2, [pc, #776]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b00:	e008      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b08:	e004      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10b      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b1c:	4bb9      	ldr	r3, [pc, #740]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b2c:	4ab5      	ldr	r2, [pc, #724]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b32:	e003      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b58:	4baa      	ldr	r3, [pc, #680]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b66:	4aa7      	ldr	r2, [pc, #668]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b88:	4b9e      	ldr	r3, [pc, #632]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008b98:	4a9a      	ldr	r2, [pc, #616]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bac:	2300      	movs	r3, #0
 8008bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bba:	4b92      	ldr	r3, [pc, #584]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bdc:	2300      	movs	r3, #0
 8008bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8008be0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d00e      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bea:	4b86      	ldr	r3, [pc, #536]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	4a85      	ldr	r2, [pc, #532]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bf4:	6113      	str	r3, [r2, #16]
 8008bf6:	4b83      	ldr	r3, [pc, #524]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf8:	6919      	ldr	r1, [r3, #16]
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c02:	4a80      	ldr	r2, [pc, #512]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d009      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c24:	4b77      	ldr	r3, [pc, #476]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c32:	4a74      	ldr	r2, [pc, #464]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c46:	2300      	movs	r3, #0
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d00a      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c54:	4b6b      	ldr	r3, [pc, #428]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c64:	4a67      	ldr	r2, [pc, #412]	@ (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	2100      	movs	r1, #0
 8008c74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c80:	460b      	mov	r3, r1
 8008c82:	4313      	orrs	r3, r2
 8008c84:	d011      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fb78 	bl	8009384 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6239      	str	r1, [r7, #32]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	d011      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cca:	3308      	adds	r3, #8
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fb58 	bl	8009384 <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	61b9      	str	r1, [r7, #24]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d00:	460b      	mov	r3, r1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	d011      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fb38 	bl	8009384 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	2100      	movs	r1, #0
 8008d34:	6139      	str	r1, [r7, #16]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d40:	460b      	mov	r3, r1
 8008d42:	4313      	orrs	r3, r2
 8008d44:	d011      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4a:	3328      	adds	r3, #40	@ 0x28
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fbca 	bl	80094e8 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	2100      	movs	r1, #0
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d80:	460b      	mov	r3, r1
 8008d82:	4313      	orrs	r3, r2
 8008d84:	d011      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8a:	3328      	adds	r3, #40	@ 0x28
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fbaa 	bl	80094e8 <RCCEx_PLL3_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	2100      	movs	r1, #0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d011      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	3328      	adds	r3, #40	@ 0x28
 8008dcc:	2102      	movs	r1, #2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fb8a 	bl	80094e8 <RCCEx_PLL3_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008dea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e000      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e04:	58024400 	.word	0x58024400

08008e08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e0c:	f7fe fd54 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	091b      	lsrs	r3, r3, #4
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	4904      	ldr	r1, [pc, #16]	@ (8008e30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e1e:	5ccb      	ldrb	r3, [r1, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	0801701c 	.word	0x0801701c

08008e34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b089      	sub	sp, #36	@ 0x24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e3c:	4ba1      	ldr	r3, [pc, #644]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008e46:	4b9f      	ldr	r3, [pc, #636]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	0b1b      	lsrs	r3, r3, #12
 8008e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e52:	4b9c      	ldr	r3, [pc, #624]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	091b      	lsrs	r3, r3, #4
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008e5e:	4b99      	ldr	r3, [pc, #612]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e62:	08db      	lsrs	r3, r3, #3
 8008e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	fb02 f303 	mul.w	r3, r2, r3
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8111 	beq.w	80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	f000 8083 	beq.w	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	f200 80a1 	bhi.w	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d056      	beq.n	8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e9e:	e099      	b.n	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea0:	4b88      	ldr	r3, [pc, #544]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d02d      	beq.n	8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eac:	4b85      	ldr	r3, [pc, #532]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	08db      	lsrs	r3, r3, #3
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	4a84      	ldr	r2, [pc, #528]	@ (80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f06:	e087      	b.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f4a:	e065      	b.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5e:	4b59      	ldr	r3, [pc, #356]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8e:	e043      	b.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa2:	4b48      	ldr	r3, [pc, #288]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd2:	e021      	b.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b37      	ldr	r3, [pc, #220]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009016:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009018:	4b2a      	ldr	r3, [pc, #168]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	0a5b      	lsrs	r3, r3, #9
 800901e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800902e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009032:	edd7 6a07 	vldr	s13, [r7, #28]
 8009036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800903a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800903e:	ee17 2a90 	vmov	r2, s15
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009046:	4b1f      	ldr	r3, [pc, #124]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800905c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009060:	edd7 6a07 	vldr	s13, [r7, #28]
 8009064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906c:	ee17 2a90 	vmov	r2, s15
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009074:	4b13      	ldr	r3, [pc, #76]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	0e1b      	lsrs	r3, r3, #24
 800907a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800908a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800908e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800909a:	ee17 2a90 	vmov	r2, s15
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090a2:	e008      	b.n	80090b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	609a      	str	r2, [r3, #8]
}
 80090b6:	bf00      	nop
 80090b8:	3724      	adds	r7, #36	@ 0x24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	58024400 	.word	0x58024400
 80090c8:	03d09000 	.word	0x03d09000
 80090cc:	46000000 	.word	0x46000000
 80090d0:	4c742400 	.word	0x4c742400
 80090d4:	4a742400 	.word	0x4a742400
 80090d8:	4af42400 	.word	0x4af42400

080090dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80090dc:	b480      	push	{r7}
 80090de:	b089      	sub	sp, #36	@ 0x24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090e4:	4ba1      	ldr	r3, [pc, #644]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80090ee:	4b9f      	ldr	r3, [pc, #636]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	0d1b      	lsrs	r3, r3, #20
 80090f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090fa:	4b9c      	ldr	r3, [pc, #624]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009106:	4b99      	ldr	r3, [pc, #612]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910a:	08db      	lsrs	r3, r3, #3
 800910c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8111 	beq.w	800934c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b02      	cmp	r3, #2
 800912e:	f000 8083 	beq.w	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	2b02      	cmp	r3, #2
 8009136:	f200 80a1 	bhi.w	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d056      	beq.n	80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009146:	e099      	b.n	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009148:	4b88      	ldr	r3, [pc, #544]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d02d      	beq.n	80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009154:	4b85      	ldr	r3, [pc, #532]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	4a84      	ldr	r2, [pc, #528]	@ (8009370 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
 8009164:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917e:	4b7b      	ldr	r3, [pc, #492]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009192:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091ae:	e087      	b.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b6a      	ldr	r3, [pc, #424]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f2:	e065      	b.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800937c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b59      	ldr	r3, [pc, #356]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a03 	vldr	s12, [r7, #12]
 800921a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009236:	e043      	b.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b48      	ldr	r3, [pc, #288]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a03 	vldr	s12, [r7, #12]
 800925e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927a:	e021      	b.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800937c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b37      	ldr	r3, [pc, #220]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80092c0:	4b2a      	ldr	r3, [pc, #168]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	0a5b      	lsrs	r3, r3, #9
 80092c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092da:	edd7 6a07 	vldr	s13, [r7, #28]
 80092de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e6:	ee17 2a90 	vmov	r2, s15
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80092ee:	4b1f      	ldr	r3, [pc, #124]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f2:	0c1b      	lsrs	r3, r3, #16
 80092f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009304:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009308:	edd7 6a07 	vldr	s13, [r7, #28]
 800930c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009314:	ee17 2a90 	vmov	r2, s15
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800931c:	4b13      	ldr	r3, [pc, #76]	@ (800936c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800931e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009320:	0e1b      	lsrs	r3, r3, #24
 8009322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009336:	edd7 6a07 	vldr	s13, [r7, #28]
 800933a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800933e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009342:	ee17 2a90 	vmov	r2, s15
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800934a:	e008      	b.n	800935e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	609a      	str	r2, [r3, #8]
}
 800935e:	bf00      	nop
 8009360:	3724      	adds	r7, #36	@ 0x24
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	58024400 	.word	0x58024400
 8009370:	03d09000 	.word	0x03d09000
 8009374:	46000000 	.word	0x46000000
 8009378:	4c742400 	.word	0x4c742400
 800937c:	4a742400 	.word	0x4a742400
 8009380:	4af42400 	.word	0x4af42400

08009384 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009392:	4b53      	ldr	r3, [pc, #332]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b03      	cmp	r3, #3
 800939c:	d101      	bne.n	80093a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e099      	b.n	80094d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093a2:	4b4f      	ldr	r3, [pc, #316]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a4e      	ldr	r2, [pc, #312]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ae:	f7fb fc25 	bl	8004bfc <HAL_GetTick>
 80093b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093b4:	e008      	b.n	80093c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093b6:	f7fb fc21 	bl	8004bfc <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e086      	b.n	80094d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093c8:	4b45      	ldr	r3, [pc, #276]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1f0      	bne.n	80093b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093d4:	4b42      	ldr	r3, [pc, #264]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	031b      	lsls	r3, r3, #12
 80093e2:	493f      	ldr	r1, [pc, #252]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	025b      	lsls	r3, r3, #9
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	3b01      	subs	r3, #1
 8009404:	041b      	lsls	r3, r3, #16
 8009406:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	3b01      	subs	r3, #1
 8009412:	061b      	lsls	r3, r3, #24
 8009414:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009418:	4931      	ldr	r1, [pc, #196]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800941a:	4313      	orrs	r3, r2
 800941c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800941e:	4b30      	ldr	r3, [pc, #192]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	492d      	ldr	r1, [pc, #180]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800942c:	4313      	orrs	r3, r2
 800942e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009430:	4b2b      	ldr	r3, [pc, #172]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	f023 0220 	bic.w	r2, r3, #32
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4928      	ldr	r1, [pc, #160]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009442:	4b27      	ldr	r3, [pc, #156]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	4a26      	ldr	r2, [pc, #152]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009448:	f023 0310 	bic.w	r3, r3, #16
 800944c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800944e:	4b24      	ldr	r3, [pc, #144]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009452:	4b24      	ldr	r3, [pc, #144]	@ (80094e4 <RCCEx_PLL2_Config+0x160>)
 8009454:	4013      	ands	r3, r2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	69d2      	ldr	r2, [r2, #28]
 800945a:	00d2      	lsls	r2, r2, #3
 800945c:	4920      	ldr	r1, [pc, #128]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800945e:	4313      	orrs	r3, r2
 8009460:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009462:	4b1f      	ldr	r3, [pc, #124]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	4a1e      	ldr	r2, [pc, #120]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009468:	f043 0310 	orr.w	r3, r3, #16
 800946c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009474:	4b1a      	ldr	r3, [pc, #104]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	4a19      	ldr	r2, [pc, #100]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800947a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800947e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009480:	e00f      	b.n	80094a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d106      	bne.n	8009496 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009488:	4b15      	ldr	r3, [pc, #84]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	4a14      	ldr	r2, [pc, #80]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800948e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009494:	e005      	b.n	80094a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009496:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	4a11      	ldr	r2, [pc, #68]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 800949c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094a2:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a0e      	ldr	r2, [pc, #56]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80094a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ae:	f7fb fba5 	bl	8004bfc <HAL_GetTick>
 80094b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094b4:	e008      	b.n	80094c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094b6:	f7fb fba1 	bl	8004bfc <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d901      	bls.n	80094c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e006      	b.n	80094d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094c8:	4b05      	ldr	r3, [pc, #20]	@ (80094e0 <RCCEx_PLL2_Config+0x15c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0f0      	beq.n	80094b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	58024400 	.word	0x58024400
 80094e4:	ffff0007 	.word	0xffff0007

080094e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094f6:	4b53      	ldr	r3, [pc, #332]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80094f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d101      	bne.n	8009506 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e099      	b.n	800963a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009506:	4b4f      	ldr	r3, [pc, #316]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a4e      	ldr	r2, [pc, #312]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800950c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009512:	f7fb fb73 	bl	8004bfc <HAL_GetTick>
 8009516:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009518:	e008      	b.n	800952c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800951a:	f7fb fb6f 	bl	8004bfc <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e086      	b.n	800963a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800952c:	4b45      	ldr	r3, [pc, #276]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f0      	bne.n	800951a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009538:	4b42      	ldr	r3, [pc, #264]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	493f      	ldr	r1, [pc, #252]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009548:	4313      	orrs	r3, r2
 800954a:	628b      	str	r3, [r1, #40]	@ 0x28
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	3b01      	subs	r3, #1
 8009552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	3b01      	subs	r3, #1
 800955c:	025b      	lsls	r3, r3, #9
 800955e:	b29b      	uxth	r3, r3
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	3b01      	subs	r3, #1
 8009568:	041b      	lsls	r3, r3, #16
 800956a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	3b01      	subs	r3, #1
 8009576:	061b      	lsls	r3, r3, #24
 8009578:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800957c:	4931      	ldr	r1, [pc, #196]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800957e:	4313      	orrs	r3, r2
 8009580:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009582:	4b30      	ldr	r3, [pc, #192]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009586:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	492d      	ldr	r1, [pc, #180]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009590:	4313      	orrs	r3, r2
 8009592:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009594:	4b2b      	ldr	r3, [pc, #172]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	4928      	ldr	r1, [pc, #160]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095a6:	4b27      	ldr	r3, [pc, #156]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	4a26      	ldr	r2, [pc, #152]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095b2:	4b24      	ldr	r3, [pc, #144]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095b6:	4b24      	ldr	r3, [pc, #144]	@ (8009648 <RCCEx_PLL3_Config+0x160>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	69d2      	ldr	r2, [r2, #28]
 80095be:	00d2      	lsls	r2, r2, #3
 80095c0:	4920      	ldr	r1, [pc, #128]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d106      	bne.n	80095e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095dc:	4a19      	ldr	r2, [pc, #100]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095e4:	e00f      	b.n	8009606 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d106      	bne.n	80095fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095ec:	4b15      	ldr	r3, [pc, #84]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	4a14      	ldr	r2, [pc, #80]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095f8:	e005      	b.n	8009606 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095fa:	4b12      	ldr	r3, [pc, #72]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	4a11      	ldr	r2, [pc, #68]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009600:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009604:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009606:	4b0f      	ldr	r3, [pc, #60]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a0e      	ldr	r2, [pc, #56]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800960c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009612:	f7fb faf3 	bl	8004bfc <HAL_GetTick>
 8009616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009618:	e008      	b.n	800962c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800961a:	f7fb faef 	bl	8004bfc <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e006      	b.n	800963a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800962c:	4b05      	ldr	r3, [pc, #20]	@ (8009644 <RCCEx_PLL3_Config+0x15c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0f0      	beq.n	800961a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	58024400 	.word	0x58024400
 8009648:	ffff0007 	.word	0xffff0007

0800964c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e049      	b.n	80096f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fa ff44 	bl	8004500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f000 ff32 	bl	800a4f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	d001      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e054      	b.n	80097be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a26      	ldr	r2, [pc, #152]	@ (80097cc <HAL_TIM_Base_Start_IT+0xd0>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d022      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973e:	d01d      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a22      	ldr	r2, [pc, #136]	@ (80097d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d018      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a21      	ldr	r2, [pc, #132]	@ (80097d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d013      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a1f      	ldr	r2, [pc, #124]	@ (80097d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d00e      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a1e      	ldr	r2, [pc, #120]	@ (80097dc <HAL_TIM_Base_Start_IT+0xe0>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d009      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a1c      	ldr	r2, [pc, #112]	@ (80097e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d004      	beq.n	800977c <HAL_TIM_Base_Start_IT+0x80>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a1b      	ldr	r2, [pc, #108]	@ (80097e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d115      	bne.n	80097a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	4b19      	ldr	r3, [pc, #100]	@ (80097e8 <HAL_TIM_Base_Start_IT+0xec>)
 8009784:	4013      	ands	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b06      	cmp	r3, #6
 800978c:	d015      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0xbe>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009794:	d011      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0201 	orr.w	r2, r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a6:	e008      	b.n	80097ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0201 	orr.w	r2, r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	e000      	b.n	80097bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40000400 	.word	0x40000400
 80097d4:	40000800 	.word	0x40000800
 80097d8:	40000c00 	.word	0x40000c00
 80097dc:	40010400 	.word	0x40010400
 80097e0:	40001800 	.word	0x40001800
 80097e4:	40014000 	.word	0x40014000
 80097e8:	00010007 	.word	0x00010007

080097ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e049      	b.n	8009892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fa fe3a 	bl	800448c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f000 fe62 	bl	800a4f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_TIM_PWM_Start+0x24>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	e03c      	b.n	800993a <HAL_TIM_PWM_Start+0x9e>
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d109      	bne.n	80098da <HAL_TIM_PWM_Start+0x3e>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	bf14      	ite	ne
 80098d2:	2301      	movne	r3, #1
 80098d4:	2300      	moveq	r3, #0
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	e02f      	b.n	800993a <HAL_TIM_PWM_Start+0x9e>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d109      	bne.n	80098f4 <HAL_TIM_PWM_Start+0x58>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e022      	b.n	800993a <HAL_TIM_PWM_Start+0x9e>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b0c      	cmp	r3, #12
 80098f8:	d109      	bne.n	800990e <HAL_TIM_PWM_Start+0x72>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	bf14      	ite	ne
 8009906:	2301      	movne	r3, #1
 8009908:	2300      	moveq	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	e015      	b.n	800993a <HAL_TIM_PWM_Start+0x9e>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b10      	cmp	r3, #16
 8009912:	d109      	bne.n	8009928 <HAL_TIM_PWM_Start+0x8c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b01      	cmp	r3, #1
 800991e:	bf14      	ite	ne
 8009920:	2301      	movne	r3, #1
 8009922:	2300      	moveq	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	e008      	b.n	800993a <HAL_TIM_PWM_Start+0x9e>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b01      	cmp	r3, #1
 8009932:	bf14      	ite	ne
 8009934:	2301      	movne	r3, #1
 8009936:	2300      	moveq	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0a1      	b.n	8009a86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <HAL_TIM_PWM_Start+0xb6>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009950:	e023      	b.n	800999a <HAL_TIM_PWM_Start+0xfe>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b04      	cmp	r3, #4
 8009956:	d104      	bne.n	8009962 <HAL_TIM_PWM_Start+0xc6>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009960:	e01b      	b.n	800999a <HAL_TIM_PWM_Start+0xfe>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b08      	cmp	r3, #8
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Start+0xd6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009970:	e013      	b.n	800999a <HAL_TIM_PWM_Start+0xfe>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b0c      	cmp	r3, #12
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0xe6>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009980:	e00b      	b.n	800999a <HAL_TIM_PWM_Start+0xfe>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b10      	cmp	r3, #16
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Start+0xf6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009990:	e003      	b.n	800999a <HAL_TIM_PWM_Start+0xfe>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2201      	movs	r2, #1
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 f9c0 	bl	800ad28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a38      	ldr	r2, [pc, #224]	@ (8009a90 <HAL_TIM_PWM_Start+0x1f4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <HAL_TIM_PWM_Start+0x13e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a37      	ldr	r2, [pc, #220]	@ (8009a94 <HAL_TIM_PWM_Start+0x1f8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00e      	beq.n	80099da <HAL_TIM_PWM_Start+0x13e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a35      	ldr	r2, [pc, #212]	@ (8009a98 <HAL_TIM_PWM_Start+0x1fc>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d009      	beq.n	80099da <HAL_TIM_PWM_Start+0x13e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a34      	ldr	r2, [pc, #208]	@ (8009a9c <HAL_TIM_PWM_Start+0x200>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d004      	beq.n	80099da <HAL_TIM_PWM_Start+0x13e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a32      	ldr	r2, [pc, #200]	@ (8009aa0 <HAL_TIM_PWM_Start+0x204>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d101      	bne.n	80099de <HAL_TIM_PWM_Start+0x142>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <HAL_TIM_PWM_Start+0x144>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a25      	ldr	r2, [pc, #148]	@ (8009a90 <HAL_TIM_PWM_Start+0x1f4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a06:	d01d      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a25      	ldr	r2, [pc, #148]	@ (8009aa4 <HAL_TIM_PWM_Start+0x208>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a24      	ldr	r2, [pc, #144]	@ (8009aa8 <HAL_TIM_PWM_Start+0x20c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a22      	ldr	r2, [pc, #136]	@ (8009aac <HAL_TIM_PWM_Start+0x210>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a94 <HAL_TIM_PWM_Start+0x1f8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab0 <HAL_TIM_PWM_Start+0x214>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIM_PWM_Start+0x1a8>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a16      	ldr	r2, [pc, #88]	@ (8009a98 <HAL_TIM_PWM_Start+0x1fc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d115      	bne.n	8009a70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689a      	ldr	r2, [r3, #8]
 8009a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab4 <HAL_TIM_PWM_Start+0x218>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d015      	beq.n	8009a82 <HAL_TIM_PWM_Start+0x1e6>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a5c:	d011      	beq.n	8009a82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	e008      	b.n	8009a82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e000      	b.n	8009a84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40010400 	.word	0x40010400
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	40014400 	.word	0x40014400
 8009aa0:	40014800 	.word	0x40014800
 8009aa4:	40000400 	.word	0x40000400
 8009aa8:	40000800 	.word	0x40000800
 8009aac:	40000c00 	.word	0x40000c00
 8009ab0:	40001800 	.word	0x40001800
 8009ab4:	00010007 	.word	0x00010007

08009ab8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e08f      	b.n	8009bec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fa fbc1 	bl	8004268 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6899      	ldr	r1, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf4 <HAL_TIM_Encoder_Init+0x13c>)
 8009afa:	400b      	ands	r3, r1
 8009afc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f000 fcf3 	bl	800a4f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4b31      	ldr	r3, [pc, #196]	@ (8009bf8 <HAL_TIM_Encoder_Init+0x140>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	021b      	lsls	r3, r3, #8
 8009b42:	4313      	orrs	r3, r2
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009bfc <HAL_TIM_Encoder_Init+0x144>)
 8009b4e:	4013      	ands	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4b2a      	ldr	r3, [pc, #168]	@ (8009c00 <HAL_TIM_Encoder_Init+0x148>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	4313      	orrs	r3, r2
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	011a      	lsls	r2, r3, #4
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	031b      	lsls	r3, r3, #12
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	fffebff8 	.word	0xfffebff8
 8009bf8:	fffffcfc 	.word	0xfffffcfc
 8009bfc:	fffff3f3 	.word	0xfffff3f3
 8009c00:	ffff0f0f 	.word	0xffff0f0f

08009c04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d110      	bne.n	8009c56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d102      	bne.n	8009c40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c3a:	7b7b      	ldrb	r3, [r7, #13]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d001      	beq.n	8009c44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e069      	b.n	8009d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c54:	e031      	b.n	8009cba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d110      	bne.n	8009c7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d102      	bne.n	8009c68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c62:	7b3b      	ldrb	r3, [r7, #12]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d001      	beq.n	8009c6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e055      	b.n	8009d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c7c:	e01d      	b.n	8009cba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d108      	bne.n	8009c96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d105      	bne.n	8009c96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c8a:	7b7b      	ldrb	r3, [r7, #13]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d102      	bne.n	8009c96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c90:	7b3b      	ldrb	r3, [r7, #12]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d001      	beq.n	8009c9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e03e      	b.n	8009d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_TIM_Encoder_Start+0xc4>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d008      	beq.n	8009cd8 <HAL_TIM_Encoder_Start+0xd4>
 8009cc6:	e00f      	b.n	8009ce8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 f829 	bl	800ad28 <TIM_CCxChannelCmd>
      break;
 8009cd6:	e016      	b.n	8009d06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	2104      	movs	r1, #4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f821 	bl	800ad28 <TIM_CCxChannelCmd>
      break;
 8009ce6:	e00e      	b.n	8009d06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2201      	movs	r2, #1
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 f819 	bl	800ad28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	2104      	movs	r1, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 f812 	bl	800ad28 <TIM_CCxChannelCmd>
      break;
 8009d04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0201 	orr.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d110      	bne.n	8009d72 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d102      	bne.n	8009d5c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d56:	7b7b      	ldrb	r3, [r7, #13]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d001      	beq.n	8009d60 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e089      	b.n	8009e74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d70:	e031      	b.n	8009dd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d110      	bne.n	8009d9a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d102      	bne.n	8009d84 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d7e:	7b3b      	ldrb	r3, [r7, #12]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d001      	beq.n	8009d88 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e075      	b.n	8009e74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d98:	e01d      	b.n	8009dd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d108      	bne.n	8009db2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d105      	bne.n	8009db2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009da6:	7b7b      	ldrb	r3, [r7, #13]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d102      	bne.n	8009db2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dac:	7b3b      	ldrb	r3, [r7, #12]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d001      	beq.n	8009db6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e05e      	b.n	8009e74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d010      	beq.n	8009e04 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009de2:	e01f      	b.n	8009e24 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ff9b 	bl	800ad28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68da      	ldr	r2, [r3, #12]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0202 	orr.w	r2, r2, #2
 8009e00:	60da      	str	r2, [r3, #12]
      break;
 8009e02:	e02e      	b.n	8009e62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	2104      	movs	r1, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 ff8b 	bl	800ad28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0204 	orr.w	r2, r2, #4
 8009e20:	60da      	str	r2, [r3, #12]
      break;
 8009e22:	e01e      	b.n	8009e62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 ff7b 	bl	800ad28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2201      	movs	r2, #1
 8009e38:	2104      	movs	r1, #4
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 ff74 	bl	800ad28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0202 	orr.w	r2, r2, #2
 8009e4e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0204 	orr.w	r2, r2, #4
 8009e5e:	60da      	str	r2, [r3, #12]
      break;
 8009e60:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0201 	orr.w	r2, r2, #1
 8009e70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d020      	beq.n	8009ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f003 0302 	and.w	r3, r3, #2
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01b      	beq.n	8009ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f06f 0202 	mvn.w	r2, #2
 8009eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 faf6 	bl	800a4b8 <HAL_TIM_IC_CaptureCallback>
 8009ecc:	e005      	b.n	8009eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fae8 	bl	800a4a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 faf9 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f003 0304 	and.w	r3, r3, #4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d020      	beq.n	8009f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01b      	beq.n	8009f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0204 	mvn.w	r2, #4
 8009efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2202      	movs	r2, #2
 8009f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fad0 	bl	800a4b8 <HAL_TIM_IC_CaptureCallback>
 8009f18:	e005      	b.n	8009f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fac2 	bl	800a4a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fad3 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d020      	beq.n	8009f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f003 0308 	and.w	r3, r3, #8
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01b      	beq.n	8009f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f06f 0208 	mvn.w	r2, #8
 8009f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2204      	movs	r2, #4
 8009f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 faaa 	bl	800a4b8 <HAL_TIM_IC_CaptureCallback>
 8009f64:	e005      	b.n	8009f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa9c 	bl	800a4a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 faad 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d020      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01b      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f06f 0210 	mvn.w	r2, #16
 8009f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa84 	bl	800a4b8 <HAL_TIM_IC_CaptureCallback>
 8009fb0:	e005      	b.n	8009fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa76 	bl	800a4a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fa87 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00c      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f06f 0201 	mvn.w	r2, #1
 8009fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fa f878 	bl	80040d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 ffc5 	bl	800afa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00c      	beq.n	800a03a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 ffbd 	bl	800afb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d007      	beq.n	800a05e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fa41 	bl	800a4e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f003 0320 	and.w	r3, r3, #32
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00c      	beq.n	800a082 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d007      	beq.n	800a082 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f06f 0220 	mvn.w	r2, #32
 800a07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 ff85 	bl	800af8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e0ff      	b.n	800a2aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b14      	cmp	r3, #20
 800a0b6:	f200 80f0 	bhi.w	800a29a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a115 	.word	0x0800a115
 800a0c4:	0800a29b 	.word	0x0800a29b
 800a0c8:	0800a29b 	.word	0x0800a29b
 800a0cc:	0800a29b 	.word	0x0800a29b
 800a0d0:	0800a155 	.word	0x0800a155
 800a0d4:	0800a29b 	.word	0x0800a29b
 800a0d8:	0800a29b 	.word	0x0800a29b
 800a0dc:	0800a29b 	.word	0x0800a29b
 800a0e0:	0800a197 	.word	0x0800a197
 800a0e4:	0800a29b 	.word	0x0800a29b
 800a0e8:	0800a29b 	.word	0x0800a29b
 800a0ec:	0800a29b 	.word	0x0800a29b
 800a0f0:	0800a1d7 	.word	0x0800a1d7
 800a0f4:	0800a29b 	.word	0x0800a29b
 800a0f8:	0800a29b 	.word	0x0800a29b
 800a0fc:	0800a29b 	.word	0x0800a29b
 800a100:	0800a219 	.word	0x0800a219
 800a104:	0800a29b 	.word	0x0800a29b
 800a108:	0800a29b 	.word	0x0800a29b
 800a10c:	0800a29b 	.word	0x0800a29b
 800a110:	0800a259 	.word	0x0800a259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fa90 	bl	800a640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699a      	ldr	r2, [r3, #24]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0208 	orr.w	r2, r2, #8
 800a12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699a      	ldr	r2, [r3, #24]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0204 	bic.w	r2, r2, #4
 800a13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6999      	ldr	r1, [r3, #24]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	619a      	str	r2, [r3, #24]
      break;
 800a152:	e0a5      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fb00 	bl	800a760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a16e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	699a      	ldr	r2, [r3, #24]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a17e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6999      	ldr	r1, [r3, #24]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	021a      	lsls	r2, r3, #8
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	619a      	str	r2, [r3, #24]
      break;
 800a194:	e084      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fb69 	bl	800a874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	69da      	ldr	r2, [r3, #28]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 0208 	orr.w	r2, r2, #8
 800a1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	69da      	ldr	r2, [r3, #28]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0204 	bic.w	r2, r2, #4
 800a1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69d9      	ldr	r1, [r3, #28]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	61da      	str	r2, [r3, #28]
      break;
 800a1d4:	e064      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fbd1 	bl	800a984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69da      	ldr	r2, [r3, #28]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69d9      	ldr	r1, [r3, #28]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	021a      	lsls	r2, r3, #8
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	61da      	str	r2, [r3, #28]
      break;
 800a216:	e043      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fc1a 	bl	800aa58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0208 	orr.w	r2, r2, #8
 800a232:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0204 	bic.w	r2, r2, #4
 800a242:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a256:	e023      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fc5e 	bl	800ab20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a272:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a282:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	021a      	lsls	r2, r3, #8
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a298:	e002      	b.n	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
      break;
 800a29e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop

0800a2b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e0dc      	b.n	800a48a <HAL_TIM_ConfigClockSource+0x1d6>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	4b6a      	ldr	r3, [pc, #424]	@ (800a494 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a64      	ldr	r2, [pc, #400]	@ (800a498 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a306:	4293      	cmp	r3, r2
 800a308:	f000 80a9 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a30c:	4a62      	ldr	r2, [pc, #392]	@ (800a498 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	f200 80ae 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a314:	4a61      	ldr	r2, [pc, #388]	@ (800a49c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	f000 80a1 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a31c:	4a5f      	ldr	r2, [pc, #380]	@ (800a49c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	f200 80a6 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a324:	4a5e      	ldr	r2, [pc, #376]	@ (800a4a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a326:	4293      	cmp	r3, r2
 800a328:	f000 8099 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a32c:	4a5c      	ldr	r2, [pc, #368]	@ (800a4a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	f200 809e 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a334:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a338:	f000 8091 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a33c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a340:	f200 8096 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a348:	f000 8089 	beq.w	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a34c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a350:	f200 808e 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a358:	d03e      	beq.n	800a3d8 <HAL_TIM_ConfigClockSource+0x124>
 800a35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a35e:	f200 8087 	bhi.w	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a366:	f000 8086 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1c2>
 800a36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a36e:	d87f      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a370:	2b70      	cmp	r3, #112	@ 0x70
 800a372:	d01a      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0xf6>
 800a374:	2b70      	cmp	r3, #112	@ 0x70
 800a376:	d87b      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a378:	2b60      	cmp	r3, #96	@ 0x60
 800a37a:	d050      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0x16a>
 800a37c:	2b60      	cmp	r3, #96	@ 0x60
 800a37e:	d877      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a380:	2b50      	cmp	r3, #80	@ 0x50
 800a382:	d03c      	beq.n	800a3fe <HAL_TIM_ConfigClockSource+0x14a>
 800a384:	2b50      	cmp	r3, #80	@ 0x50
 800a386:	d873      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a388:	2b40      	cmp	r3, #64	@ 0x40
 800a38a:	d058      	beq.n	800a43e <HAL_TIM_ConfigClockSource+0x18a>
 800a38c:	2b40      	cmp	r3, #64	@ 0x40
 800a38e:	d86f      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a390:	2b30      	cmp	r3, #48	@ 0x30
 800a392:	d064      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a394:	2b30      	cmp	r3, #48	@ 0x30
 800a396:	d86b      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d060      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d867      	bhi.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d05c      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a3a4:	2b10      	cmp	r3, #16
 800a3a6:	d05a      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0x1aa>
 800a3a8:	e062      	b.n	800a470 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3ba:	f000 fc95 	bl	800ace8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	609a      	str	r2, [r3, #8]
      break;
 800a3d6:	e04f      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3e8:	f000 fc7e 	bl	800ace8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3fa:	609a      	str	r2, [r3, #8]
      break;
 800a3fc:	e03c      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40a:	461a      	mov	r2, r3
 800a40c:	f000 fbee 	bl	800abec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2150      	movs	r1, #80	@ 0x50
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fc48 	bl	800acac <TIM_ITRx_SetConfig>
      break;
 800a41c:	e02c      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a42a:	461a      	mov	r2, r3
 800a42c:	f000 fc0d 	bl	800ac4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2160      	movs	r1, #96	@ 0x60
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fc38 	bl	800acac <TIM_ITRx_SetConfig>
      break;
 800a43c:	e01c      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a44a:	461a      	mov	r2, r3
 800a44c:	f000 fbce 	bl	800abec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2140      	movs	r1, #64	@ 0x40
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fc28 	bl	800acac <TIM_ITRx_SetConfig>
      break;
 800a45c:	e00c      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f000 fc1f 	bl	800acac <TIM_ITRx_SetConfig>
      break;
 800a46e:	e003      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	73fb      	strb	r3, [r7, #15]
      break;
 800a474:	e000      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	ffceff88 	.word	0xffceff88
 800a498:	00100040 	.word	0x00100040
 800a49c:	00100030 	.word	0x00100030
 800a4a0:	00100020 	.word	0x00100020

0800a4a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a46      	ldr	r2, [pc, #280]	@ (800a620 <TIM_Base_SetConfig+0x12c>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d013      	beq.n	800a534 <TIM_Base_SetConfig+0x40>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a512:	d00f      	beq.n	800a534 <TIM_Base_SetConfig+0x40>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a43      	ldr	r2, [pc, #268]	@ (800a624 <TIM_Base_SetConfig+0x130>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d00b      	beq.n	800a534 <TIM_Base_SetConfig+0x40>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a42      	ldr	r2, [pc, #264]	@ (800a628 <TIM_Base_SetConfig+0x134>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <TIM_Base_SetConfig+0x40>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a41      	ldr	r2, [pc, #260]	@ (800a62c <TIM_Base_SetConfig+0x138>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_Base_SetConfig+0x40>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a40      	ldr	r2, [pc, #256]	@ (800a630 <TIM_Base_SetConfig+0x13c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d108      	bne.n	800a546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a53a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a35      	ldr	r2, [pc, #212]	@ (800a620 <TIM_Base_SetConfig+0x12c>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d01f      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a554:	d01b      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a32      	ldr	r2, [pc, #200]	@ (800a624 <TIM_Base_SetConfig+0x130>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d017      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a31      	ldr	r2, [pc, #196]	@ (800a628 <TIM_Base_SetConfig+0x134>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d013      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a30      	ldr	r2, [pc, #192]	@ (800a62c <TIM_Base_SetConfig+0x138>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00f      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a2f      	ldr	r2, [pc, #188]	@ (800a630 <TIM_Base_SetConfig+0x13c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d00b      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a2e      	ldr	r2, [pc, #184]	@ (800a634 <TIM_Base_SetConfig+0x140>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d007      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a2d      	ldr	r2, [pc, #180]	@ (800a638 <TIM_Base_SetConfig+0x144>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d003      	beq.n	800a58e <TIM_Base_SetConfig+0x9a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a2c      	ldr	r2, [pc, #176]	@ (800a63c <TIM_Base_SetConfig+0x148>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d108      	bne.n	800a5a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a16      	ldr	r2, [pc, #88]	@ (800a620 <TIM_Base_SetConfig+0x12c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00f      	beq.n	800a5ec <TIM_Base_SetConfig+0xf8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a18      	ldr	r2, [pc, #96]	@ (800a630 <TIM_Base_SetConfig+0x13c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00b      	beq.n	800a5ec <TIM_Base_SetConfig+0xf8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a17      	ldr	r2, [pc, #92]	@ (800a634 <TIM_Base_SetConfig+0x140>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d007      	beq.n	800a5ec <TIM_Base_SetConfig+0xf8>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a16      	ldr	r2, [pc, #88]	@ (800a638 <TIM_Base_SetConfig+0x144>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d003      	beq.n	800a5ec <TIM_Base_SetConfig+0xf8>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a15      	ldr	r2, [pc, #84]	@ (800a63c <TIM_Base_SetConfig+0x148>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d103      	bne.n	800a5f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b01      	cmp	r3, #1
 800a604:	d105      	bne.n	800a612 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f023 0201 	bic.w	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	611a      	str	r2, [r3, #16]
  }
}
 800a612:	bf00      	nop
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	40010000 	.word	0x40010000
 800a624:	40000400 	.word	0x40000400
 800a628:	40000800 	.word	0x40000800
 800a62c:	40000c00 	.word	0x40000c00
 800a630:	40010400 	.word	0x40010400
 800a634:	40014000 	.word	0x40014000
 800a638:	40014400 	.word	0x40014400
 800a63c:	40014800 	.word	0x40014800

0800a640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	f023 0201 	bic.w	r2, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4b37      	ldr	r3, [pc, #220]	@ (800a748 <TIM_OC1_SetConfig+0x108>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f023 0302 	bic.w	r3, r3, #2
 800a688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4313      	orrs	r3, r2
 800a692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a2d      	ldr	r2, [pc, #180]	@ (800a74c <TIM_OC1_SetConfig+0x10c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d00f      	beq.n	800a6bc <TIM_OC1_SetConfig+0x7c>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a2c      	ldr	r2, [pc, #176]	@ (800a750 <TIM_OC1_SetConfig+0x110>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00b      	beq.n	800a6bc <TIM_OC1_SetConfig+0x7c>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a2b      	ldr	r2, [pc, #172]	@ (800a754 <TIM_OC1_SetConfig+0x114>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d007      	beq.n	800a6bc <TIM_OC1_SetConfig+0x7c>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a758 <TIM_OC1_SetConfig+0x118>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d003      	beq.n	800a6bc <TIM_OC1_SetConfig+0x7c>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a29      	ldr	r2, [pc, #164]	@ (800a75c <TIM_OC1_SetConfig+0x11c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d10c      	bne.n	800a6d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f023 0308 	bic.w	r3, r3, #8
 800a6c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f023 0304 	bic.w	r3, r3, #4
 800a6d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a74c <TIM_OC1_SetConfig+0x10c>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00f      	beq.n	800a6fe <TIM_OC1_SetConfig+0xbe>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a750 <TIM_OC1_SetConfig+0x110>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00b      	beq.n	800a6fe <TIM_OC1_SetConfig+0xbe>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a754 <TIM_OC1_SetConfig+0x114>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d007      	beq.n	800a6fe <TIM_OC1_SetConfig+0xbe>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a19      	ldr	r2, [pc, #100]	@ (800a758 <TIM_OC1_SetConfig+0x118>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC1_SetConfig+0xbe>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a18      	ldr	r2, [pc, #96]	@ (800a75c <TIM_OC1_SetConfig+0x11c>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d111      	bne.n	800a722 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a70c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	4313      	orrs	r3, r2
 800a716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	4313      	orrs	r3, r2
 800a720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	621a      	str	r2, [r3, #32]
}
 800a73c:	bf00      	nop
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	fffeff8f 	.word	0xfffeff8f
 800a74c:	40010000 	.word	0x40010000
 800a750:	40010400 	.word	0x40010400
 800a754:	40014000 	.word	0x40014000
 800a758:	40014400 	.word	0x40014400
 800a75c:	40014800 	.word	0x40014800

0800a760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	f023 0210 	bic.w	r2, r3, #16
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4b34      	ldr	r3, [pc, #208]	@ (800a85c <TIM_OC2_SetConfig+0xfc>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f023 0320 	bic.w	r3, r3, #32
 800a7aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a29      	ldr	r2, [pc, #164]	@ (800a860 <TIM_OC2_SetConfig+0x100>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_OC2_SetConfig+0x68>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a28      	ldr	r2, [pc, #160]	@ (800a864 <TIM_OC2_SetConfig+0x104>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d10d      	bne.n	800a7e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1e      	ldr	r2, [pc, #120]	@ (800a860 <TIM_OC2_SetConfig+0x100>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00f      	beq.n	800a80c <TIM_OC2_SetConfig+0xac>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a1d      	ldr	r2, [pc, #116]	@ (800a864 <TIM_OC2_SetConfig+0x104>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00b      	beq.n	800a80c <TIM_OC2_SetConfig+0xac>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a868 <TIM_OC2_SetConfig+0x108>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d007      	beq.n	800a80c <TIM_OC2_SetConfig+0xac>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1b      	ldr	r2, [pc, #108]	@ (800a86c <TIM_OC2_SetConfig+0x10c>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_OC2_SetConfig+0xac>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a1a      	ldr	r2, [pc, #104]	@ (800a870 <TIM_OC2_SetConfig+0x110>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d113      	bne.n	800a834 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a81a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	621a      	str	r2, [r3, #32]
}
 800a84e:	bf00      	nop
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	feff8fff 	.word	0xfeff8fff
 800a860:	40010000 	.word	0x40010000
 800a864:	40010400 	.word	0x40010400
 800a868:	40014000 	.word	0x40014000
 800a86c:	40014400 	.word	0x40014400
 800a870:	40014800 	.word	0x40014800

0800a874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4b33      	ldr	r3, [pc, #204]	@ (800a96c <TIM_OC3_SetConfig+0xf8>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f023 0303 	bic.w	r3, r3, #3
 800a8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	021b      	lsls	r3, r3, #8
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a28      	ldr	r2, [pc, #160]	@ (800a970 <TIM_OC3_SetConfig+0xfc>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d003      	beq.n	800a8da <TIM_OC3_SetConfig+0x66>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a27      	ldr	r2, [pc, #156]	@ (800a974 <TIM_OC3_SetConfig+0x100>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d10d      	bne.n	800a8f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a970 <TIM_OC3_SetConfig+0xfc>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d00f      	beq.n	800a91e <TIM_OC3_SetConfig+0xaa>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a1c      	ldr	r2, [pc, #112]	@ (800a974 <TIM_OC3_SetConfig+0x100>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00b      	beq.n	800a91e <TIM_OC3_SetConfig+0xaa>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a1b      	ldr	r2, [pc, #108]	@ (800a978 <TIM_OC3_SetConfig+0x104>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d007      	beq.n	800a91e <TIM_OC3_SetConfig+0xaa>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a1a      	ldr	r2, [pc, #104]	@ (800a97c <TIM_OC3_SetConfig+0x108>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d003      	beq.n	800a91e <TIM_OC3_SetConfig+0xaa>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a19      	ldr	r2, [pc, #100]	@ (800a980 <TIM_OC3_SetConfig+0x10c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d113      	bne.n	800a946 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	4313      	orrs	r3, r2
 800a938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	011b      	lsls	r3, r3, #4
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	4313      	orrs	r3, r2
 800a944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	621a      	str	r2, [r3, #32]
}
 800a960:	bf00      	nop
 800a962:	371c      	adds	r7, #28
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	fffeff8f 	.word	0xfffeff8f
 800a970:	40010000 	.word	0x40010000
 800a974:	40010400 	.word	0x40010400
 800a978:	40014000 	.word	0x40014000
 800a97c:	40014400 	.word	0x40014400
 800a980:	40014800 	.word	0x40014800

0800a984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4b24      	ldr	r3, [pc, #144]	@ (800aa40 <TIM_OC4_SetConfig+0xbc>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	031b      	lsls	r3, r3, #12
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a19      	ldr	r2, [pc, #100]	@ (800aa44 <TIM_OC4_SetConfig+0xc0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00f      	beq.n	800aa04 <TIM_OC4_SetConfig+0x80>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a18      	ldr	r2, [pc, #96]	@ (800aa48 <TIM_OC4_SetConfig+0xc4>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00b      	beq.n	800aa04 <TIM_OC4_SetConfig+0x80>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a17      	ldr	r2, [pc, #92]	@ (800aa4c <TIM_OC4_SetConfig+0xc8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d007      	beq.n	800aa04 <TIM_OC4_SetConfig+0x80>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a16      	ldr	r2, [pc, #88]	@ (800aa50 <TIM_OC4_SetConfig+0xcc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d003      	beq.n	800aa04 <TIM_OC4_SetConfig+0x80>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a15      	ldr	r2, [pc, #84]	@ (800aa54 <TIM_OC4_SetConfig+0xd0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d109      	bne.n	800aa18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	019b      	lsls	r3, r3, #6
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	feff8fff 	.word	0xfeff8fff
 800aa44:	40010000 	.word	0x40010000
 800aa48:	40010400 	.word	0x40010400
 800aa4c:	40014000 	.word	0x40014000
 800aa50:	40014400 	.word	0x40014400
 800aa54:	40014800 	.word	0x40014800

0800aa58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4b21      	ldr	r3, [pc, #132]	@ (800ab08 <TIM_OC5_SetConfig+0xb0>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <TIM_OC5_SetConfig+0xb4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00f      	beq.n	800aace <TIM_OC5_SetConfig+0x76>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a17      	ldr	r2, [pc, #92]	@ (800ab10 <TIM_OC5_SetConfig+0xb8>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00b      	beq.n	800aace <TIM_OC5_SetConfig+0x76>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a16      	ldr	r2, [pc, #88]	@ (800ab14 <TIM_OC5_SetConfig+0xbc>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d007      	beq.n	800aace <TIM_OC5_SetConfig+0x76>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a15      	ldr	r2, [pc, #84]	@ (800ab18 <TIM_OC5_SetConfig+0xc0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d003      	beq.n	800aace <TIM_OC5_SetConfig+0x76>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a14      	ldr	r2, [pc, #80]	@ (800ab1c <TIM_OC5_SetConfig+0xc4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d109      	bne.n	800aae2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	621a      	str	r2, [r3, #32]
}
 800aafc:	bf00      	nop
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	fffeff8f 	.word	0xfffeff8f
 800ab0c:	40010000 	.word	0x40010000
 800ab10:	40010400 	.word	0x40010400
 800ab14:	40014000 	.word	0x40014000
 800ab18:	40014400 	.word	0x40014400
 800ab1c:	40014800 	.word	0x40014800

0800ab20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4b22      	ldr	r3, [pc, #136]	@ (800abd4 <TIM_OC6_SetConfig+0xb4>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	051b      	lsls	r3, r3, #20
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a19      	ldr	r2, [pc, #100]	@ (800abd8 <TIM_OC6_SetConfig+0xb8>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00f      	beq.n	800ab98 <TIM_OC6_SetConfig+0x78>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a18      	ldr	r2, [pc, #96]	@ (800abdc <TIM_OC6_SetConfig+0xbc>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d00b      	beq.n	800ab98 <TIM_OC6_SetConfig+0x78>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a17      	ldr	r2, [pc, #92]	@ (800abe0 <TIM_OC6_SetConfig+0xc0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d007      	beq.n	800ab98 <TIM_OC6_SetConfig+0x78>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a16      	ldr	r2, [pc, #88]	@ (800abe4 <TIM_OC6_SetConfig+0xc4>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d003      	beq.n	800ab98 <TIM_OC6_SetConfig+0x78>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a15      	ldr	r2, [pc, #84]	@ (800abe8 <TIM_OC6_SetConfig+0xc8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d109      	bne.n	800abac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	029b      	lsls	r3, r3, #10
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	621a      	str	r2, [r3, #32]
}
 800abc6:	bf00      	nop
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	feff8fff 	.word	0xfeff8fff
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40010400 	.word	0x40010400
 800abe0:	40014000 	.word	0x40014000
 800abe4:	40014400 	.word	0x40014400
 800abe8:	40014800 	.word	0x40014800

0800abec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f023 0201 	bic.w	r2, r3, #1
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f023 030a 	bic.w	r3, r3, #10
 800ac28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b087      	sub	sp, #28
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f023 0210 	bic.w	r2, r3, #16
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	031b      	lsls	r3, r3, #12
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
	...

0800acac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4b09      	ldr	r3, [pc, #36]	@ (800ace4 <TIM_ITRx_SetConfig+0x38>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	f043 0307 	orr.w	r3, r3, #7
 800acce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	609a      	str	r2, [r3, #8]
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	ffcfff8f 	.word	0xffcfff8f

0800ace8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	021a      	lsls	r2, r3, #8
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	609a      	str	r2, [r3, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f003 031f 	and.w	r3, r3, #31
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1a      	ldr	r2, [r3, #32]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	43db      	mvns	r3, r3
 800ad4a:	401a      	ands	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a1a      	ldr	r2, [r3, #32]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad60:	431a      	orrs	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d101      	bne.n	800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e06d      	b.n	800ae68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a30      	ldr	r2, [pc, #192]	@ (800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d004      	beq.n	800adc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a2f      	ldr	r2, [pc, #188]	@ (800ae78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d108      	bne.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800adc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4313      	orrs	r3, r2
 800add0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a20      	ldr	r2, [pc, #128]	@ (800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d022      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adfe:	d01d      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a1d      	ldr	r2, [pc, #116]	@ (800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d018      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a1c      	ldr	r2, [pc, #112]	@ (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d013      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a1a      	ldr	r2, [pc, #104]	@ (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00e      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a15      	ldr	r2, [pc, #84]	@ (800ae78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d009      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a16      	ldr	r2, [pc, #88]	@ (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d004      	beq.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a15      	ldr	r2, [pc, #84]	@ (800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d10c      	bne.n	800ae56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40010400 	.word	0x40010400
 800ae7c:	40000400 	.word	0x40000400
 800ae80:	40000800 	.word	0x40000800
 800ae84:	40000c00 	.word	0x40000c00
 800ae88:	40001800 	.word	0x40001800
 800ae8c:	40014000 	.word	0x40014000

0800ae90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e065      	b.n	800af78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	041b      	lsls	r3, r3, #16
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a16      	ldr	r2, [pc, #88]	@ (800af84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a14      	ldr	r2, [pc, #80]	@ (800af88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d115      	bne.n	800af66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af44:	051b      	lsls	r3, r3, #20
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	40010000 	.word	0x40010000
 800af88:	40010400 	.word	0x40010400

0800af8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e042      	b.n	800b060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7f9 fbb7 	bl	8004760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2224      	movs	r2, #36	@ 0x24
 800aff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f022 0201 	bic.w	r2, r2, #1
 800b008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fb0c 	bl	800c630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fda1 	bl	800bb60 <UART_SetConfig>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e01b      	b.n	800b060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f042 0201 	orr.w	r2, r2, #1
 800b056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 fb8b 	bl	800c774 <UART_CheckIdleState>
 800b05e:	4603      	mov	r3, r0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	@ 0x28
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	4613      	mov	r3, r2
 800b076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b07e:	2b20      	cmp	r3, #32
 800b080:	d17b      	bne.n	800b17a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <HAL_UART_Transmit+0x26>
 800b088:	88fb      	ldrh	r3, [r7, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e074      	b.n	800b17c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2221      	movs	r2, #33	@ 0x21
 800b09e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0a2:	f7f9 fdab 	bl	8004bfc <HAL_GetTick>
 800b0a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	88fa      	ldrh	r2, [r7, #6]
 800b0ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0c0:	d108      	bne.n	800b0d4 <HAL_UART_Transmit+0x6c>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d104      	bne.n	800b0d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	61bb      	str	r3, [r7, #24]
 800b0d2:	e003      	b.n	800b0dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0dc:	e030      	b.n	800b140 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2180      	movs	r1, #128	@ 0x80
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f001 fbed 	bl	800c8c8 <UART_WaitOnFlagUntilTimeout>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d005      	beq.n	800b100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e03d      	b.n	800b17c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	3302      	adds	r3, #2
 800b11a:	61bb      	str	r3, [r7, #24]
 800b11c:	e007      	b.n	800b12e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	781a      	ldrb	r2, [r3, #0]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	3301      	adds	r3, #1
 800b12c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b134:	b29b      	uxth	r3, r3
 800b136:	3b01      	subs	r3, #1
 800b138:	b29a      	uxth	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b146:	b29b      	uxth	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1c8      	bne.n	800b0de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2200      	movs	r2, #0
 800b154:	2140      	movs	r1, #64	@ 0x40
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f001 fbb6 	bl	800c8c8 <UART_WaitOnFlagUntilTimeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e006      	b.n	800b17c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	e000      	b.n	800b17c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b17a:	2302      	movs	r3, #2
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3720      	adds	r7, #32
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08a      	sub	sp, #40	@ 0x28
 800b188:	af02      	add	r7, sp, #8
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	4613      	mov	r3, r2
 800b192:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	f040 80b5 	bne.w	800b30a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <HAL_UART_Receive+0x28>
 800b1a6:	88fb      	ldrh	r3, [r7, #6]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e0ad      	b.n	800b30c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2222      	movs	r2, #34	@ 0x22
 800b1bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1c6:	f7f9 fd19 	bl	8004bfc <HAL_GetTick>
 800b1ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	88fa      	ldrh	r2, [r7, #6]
 800b1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	88fa      	ldrh	r2, [r7, #6]
 800b1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1e4:	d10e      	bne.n	800b204 <HAL_UART_Receive+0x80>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d105      	bne.n	800b1fa <HAL_UART_Receive+0x76>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b1f8:	e02d      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	22ff      	movs	r2, #255	@ 0xff
 800b1fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b202:	e028      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10d      	bne.n	800b228 <HAL_UART_Receive+0xa4>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <HAL_UART_Receive+0x9a>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	22ff      	movs	r2, #255	@ 0xff
 800b218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b21c:	e01b      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	227f      	movs	r2, #127	@ 0x7f
 800b222:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b226:	e016      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b230:	d10d      	bne.n	800b24e <HAL_UART_Receive+0xca>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d104      	bne.n	800b244 <HAL_UART_Receive+0xc0>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	227f      	movs	r2, #127	@ 0x7f
 800b23e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b242:	e008      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	223f      	movs	r2, #63	@ 0x3f
 800b248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b24c:	e003      	b.n	800b256 <HAL_UART_Receive+0xd2>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b25c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b266:	d108      	bne.n	800b27a <HAL_UART_Receive+0xf6>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d104      	bne.n	800b27a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	61bb      	str	r3, [r7, #24]
 800b278:	e003      	b.n	800b282 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b282:	e036      	b.n	800b2f2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2200      	movs	r2, #0
 800b28c:	2120      	movs	r1, #32
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f001 fb1a 	bl	800c8c8 <UART_WaitOnFlagUntilTimeout>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e032      	b.n	800b30c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	8a7b      	ldrh	r3, [r7, #18]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	3302      	adds	r3, #2
 800b2c2:	61bb      	str	r3, [r7, #24]
 800b2c4:	e00c      	b.n	800b2e0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	8a7b      	ldrh	r3, [r7, #18]
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1c2      	bne.n	800b284 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2220      	movs	r2, #32
 800b302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	e000      	b.n	800b30c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b30a:	2302      	movs	r3, #2
  }
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08a      	sub	sp, #40	@ 0x28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b328:	2b20      	cmp	r3, #32
 800b32a:	d137      	bne.n	800b39c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <HAL_UART_Receive_IT+0x24>
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e030      	b.n	800b39e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a18      	ldr	r2, [pc, #96]	@ (800b3a8 <HAL_UART_Receive_IT+0x94>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d01f      	beq.n	800b38c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d018      	beq.n	800b38c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	613b      	str	r3, [r7, #16]
   return(result);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b36e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	623b      	str	r3, [r7, #32]
 800b37a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	69f9      	ldr	r1, [r7, #28]
 800b37e:	6a3a      	ldr	r2, [r7, #32]
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	61bb      	str	r3, [r7, #24]
   return(result);
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e6      	bne.n	800b35a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	461a      	mov	r2, r3
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f001 fb06 	bl	800c9a4 <UART_Start_Receive_IT>
 800b398:	4603      	mov	r3, r0
 800b39a:	e000      	b.n	800b39e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b39c:	2302      	movs	r3, #2
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3728      	adds	r7, #40	@ 0x28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	58000c00 	.word	0x58000c00

0800b3ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b0ba      	sub	sp, #232	@ 0xe8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b3d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b3da:	4013      	ands	r3, r2
 800b3dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d11b      	bne.n	800b420 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d015      	beq.n	800b420 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d105      	bne.n	800b40c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 8377 	beq.w	800bb04 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	4798      	blx	r3
      }
      return;
 800b41e:	e371      	b.n	800bb04 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8123 	beq.w	800b670 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b42a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b42e:	4b8d      	ldr	r3, [pc, #564]	@ (800b664 <HAL_UART_IRQHandler+0x2b8>)
 800b430:	4013      	ands	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b436:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b43a:	4b8b      	ldr	r3, [pc, #556]	@ (800b668 <HAL_UART_IRQHandler+0x2bc>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8116 	beq.w	800b670 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d011      	beq.n	800b474 <HAL_UART_IRQHandler+0xc8>
 800b450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2201      	movs	r2, #1
 800b462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b46a:	f043 0201 	orr.w	r2, r3, #1
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b478:	f003 0302 	and.w	r3, r3, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d011      	beq.n	800b4a4 <HAL_UART_IRQHandler+0xf8>
 800b480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2202      	movs	r2, #2
 800b492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49a:	f043 0204 	orr.w	r2, r3, #4
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d011      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x128>
 800b4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2204      	movs	r2, #4
 800b4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ca:	f043 0202 	orr.w	r2, r3, #2
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d017      	beq.n	800b510 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4e4:	f003 0320 	and.w	r3, r3, #32
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b664 <HAL_UART_IRQHandler+0x2b8>)
 800b4f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2208      	movs	r2, #8
 800b4fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b506:	f043 0208 	orr.w	r2, r3, #8
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d012      	beq.n	800b542 <HAL_UART_IRQHandler+0x196>
 800b51c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00c      	beq.n	800b542 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b538:	f043 0220 	orr.w	r2, r3, #32
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 82dd 	beq.w	800bb08 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b00      	cmp	r3, #0
 800b558:	d013      	beq.n	800b582 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b56a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d007      	beq.n	800b582 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b588:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b596:	2b40      	cmp	r3, #64	@ 0x40
 800b598:	d005      	beq.n	800b5a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b59a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b59e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d054      	beq.n	800b650 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 fb1e 	bl	800cbe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b6:	2b40      	cmp	r3, #64	@ 0x40
 800b5b8:	d146      	bne.n	800b648 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1d9      	bne.n	800b5ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d017      	beq.n	800b640 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b616:	4a15      	ldr	r2, [pc, #84]	@ (800b66c <HAL_UART_IRQHandler+0x2c0>)
 800b618:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b620:	4618      	mov	r0, r3
 800b622:	f7f9 ff25 	bl	8005470 <HAL_DMA_Abort_IT>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d019      	beq.n	800b660 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b63a:	4610      	mov	r0, r2
 800b63c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b63e:	e00f      	b.n	800b660 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fa77 	bl	800bb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b646:	e00b      	b.n	800b660 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fa73 	bl	800bb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64e:	e007      	b.n	800b660 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fa6f 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b65e:	e253      	b.n	800bb08 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b660:	bf00      	nop
    return;
 800b662:	e251      	b.n	800bb08 <HAL_UART_IRQHandler+0x75c>
 800b664:	10000001 	.word	0x10000001
 800b668:	04000120 	.word	0x04000120
 800b66c:	0800ccb5 	.word	0x0800ccb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b674:	2b01      	cmp	r3, #1
 800b676:	f040 81e7 	bne.w	800ba48 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b67e:	f003 0310 	and.w	r3, r3, #16
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 81e0 	beq.w	800ba48 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b68c:	f003 0310 	and.w	r3, r3, #16
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 81d9 	beq.w	800ba48 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2210      	movs	r2, #16
 800b69c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a8:	2b40      	cmp	r3, #64	@ 0x40
 800b6aa:	f040 8151 	bne.w	800b950 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a96      	ldr	r2, [pc, #600]	@ (800b910 <HAL_UART_IRQHandler+0x564>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d068      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a93      	ldr	r2, [pc, #588]	@ (800b914 <HAL_UART_IRQHandler+0x568>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d061      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a91      	ldr	r2, [pc, #580]	@ (800b918 <HAL_UART_IRQHandler+0x56c>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d05a      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a8e      	ldr	r2, [pc, #568]	@ (800b91c <HAL_UART_IRQHandler+0x570>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d053      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a8c      	ldr	r2, [pc, #560]	@ (800b920 <HAL_UART_IRQHandler+0x574>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d04c      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a89      	ldr	r2, [pc, #548]	@ (800b924 <HAL_UART_IRQHandler+0x578>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d045      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a87      	ldr	r2, [pc, #540]	@ (800b928 <HAL_UART_IRQHandler+0x57c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d03e      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a84      	ldr	r2, [pc, #528]	@ (800b92c <HAL_UART_IRQHandler+0x580>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d037      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a82      	ldr	r2, [pc, #520]	@ (800b930 <HAL_UART_IRQHandler+0x584>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d030      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a7f      	ldr	r2, [pc, #508]	@ (800b934 <HAL_UART_IRQHandler+0x588>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d029      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a7d      	ldr	r2, [pc, #500]	@ (800b938 <HAL_UART_IRQHandler+0x58c>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d022      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a7a      	ldr	r2, [pc, #488]	@ (800b93c <HAL_UART_IRQHandler+0x590>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d01b      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a78      	ldr	r2, [pc, #480]	@ (800b940 <HAL_UART_IRQHandler+0x594>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d014      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a75      	ldr	r2, [pc, #468]	@ (800b944 <HAL_UART_IRQHandler+0x598>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d00d      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a73      	ldr	r2, [pc, #460]	@ (800b948 <HAL_UART_IRQHandler+0x59c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d006      	beq.n	800b78e <HAL_UART_IRQHandler+0x3e2>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a70      	ldr	r2, [pc, #448]	@ (800b94c <HAL_UART_IRQHandler+0x5a0>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d106      	bne.n	800b79c <HAL_UART_IRQHandler+0x3f0>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	e005      	b.n	800b7a8 <HAL_UART_IRQHandler+0x3fc>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 81ab 	beq.w	800bb0c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	f080 81a3 	bcs.w	800bb0c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7dc:	f000 8087 	beq.w	800b8ee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b7f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b80a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b80e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b812:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b816:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1da      	bne.n	800b7e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3308      	adds	r3, #8
 800b830:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b83a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b83c:	f023 0301 	bic.w	r3, r3, #1
 800b840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3308      	adds	r3, #8
 800b84a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b84e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b852:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e1      	bne.n	800b82a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b87c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b88a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b88c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b890:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e3      	bne.n	800b866 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2220      	movs	r2, #32
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8bc:	f023 0310 	bic.w	r3, r3, #16
 800b8c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e4      	bne.n	800b8ac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f9 faa3 	bl	8004e34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b900:	b29b      	uxth	r3, r3
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	b29b      	uxth	r3, r3
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f91d 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b90e:	e0fd      	b.n	800bb0c <HAL_UART_IRQHandler+0x760>
 800b910:	40020010 	.word	0x40020010
 800b914:	40020028 	.word	0x40020028
 800b918:	40020040 	.word	0x40020040
 800b91c:	40020058 	.word	0x40020058
 800b920:	40020070 	.word	0x40020070
 800b924:	40020088 	.word	0x40020088
 800b928:	400200a0 	.word	0x400200a0
 800b92c:	400200b8 	.word	0x400200b8
 800b930:	40020410 	.word	0x40020410
 800b934:	40020428 	.word	0x40020428
 800b938:	40020440 	.word	0x40020440
 800b93c:	40020458 	.word	0x40020458
 800b940:	40020470 	.word	0x40020470
 800b944:	40020488 	.word	0x40020488
 800b948:	400204a0 	.word	0x400204a0
 800b94c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 80cf 	beq.w	800bb10 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80ca 	beq.w	800bb10 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b98c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b99e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e4      	bne.n	800b97c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	e853 3f00 	ldrex	r3, [r3]
 800b9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9c2:	6a3a      	ldr	r2, [r7, #32]
 800b9c4:	4b55      	ldr	r3, [pc, #340]	@ (800bb1c <HAL_UART_IRQHandler+0x770>)
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b9d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9de:	e841 2300 	strex	r3, r2, [r1]
 800b9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1e3      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0310 	bic.w	r3, r3, #16
 800ba12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	69b9      	ldr	r1, [r7, #24]
 800ba26:	69fa      	ldr	r2, [r7, #28]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e4      	bne.n	800b9fe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f881 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba46:	e063      	b.n	800bb10 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00e      	beq.n	800ba72 <HAL_UART_IRQHandler+0x6c6>
 800ba54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d008      	beq.n	800ba72 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ba68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f001 fe80 	bl	800d770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba70:	e051      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d014      	beq.n	800baa8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d105      	bne.n	800ba96 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d03a      	beq.n	800bb14 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
    }
    return;
 800baa6:	e035      	b.n	800bb14 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800baa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d009      	beq.n	800bac8 <HAL_UART_IRQHandler+0x71c>
 800bab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 f90d 	bl	800cce0 <UART_EndTransmit_IT>
    return;
 800bac6:	e026      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bacc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d009      	beq.n	800bae8 <HAL_UART_IRQHandler+0x73c>
 800bad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bad8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fe59 	bl	800d798 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bae6:	e016      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d010      	beq.n	800bb16 <HAL_UART_IRQHandler+0x76a>
 800baf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	da0c      	bge.n	800bb16 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 fe41 	bl	800d784 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb02:	e008      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb04:	bf00      	nop
 800bb06:	e006      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb08:	bf00      	nop
 800bb0a:	e004      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb0c:	bf00      	nop
 800bb0e:	e002      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb10:	bf00      	nop
 800bb12:	e000      	b.n	800bb16 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb14:	bf00      	nop
  }
}
 800bb16:	37e8      	adds	r7, #232	@ 0xe8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	effffffe 	.word	0xeffffffe

0800bb20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb64:	b092      	sub	sp, #72	@ 0x48
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4bbe      	ldr	r3, [pc, #760]	@ (800be88 <UART_SetConfig+0x328>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	6812      	ldr	r2, [r2, #0]
 800bb96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb98:	430b      	orrs	r3, r1
 800bb9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	68da      	ldr	r2, [r3, #12]
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4ab3      	ldr	r2, [pc, #716]	@ (800be8c <UART_SetConfig+0x32c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d004      	beq.n	800bbcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	4baf      	ldr	r3, [pc, #700]	@ (800be90 <UART_SetConfig+0x330>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	f023 010f 	bic.w	r1, r3, #15
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4aa6      	ldr	r2, [pc, #664]	@ (800be94 <UART_SetConfig+0x334>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d177      	bne.n	800bcf0 <UART_SetConfig+0x190>
 800bc00:	4ba5      	ldr	r3, [pc, #660]	@ (800be98 <UART_SetConfig+0x338>)
 800bc02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc08:	2b28      	cmp	r3, #40	@ 0x28
 800bc0a:	d86d      	bhi.n	800bce8 <UART_SetConfig+0x188>
 800bc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <UART_SetConfig+0xb4>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bcb9 	.word	0x0800bcb9
 800bc18:	0800bce9 	.word	0x0800bce9
 800bc1c:	0800bce9 	.word	0x0800bce9
 800bc20:	0800bce9 	.word	0x0800bce9
 800bc24:	0800bce9 	.word	0x0800bce9
 800bc28:	0800bce9 	.word	0x0800bce9
 800bc2c:	0800bce9 	.word	0x0800bce9
 800bc30:	0800bce9 	.word	0x0800bce9
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bce9 	.word	0x0800bce9
 800bc3c:	0800bce9 	.word	0x0800bce9
 800bc40:	0800bce9 	.word	0x0800bce9
 800bc44:	0800bce9 	.word	0x0800bce9
 800bc48:	0800bce9 	.word	0x0800bce9
 800bc4c:	0800bce9 	.word	0x0800bce9
 800bc50:	0800bce9 	.word	0x0800bce9
 800bc54:	0800bcc9 	.word	0x0800bcc9
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bce9 	.word	0x0800bce9
 800bc60:	0800bce9 	.word	0x0800bce9
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce9 	.word	0x0800bce9
 800bc6c:	0800bce9 	.word	0x0800bce9
 800bc70:	0800bce9 	.word	0x0800bce9
 800bc74:	0800bcd1 	.word	0x0800bcd1
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bce9 	.word	0x0800bce9
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce9 	.word	0x0800bce9
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bcd9 	.word	0x0800bcd9
 800bc98:	0800bce9 	.word	0x0800bce9
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bce9 	.word	0x0800bce9
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bce9 	.word	0x0800bce9
 800bcb0:	0800bce9 	.word	0x0800bce9
 800bcb4:	0800bce1 	.word	0x0800bce1
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e222      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e21e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bcc8:	2308      	movs	r3, #8
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e21a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e216      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bcd8:	2320      	movs	r3, #32
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e212      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bce0:	2340      	movs	r3, #64	@ 0x40
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e20e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bce8:	2380      	movs	r3, #128	@ 0x80
 800bcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcee:	e20a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a69      	ldr	r2, [pc, #420]	@ (800be9c <UART_SetConfig+0x33c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d130      	bne.n	800bd5c <UART_SetConfig+0x1fc>
 800bcfa:	4b67      	ldr	r3, [pc, #412]	@ (800be98 <UART_SetConfig+0x338>)
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	2b05      	cmp	r3, #5
 800bd04:	d826      	bhi.n	800bd54 <UART_SetConfig+0x1f4>
 800bd06:	a201      	add	r2, pc, #4	@ (adr r2, 800bd0c <UART_SetConfig+0x1ac>)
 800bd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0c:	0800bd25 	.word	0x0800bd25
 800bd10:	0800bd2d 	.word	0x0800bd2d
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd3d 	.word	0x0800bd3d
 800bd1c:	0800bd45 	.word	0x0800bd45
 800bd20:	0800bd4d 	.word	0x0800bd4d
 800bd24:	2300      	movs	r3, #0
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e1ec      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e1e8      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd34:	2308      	movs	r3, #8
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e1e4      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd3c:	2310      	movs	r3, #16
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd42:	e1e0      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd44:	2320      	movs	r3, #32
 800bd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4a:	e1dc      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd4c:	2340      	movs	r3, #64	@ 0x40
 800bd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd52:	e1d8      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd54:	2380      	movs	r3, #128	@ 0x80
 800bd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5a:	e1d4      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a4f      	ldr	r2, [pc, #316]	@ (800bea0 <UART_SetConfig+0x340>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d130      	bne.n	800bdc8 <UART_SetConfig+0x268>
 800bd66:	4b4c      	ldr	r3, [pc, #304]	@ (800be98 <UART_SetConfig+0x338>)
 800bd68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd6a:	f003 0307 	and.w	r3, r3, #7
 800bd6e:	2b05      	cmp	r3, #5
 800bd70:	d826      	bhi.n	800bdc0 <UART_SetConfig+0x260>
 800bd72:	a201      	add	r2, pc, #4	@ (adr r2, 800bd78 <UART_SetConfig+0x218>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bd91 	.word	0x0800bd91
 800bd7c:	0800bd99 	.word	0x0800bd99
 800bd80:	0800bda1 	.word	0x0800bda1
 800bd84:	0800bda9 	.word	0x0800bda9
 800bd88:	0800bdb1 	.word	0x0800bdb1
 800bd8c:	0800bdb9 	.word	0x0800bdb9
 800bd90:	2300      	movs	r3, #0
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd96:	e1b6      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bd98:	2304      	movs	r3, #4
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9e:	e1b2      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bda0:	2308      	movs	r3, #8
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda6:	e1ae      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bda8:	2310      	movs	r3, #16
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdae:	e1aa      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bdb0:	2320      	movs	r3, #32
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb6:	e1a6      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bdb8:	2340      	movs	r3, #64	@ 0x40
 800bdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdbe:	e1a2      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bdc0:	2380      	movs	r3, #128	@ 0x80
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc6:	e19e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a35      	ldr	r2, [pc, #212]	@ (800bea4 <UART_SetConfig+0x344>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d130      	bne.n	800be34 <UART_SetConfig+0x2d4>
 800bdd2:	4b31      	ldr	r3, [pc, #196]	@ (800be98 <UART_SetConfig+0x338>)
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	d826      	bhi.n	800be2c <UART_SetConfig+0x2cc>
 800bdde:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <UART_SetConfig+0x284>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	0800be0d 	.word	0x0800be0d
 800bdf0:	0800be15 	.word	0x0800be15
 800bdf4:	0800be1d 	.word	0x0800be1d
 800bdf8:	0800be25 	.word	0x0800be25
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be02:	e180      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be04:	2304      	movs	r3, #4
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0a:	e17c      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be0c:	2308      	movs	r3, #8
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be12:	e178      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be14:	2310      	movs	r3, #16
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1a:	e174      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be1c:	2320      	movs	r3, #32
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be22:	e170      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be24:	2340      	movs	r3, #64	@ 0x40
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2a:	e16c      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be2c:	2380      	movs	r3, #128	@ 0x80
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be32:	e168      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a1b      	ldr	r2, [pc, #108]	@ (800bea8 <UART_SetConfig+0x348>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d142      	bne.n	800bec4 <UART_SetConfig+0x364>
 800be3e:	4b16      	ldr	r3, [pc, #88]	@ (800be98 <UART_SetConfig+0x338>)
 800be40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b05      	cmp	r3, #5
 800be48:	d838      	bhi.n	800bebc <UART_SetConfig+0x35c>
 800be4a:	a201      	add	r2, pc, #4	@ (adr r2, 800be50 <UART_SetConfig+0x2f0>)
 800be4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be50:	0800be69 	.word	0x0800be69
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be79 	.word	0x0800be79
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800bead 	.word	0x0800bead
 800be64:	0800beb5 	.word	0x0800beb5
 800be68:	2300      	movs	r3, #0
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6e:	e14a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be70:	2304      	movs	r3, #4
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be76:	e146      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be78:	2308      	movs	r3, #8
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7e:	e142      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be80:	2310      	movs	r3, #16
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be86:	e13e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800be88:	cfff69f3 	.word	0xcfff69f3
 800be8c:	58000c00 	.word	0x58000c00
 800be90:	11fff4ff 	.word	0x11fff4ff
 800be94:	40011000 	.word	0x40011000
 800be98:	58024400 	.word	0x58024400
 800be9c:	40004400 	.word	0x40004400
 800bea0:	40004800 	.word	0x40004800
 800bea4:	40004c00 	.word	0x40004c00
 800bea8:	40005000 	.word	0x40005000
 800beac:	2320      	movs	r3, #32
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb2:	e128      	b.n	800c106 <UART_SetConfig+0x5a6>
 800beb4:	2340      	movs	r3, #64	@ 0x40
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e124      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bebc:	2380      	movs	r3, #128	@ 0x80
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e120      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4acb      	ldr	r2, [pc, #812]	@ (800c1f8 <UART_SetConfig+0x698>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d176      	bne.n	800bfbc <UART_SetConfig+0x45c>
 800bece:	4bcb      	ldr	r3, [pc, #812]	@ (800c1fc <UART_SetConfig+0x69c>)
 800bed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bed6:	2b28      	cmp	r3, #40	@ 0x28
 800bed8:	d86c      	bhi.n	800bfb4 <UART_SetConfig+0x454>
 800beda:	a201      	add	r2, pc, #4	@ (adr r2, 800bee0 <UART_SetConfig+0x380>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bf85 	.word	0x0800bf85
 800bee4:	0800bfb5 	.word	0x0800bfb5
 800bee8:	0800bfb5 	.word	0x0800bfb5
 800beec:	0800bfb5 	.word	0x0800bfb5
 800bef0:	0800bfb5 	.word	0x0800bfb5
 800bef4:	0800bfb5 	.word	0x0800bfb5
 800bef8:	0800bfb5 	.word	0x0800bfb5
 800befc:	0800bfb5 	.word	0x0800bfb5
 800bf00:	0800bf8d 	.word	0x0800bf8d
 800bf04:	0800bfb5 	.word	0x0800bfb5
 800bf08:	0800bfb5 	.word	0x0800bfb5
 800bf0c:	0800bfb5 	.word	0x0800bfb5
 800bf10:	0800bfb5 	.word	0x0800bfb5
 800bf14:	0800bfb5 	.word	0x0800bfb5
 800bf18:	0800bfb5 	.word	0x0800bfb5
 800bf1c:	0800bfb5 	.word	0x0800bfb5
 800bf20:	0800bf95 	.word	0x0800bf95
 800bf24:	0800bfb5 	.word	0x0800bfb5
 800bf28:	0800bfb5 	.word	0x0800bfb5
 800bf2c:	0800bfb5 	.word	0x0800bfb5
 800bf30:	0800bfb5 	.word	0x0800bfb5
 800bf34:	0800bfb5 	.word	0x0800bfb5
 800bf38:	0800bfb5 	.word	0x0800bfb5
 800bf3c:	0800bfb5 	.word	0x0800bfb5
 800bf40:	0800bf9d 	.word	0x0800bf9d
 800bf44:	0800bfb5 	.word	0x0800bfb5
 800bf48:	0800bfb5 	.word	0x0800bfb5
 800bf4c:	0800bfb5 	.word	0x0800bfb5
 800bf50:	0800bfb5 	.word	0x0800bfb5
 800bf54:	0800bfb5 	.word	0x0800bfb5
 800bf58:	0800bfb5 	.word	0x0800bfb5
 800bf5c:	0800bfb5 	.word	0x0800bfb5
 800bf60:	0800bfa5 	.word	0x0800bfa5
 800bf64:	0800bfb5 	.word	0x0800bfb5
 800bf68:	0800bfb5 	.word	0x0800bfb5
 800bf6c:	0800bfb5 	.word	0x0800bfb5
 800bf70:	0800bfb5 	.word	0x0800bfb5
 800bf74:	0800bfb5 	.word	0x0800bfb5
 800bf78:	0800bfb5 	.word	0x0800bfb5
 800bf7c:	0800bfb5 	.word	0x0800bfb5
 800bf80:	0800bfad 	.word	0x0800bfad
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8a:	e0bc      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf92:	e0b8      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bf94:	2308      	movs	r3, #8
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9a:	e0b4      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bf9c:	2310      	movs	r3, #16
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e0b0      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bfa4:	2320      	movs	r3, #32
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e0ac      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bfac:	2340      	movs	r3, #64	@ 0x40
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb2:	e0a8      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bfb4:	2380      	movs	r3, #128	@ 0x80
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfba:	e0a4      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a8f      	ldr	r2, [pc, #572]	@ (800c200 <UART_SetConfig+0x6a0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d130      	bne.n	800c028 <UART_SetConfig+0x4c8>
 800bfc6:	4b8d      	ldr	r3, [pc, #564]	@ (800c1fc <UART_SetConfig+0x69c>)
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfca:	f003 0307 	and.w	r3, r3, #7
 800bfce:	2b05      	cmp	r3, #5
 800bfd0:	d826      	bhi.n	800c020 <UART_SetConfig+0x4c0>
 800bfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd8 <UART_SetConfig+0x478>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800bff1 	.word	0x0800bff1
 800bfdc:	0800bff9 	.word	0x0800bff9
 800bfe0:	0800c001 	.word	0x0800c001
 800bfe4:	0800c009 	.word	0x0800c009
 800bfe8:	0800c011 	.word	0x0800c011
 800bfec:	0800c019 	.word	0x0800c019
 800bff0:	2300      	movs	r3, #0
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff6:	e086      	b.n	800c106 <UART_SetConfig+0x5a6>
 800bff8:	2304      	movs	r3, #4
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffe:	e082      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c000:	2308      	movs	r3, #8
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c006:	e07e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c008:	2310      	movs	r3, #16
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e07a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c010:	2320      	movs	r3, #32
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e076      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c018:	2340      	movs	r3, #64	@ 0x40
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01e:	e072      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c020:	2380      	movs	r3, #128	@ 0x80
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c026:	e06e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a75      	ldr	r2, [pc, #468]	@ (800c204 <UART_SetConfig+0x6a4>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d130      	bne.n	800c094 <UART_SetConfig+0x534>
 800c032:	4b72      	ldr	r3, [pc, #456]	@ (800c1fc <UART_SetConfig+0x69c>)
 800c034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	d826      	bhi.n	800c08c <UART_SetConfig+0x52c>
 800c03e:	a201      	add	r2, pc, #4	@ (adr r2, 800c044 <UART_SetConfig+0x4e4>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c05d 	.word	0x0800c05d
 800c048:	0800c065 	.word	0x0800c065
 800c04c:	0800c06d 	.word	0x0800c06d
 800c050:	0800c075 	.word	0x0800c075
 800c054:	0800c07d 	.word	0x0800c07d
 800c058:	0800c085 	.word	0x0800c085
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c062:	e050      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c064:	2304      	movs	r3, #4
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e04c      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c06c:	2308      	movs	r3, #8
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c072:	e048      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c074:	2310      	movs	r3, #16
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e044      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c07c:	2320      	movs	r3, #32
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e040      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c084:	2340      	movs	r3, #64	@ 0x40
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e03c      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c08c:	2380      	movs	r3, #128	@ 0x80
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e038      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a5b      	ldr	r2, [pc, #364]	@ (800c208 <UART_SetConfig+0x6a8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d130      	bne.n	800c100 <UART_SetConfig+0x5a0>
 800c09e:	4b57      	ldr	r3, [pc, #348]	@ (800c1fc <UART_SetConfig+0x69c>)
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d826      	bhi.n	800c0f8 <UART_SetConfig+0x598>
 800c0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b0 <UART_SetConfig+0x550>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0c9 	.word	0x0800c0c9
 800c0b4:	0800c0d1 	.word	0x0800c0d1
 800c0b8:	0800c0d9 	.word	0x0800c0d9
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e9 	.word	0x0800c0e9
 800c0c4:	0800c0f1 	.word	0x0800c0f1
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ce:	e01a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	e016      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0d8:	2308      	movs	r3, #8
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0de:	e012      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0e0:	2310      	movs	r3, #16
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e00e      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0e8:	2320      	movs	r3, #32
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e00a      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0f0:	2340      	movs	r3, #64	@ 0x40
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e006      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c0f8:	2380      	movs	r3, #128	@ 0x80
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e002      	b.n	800c106 <UART_SetConfig+0x5a6>
 800c100:	2380      	movs	r3, #128	@ 0x80
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a3f      	ldr	r2, [pc, #252]	@ (800c208 <UART_SetConfig+0x6a8>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	f040 80f8 	bne.w	800c302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c112:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c116:	2b20      	cmp	r3, #32
 800c118:	dc46      	bgt.n	800c1a8 <UART_SetConfig+0x648>
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	f2c0 8082 	blt.w	800c224 <UART_SetConfig+0x6c4>
 800c120:	3b02      	subs	r3, #2
 800c122:	2b1e      	cmp	r3, #30
 800c124:	d87e      	bhi.n	800c224 <UART_SetConfig+0x6c4>
 800c126:	a201      	add	r2, pc, #4	@ (adr r2, 800c12c <UART_SetConfig+0x5cc>)
 800c128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12c:	0800c1af 	.word	0x0800c1af
 800c130:	0800c225 	.word	0x0800c225
 800c134:	0800c1b7 	.word	0x0800c1b7
 800c138:	0800c225 	.word	0x0800c225
 800c13c:	0800c225 	.word	0x0800c225
 800c140:	0800c225 	.word	0x0800c225
 800c144:	0800c1c7 	.word	0x0800c1c7
 800c148:	0800c225 	.word	0x0800c225
 800c14c:	0800c225 	.word	0x0800c225
 800c150:	0800c225 	.word	0x0800c225
 800c154:	0800c225 	.word	0x0800c225
 800c158:	0800c225 	.word	0x0800c225
 800c15c:	0800c225 	.word	0x0800c225
 800c160:	0800c225 	.word	0x0800c225
 800c164:	0800c1d7 	.word	0x0800c1d7
 800c168:	0800c225 	.word	0x0800c225
 800c16c:	0800c225 	.word	0x0800c225
 800c170:	0800c225 	.word	0x0800c225
 800c174:	0800c225 	.word	0x0800c225
 800c178:	0800c225 	.word	0x0800c225
 800c17c:	0800c225 	.word	0x0800c225
 800c180:	0800c225 	.word	0x0800c225
 800c184:	0800c225 	.word	0x0800c225
 800c188:	0800c225 	.word	0x0800c225
 800c18c:	0800c225 	.word	0x0800c225
 800c190:	0800c225 	.word	0x0800c225
 800c194:	0800c225 	.word	0x0800c225
 800c198:	0800c225 	.word	0x0800c225
 800c19c:	0800c225 	.word	0x0800c225
 800c1a0:	0800c225 	.word	0x0800c225
 800c1a4:	0800c217 	.word	0x0800c217
 800c1a8:	2b40      	cmp	r3, #64	@ 0x40
 800c1aa:	d037      	beq.n	800c21c <UART_SetConfig+0x6bc>
 800c1ac:	e03a      	b.n	800c224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c1ae:	f7fc fe2b 	bl	8008e08 <HAL_RCCEx_GetD3PCLK1Freq>
 800c1b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1b4:	e03c      	b.n	800c230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fc fe3a 	bl	8008e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1c4:	e034      	b.n	800c230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c6:	f107 0318 	add.w	r3, r7, #24
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fc ff86 	bl	80090dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1d4:	e02c      	b.n	800c230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d6:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <UART_SetConfig+0x69c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 0320 	and.w	r3, r3, #32
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d016      	beq.n	800c210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1e2:	4b06      	ldr	r3, [pc, #24]	@ (800c1fc <UART_SetConfig+0x69c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	08db      	lsrs	r3, r3, #3
 800c1e8:	f003 0303 	and.w	r3, r3, #3
 800c1ec:	4a07      	ldr	r2, [pc, #28]	@ (800c20c <UART_SetConfig+0x6ac>)
 800c1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1f4:	e01c      	b.n	800c230 <UART_SetConfig+0x6d0>
 800c1f6:	bf00      	nop
 800c1f8:	40011400 	.word	0x40011400
 800c1fc:	58024400 	.word	0x58024400
 800c200:	40007800 	.word	0x40007800
 800c204:	40007c00 	.word	0x40007c00
 800c208:	58000c00 	.word	0x58000c00
 800c20c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c210:	4b9d      	ldr	r3, [pc, #628]	@ (800c488 <UART_SetConfig+0x928>)
 800c212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c214:	e00c      	b.n	800c230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c216:	4b9d      	ldr	r3, [pc, #628]	@ (800c48c <UART_SetConfig+0x92c>)
 800c218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c21a:	e009      	b.n	800c230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c21c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c222:	e005      	b.n	800c230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c22e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 81de 	beq.w	800c5f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23c:	4a94      	ldr	r2, [pc, #592]	@ (800c490 <UART_SetConfig+0x930>)
 800c23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c242:	461a      	mov	r2, r3
 800c244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c246:	fbb3 f3f2 	udiv	r3, r3, r2
 800c24a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	685a      	ldr	r2, [r3, #4]
 800c250:	4613      	mov	r3, r2
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	4413      	add	r3, r2
 800c256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c258:	429a      	cmp	r2, r3
 800c25a:	d305      	bcc.n	800c268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c264:	429a      	cmp	r2, r3
 800c266:	d903      	bls.n	800c270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c26e:	e1c1      	b.n	800c5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c272:	2200      	movs	r2, #0
 800c274:	60bb      	str	r3, [r7, #8]
 800c276:	60fa      	str	r2, [r7, #12]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27c:	4a84      	ldr	r2, [pc, #528]	@ (800c490 <UART_SetConfig+0x930>)
 800c27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c282:	b29b      	uxth	r3, r3
 800c284:	2200      	movs	r2, #0
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c292:	f7f4 fa39 	bl	8000708 <__aeabi_uldivmod>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	4610      	mov	r0, r2
 800c29c:	4619      	mov	r1, r3
 800c29e:	f04f 0200 	mov.w	r2, #0
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	020b      	lsls	r3, r1, #8
 800c2a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2ac:	0202      	lsls	r2, r0, #8
 800c2ae:	6979      	ldr	r1, [r7, #20]
 800c2b0:	6849      	ldr	r1, [r1, #4]
 800c2b2:	0849      	lsrs	r1, r1, #1
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	eb12 0804 	adds.w	r8, r2, r4
 800c2be:	eb43 0905 	adc.w	r9, r3, r5
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	469a      	mov	sl, r3
 800c2ca:	4693      	mov	fp, r2
 800c2cc:	4652      	mov	r2, sl
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f4 fa18 	bl	8000708 <__aeabi_uldivmod>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4613      	mov	r3, r2
 800c2de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2e6:	d308      	bcc.n	800c2fa <UART_SetConfig+0x79a>
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2ee:	d204      	bcs.n	800c2fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2f6:	60da      	str	r2, [r3, #12]
 800c2f8:	e17c      	b.n	800c5f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c300:	e178      	b.n	800c5f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c30a:	f040 80c5 	bne.w	800c498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c30e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c312:	2b20      	cmp	r3, #32
 800c314:	dc48      	bgt.n	800c3a8 <UART_SetConfig+0x848>
 800c316:	2b00      	cmp	r3, #0
 800c318:	db7b      	blt.n	800c412 <UART_SetConfig+0x8b2>
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d879      	bhi.n	800c412 <UART_SetConfig+0x8b2>
 800c31e:	a201      	add	r2, pc, #4	@ (adr r2, 800c324 <UART_SetConfig+0x7c4>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c3af 	.word	0x0800c3af
 800c328:	0800c3b7 	.word	0x0800c3b7
 800c32c:	0800c413 	.word	0x0800c413
 800c330:	0800c413 	.word	0x0800c413
 800c334:	0800c3bf 	.word	0x0800c3bf
 800c338:	0800c413 	.word	0x0800c413
 800c33c:	0800c413 	.word	0x0800c413
 800c340:	0800c413 	.word	0x0800c413
 800c344:	0800c3cf 	.word	0x0800c3cf
 800c348:	0800c413 	.word	0x0800c413
 800c34c:	0800c413 	.word	0x0800c413
 800c350:	0800c413 	.word	0x0800c413
 800c354:	0800c413 	.word	0x0800c413
 800c358:	0800c413 	.word	0x0800c413
 800c35c:	0800c413 	.word	0x0800c413
 800c360:	0800c413 	.word	0x0800c413
 800c364:	0800c3df 	.word	0x0800c3df
 800c368:	0800c413 	.word	0x0800c413
 800c36c:	0800c413 	.word	0x0800c413
 800c370:	0800c413 	.word	0x0800c413
 800c374:	0800c413 	.word	0x0800c413
 800c378:	0800c413 	.word	0x0800c413
 800c37c:	0800c413 	.word	0x0800c413
 800c380:	0800c413 	.word	0x0800c413
 800c384:	0800c413 	.word	0x0800c413
 800c388:	0800c413 	.word	0x0800c413
 800c38c:	0800c413 	.word	0x0800c413
 800c390:	0800c413 	.word	0x0800c413
 800c394:	0800c413 	.word	0x0800c413
 800c398:	0800c413 	.word	0x0800c413
 800c39c:	0800c413 	.word	0x0800c413
 800c3a0:	0800c413 	.word	0x0800c413
 800c3a4:	0800c405 	.word	0x0800c405
 800c3a8:	2b40      	cmp	r3, #64	@ 0x40
 800c3aa:	d02e      	beq.n	800c40a <UART_SetConfig+0x8aa>
 800c3ac:	e031      	b.n	800c412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3ae:	f7fb fab3 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800c3b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3b4:	e033      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3b6:	f7fb fac5 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800c3ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3bc:	e02f      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fc fd36 	bl	8008e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3cc:	e027      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ce:	f107 0318 	add.w	r3, r7, #24
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fc fe82 	bl	80090dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3dc:	e01f      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3de:	4b2d      	ldr	r3, [pc, #180]	@ (800c494 <UART_SetConfig+0x934>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d009      	beq.n	800c3fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c494 <UART_SetConfig+0x934>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	08db      	lsrs	r3, r3, #3
 800c3f0:	f003 0303 	and.w	r3, r3, #3
 800c3f4:	4a24      	ldr	r2, [pc, #144]	@ (800c488 <UART_SetConfig+0x928>)
 800c3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3fc:	e00f      	b.n	800c41e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c3fe:	4b22      	ldr	r3, [pc, #136]	@ (800c488 <UART_SetConfig+0x928>)
 800c400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c402:	e00c      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c404:	4b21      	ldr	r3, [pc, #132]	@ (800c48c <UART_SetConfig+0x92c>)
 800c406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c408:	e009      	b.n	800c41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c410:	e005      	b.n	800c41e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c41c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 80e7 	beq.w	800c5f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42a:	4a19      	ldr	r2, [pc, #100]	@ (800c490 <UART_SetConfig+0x930>)
 800c42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c430:	461a      	mov	r2, r3
 800c432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c434:	fbb3 f3f2 	udiv	r3, r3, r2
 800c438:	005a      	lsls	r2, r3, #1
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	441a      	add	r2, r3
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44e:	2b0f      	cmp	r3, #15
 800c450:	d916      	bls.n	800c480 <UART_SetConfig+0x920>
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c458:	d212      	bcs.n	800c480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	f023 030f 	bic.w	r3, r3, #15
 800c462:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	b29a      	uxth	r2, r3
 800c470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c472:	4313      	orrs	r3, r2
 800c474:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c47c:	60da      	str	r2, [r3, #12]
 800c47e:	e0b9      	b.n	800c5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c486:	e0b5      	b.n	800c5f4 <UART_SetConfig+0xa94>
 800c488:	03d09000 	.word	0x03d09000
 800c48c:	003d0900 	.word	0x003d0900
 800c490:	08017144 	.word	0x08017144
 800c494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c498:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c49c:	2b20      	cmp	r3, #32
 800c49e:	dc49      	bgt.n	800c534 <UART_SetConfig+0x9d4>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	db7c      	blt.n	800c59e <UART_SetConfig+0xa3e>
 800c4a4:	2b20      	cmp	r3, #32
 800c4a6:	d87a      	bhi.n	800c59e <UART_SetConfig+0xa3e>
 800c4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <UART_SetConfig+0x950>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c53b 	.word	0x0800c53b
 800c4b4:	0800c543 	.word	0x0800c543
 800c4b8:	0800c59f 	.word	0x0800c59f
 800c4bc:	0800c59f 	.word	0x0800c59f
 800c4c0:	0800c54b 	.word	0x0800c54b
 800c4c4:	0800c59f 	.word	0x0800c59f
 800c4c8:	0800c59f 	.word	0x0800c59f
 800c4cc:	0800c59f 	.word	0x0800c59f
 800c4d0:	0800c55b 	.word	0x0800c55b
 800c4d4:	0800c59f 	.word	0x0800c59f
 800c4d8:	0800c59f 	.word	0x0800c59f
 800c4dc:	0800c59f 	.word	0x0800c59f
 800c4e0:	0800c59f 	.word	0x0800c59f
 800c4e4:	0800c59f 	.word	0x0800c59f
 800c4e8:	0800c59f 	.word	0x0800c59f
 800c4ec:	0800c59f 	.word	0x0800c59f
 800c4f0:	0800c56b 	.word	0x0800c56b
 800c4f4:	0800c59f 	.word	0x0800c59f
 800c4f8:	0800c59f 	.word	0x0800c59f
 800c4fc:	0800c59f 	.word	0x0800c59f
 800c500:	0800c59f 	.word	0x0800c59f
 800c504:	0800c59f 	.word	0x0800c59f
 800c508:	0800c59f 	.word	0x0800c59f
 800c50c:	0800c59f 	.word	0x0800c59f
 800c510:	0800c59f 	.word	0x0800c59f
 800c514:	0800c59f 	.word	0x0800c59f
 800c518:	0800c59f 	.word	0x0800c59f
 800c51c:	0800c59f 	.word	0x0800c59f
 800c520:	0800c59f 	.word	0x0800c59f
 800c524:	0800c59f 	.word	0x0800c59f
 800c528:	0800c59f 	.word	0x0800c59f
 800c52c:	0800c59f 	.word	0x0800c59f
 800c530:	0800c591 	.word	0x0800c591
 800c534:	2b40      	cmp	r3, #64	@ 0x40
 800c536:	d02e      	beq.n	800c596 <UART_SetConfig+0xa36>
 800c538:	e031      	b.n	800c59e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c53a:	f7fb f9ed 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800c53e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c540:	e033      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c542:	f7fb f9ff 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800c546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c548:	e02f      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fc fc70 	bl	8008e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c558:	e027      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c55a:	f107 0318 	add.w	r3, r7, #24
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fc fdbc 	bl	80090dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c568:	e01f      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c56a:	4b2d      	ldr	r3, [pc, #180]	@ (800c620 <UART_SetConfig+0xac0>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0320 	and.w	r3, r3, #32
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c576:	4b2a      	ldr	r3, [pc, #168]	@ (800c620 <UART_SetConfig+0xac0>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	08db      	lsrs	r3, r3, #3
 800c57c:	f003 0303 	and.w	r3, r3, #3
 800c580:	4a28      	ldr	r2, [pc, #160]	@ (800c624 <UART_SetConfig+0xac4>)
 800c582:	fa22 f303 	lsr.w	r3, r2, r3
 800c586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c588:	e00f      	b.n	800c5aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c58a:	4b26      	ldr	r3, [pc, #152]	@ (800c624 <UART_SetConfig+0xac4>)
 800c58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c58e:	e00c      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c590:	4b25      	ldr	r3, [pc, #148]	@ (800c628 <UART_SetConfig+0xac8>)
 800c592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c594:	e009      	b.n	800c5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c59c:	e005      	b.n	800c5aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5a8:	bf00      	nop
    }

    if (pclk != 0U)
 800c5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d021      	beq.n	800c5f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c62c <UART_SetConfig+0xacc>)
 800c5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5be:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	085b      	lsrs	r3, r3, #1
 800c5c8:	441a      	add	r2, r3
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d909      	bls.n	800c5ee <UART_SetConfig+0xa8e>
 800c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5e0:	d205      	bcs.n	800c5ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60da      	str	r2, [r3, #12]
 800c5ec:	e002      	b.n	800c5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2200      	movs	r2, #0
 800c608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2200      	movs	r2, #0
 800c60e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c610:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c614:	4618      	mov	r0, r3
 800c616:	3748      	adds	r7, #72	@ 0x48
 800c618:	46bd      	mov	sp, r7
 800c61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c61e:	bf00      	nop
 800c620:	58024400 	.word	0x58024400
 800c624:	03d09000 	.word	0x03d09000
 800c628:	003d0900 	.word	0x003d0900
 800c62c:	08017144 	.word	0x08017144

0800c630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c63c:	f003 0308 	and.w	r3, r3, #8
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a2:	f003 0304 	and.w	r3, r3, #4
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	430a      	orrs	r2, r1
 800c6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c4:	f003 0310 	and.w	r3, r3, #16
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00a      	beq.n	800c6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6e6:	f003 0320 	and.w	r3, r3, #32
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00a      	beq.n	800c704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01a      	beq.n	800c746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	430a      	orrs	r2, r1
 800c724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c72e:	d10a      	bne.n	800c746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	605a      	str	r2, [r3, #4]
  }
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b098      	sub	sp, #96	@ 0x60
 800c778:	af02      	add	r7, sp, #8
 800c77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c784:	f7f8 fa3a 	bl	8004bfc <HAL_GetTick>
 800c788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0308 	and.w	r3, r3, #8
 800c794:	2b08      	cmp	r3, #8
 800c796:	d12f      	bne.n	800c7f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f88e 	bl	800c8c8 <UART_WaitOnFlagUntilTimeout>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d022      	beq.n	800c7f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ba:	e853 3f00 	ldrex	r3, [r3]
 800c7be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7d8:	e841 2300 	strex	r3, r2, [r1]
 800c7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1e6      	bne.n	800c7b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e063      	b.n	800c8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0304 	and.w	r3, r3, #4
 800c802:	2b04      	cmp	r3, #4
 800c804:	d149      	bne.n	800c89a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c80e:	2200      	movs	r2, #0
 800c810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f857 	bl	800c8c8 <UART_WaitOnFlagUntilTimeout>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d03c      	beq.n	800c89a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	e853 3f00 	ldrex	r3, [r3]
 800c82c:	623b      	str	r3, [r7, #32]
   return(result);
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c83e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c846:	e841 2300 	strex	r3, r2, [r1]
 800c84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1e6      	bne.n	800c820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3308      	adds	r3, #8
 800c858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	e853 3f00 	ldrex	r3, [r3]
 800c860:	60fb      	str	r3, [r7, #12]
   return(result);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f023 0301 	bic.w	r3, r3, #1
 800c868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3308      	adds	r3, #8
 800c870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c872:	61fa      	str	r2, [r7, #28]
 800c874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c876:	69b9      	ldr	r1, [r7, #24]
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	e841 2300 	strex	r3, r2, [r1]
 800c87e:	617b      	str	r3, [r7, #20]
   return(result);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1e5      	bne.n	800c852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2220      	movs	r2, #32
 800c88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e012      	b.n	800c8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2220      	movs	r2, #32
 800c89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3758      	adds	r7, #88	@ 0x58
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8d8:	e04f      	b.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8e0:	d04b      	beq.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8e2:	f7f8 f98b 	bl	8004bfc <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	69ba      	ldr	r2, [r7, #24]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d302      	bcc.n	800c8f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e04e      	b.n	800c99a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0304 	and.w	r3, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	d037      	beq.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b80      	cmp	r3, #128	@ 0x80
 800c90e:	d034      	beq.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	2b40      	cmp	r3, #64	@ 0x40
 800c914:	d031      	beq.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	69db      	ldr	r3, [r3, #28]
 800c91c:	f003 0308 	and.w	r3, r3, #8
 800c920:	2b08      	cmp	r3, #8
 800c922:	d110      	bne.n	800c946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2208      	movs	r2, #8
 800c92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f95b 	bl	800cbe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2208      	movs	r2, #8
 800c936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e029      	b.n	800c99a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c954:	d111      	bne.n	800c97a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 f941 	bl	800cbe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2220      	movs	r2, #32
 800c96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e00f      	b.n	800c99a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69da      	ldr	r2, [r3, #28]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	4013      	ands	r3, r2
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	429a      	cmp	r2, r3
 800c988:	bf0c      	ite	eq
 800c98a:	2301      	moveq	r3, #1
 800c98c:	2300      	movne	r3, #0
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	461a      	mov	r2, r3
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	429a      	cmp	r2, r3
 800c996:	d0a0      	beq.n	800c8da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
	...

0800c9a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b0a3      	sub	sp, #140	@ 0x8c
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	88fa      	ldrh	r2, [r7, #6]
 800c9bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	88fa      	ldrh	r2, [r7, #6]
 800c9c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9d6:	d10e      	bne.n	800c9f6 <UART_Start_Receive_IT+0x52>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d105      	bne.n	800c9ec <UART_Start_Receive_IT+0x48>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c9e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9ea:	e02d      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	22ff      	movs	r2, #255	@ 0xff
 800c9f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9f4:	e028      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10d      	bne.n	800ca1a <UART_Start_Receive_IT+0x76>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d104      	bne.n	800ca10 <UART_Start_Receive_IT+0x6c>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	22ff      	movs	r2, #255	@ 0xff
 800ca0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca0e:	e01b      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	227f      	movs	r2, #127	@ 0x7f
 800ca14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca18:	e016      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca22:	d10d      	bne.n	800ca40 <UART_Start_Receive_IT+0x9c>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d104      	bne.n	800ca36 <UART_Start_Receive_IT+0x92>
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	227f      	movs	r2, #127	@ 0x7f
 800ca30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca34:	e008      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	223f      	movs	r2, #63	@ 0x3f
 800ca3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca3e:	e003      	b.n	800ca48 <UART_Start_Receive_IT+0xa4>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2222      	movs	r2, #34	@ 0x22
 800ca54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ca68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca6a:	f043 0301 	orr.w	r3, r3, #1
 800ca6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3308      	adds	r3, #8
 800ca78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ca7c:	673a      	str	r2, [r7, #112]	@ 0x70
 800ca7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ca8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e3      	bne.n	800ca58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca98:	d14f      	bne.n	800cb3a <UART_Start_Receive_IT+0x196>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800caa0:	88fa      	ldrh	r2, [r7, #6]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d349      	bcc.n	800cb3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caae:	d107      	bne.n	800cac0 <UART_Start_Receive_IT+0x11c>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	4a47      	ldr	r2, [pc, #284]	@ (800cbd8 <UART_Start_Receive_IT+0x234>)
 800cabc:	675a      	str	r2, [r3, #116]	@ 0x74
 800cabe:	e002      	b.n	800cac6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4a46      	ldr	r2, [pc, #280]	@ (800cbdc <UART_Start_Receive_IT+0x238>)
 800cac4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d01a      	beq.n	800cb04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cae2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800caf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800caf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caf8:	e841 2300 	strex	r3, r2, [r1]
 800cafc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cafe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e4      	bne.n	800cace <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3308      	adds	r3, #8
 800cb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb0e:	e853 3f00 	ldrex	r3, [r3]
 800cb12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3308      	adds	r3, #8
 800cb22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb24:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cb26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb2c:	e841 2300 	strex	r3, r2, [r1]
 800cb30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e5      	bne.n	800cb04 <UART_Start_Receive_IT+0x160>
 800cb38:	e046      	b.n	800cbc8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb42:	d107      	bne.n	800cb54 <UART_Start_Receive_IT+0x1b0>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d103      	bne.n	800cb54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4a24      	ldr	r2, [pc, #144]	@ (800cbe0 <UART_Start_Receive_IT+0x23c>)
 800cb50:	675a      	str	r2, [r3, #116]	@ 0x74
 800cb52:	e002      	b.n	800cb5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4a23      	ldr	r2, [pc, #140]	@ (800cbe4 <UART_Start_Receive_IT+0x240>)
 800cb58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d019      	beq.n	800cb96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cb76:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb80:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb88:	e841 2300 	strex	r3, r2, [r1]
 800cb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1e6      	bne.n	800cb62 <UART_Start_Receive_IT+0x1be>
 800cb94:	e018      	b.n	800cbc8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	613b      	str	r3, [r7, #16]
   return(result);
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	f043 0320 	orr.w	r3, r3, #32
 800cbaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbb4:	623b      	str	r3, [r7, #32]
 800cbb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	69f9      	ldr	r1, [r7, #28]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e6      	bne.n	800cb96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	378c      	adds	r7, #140	@ 0x8c
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	0800d409 	.word	0x0800d409
 800cbdc:	0800d0a9 	.word	0x0800d0a9
 800cbe0:	0800cef1 	.word	0x0800cef1
 800cbe4:	0800cd39 	.word	0x0800cd39

0800cbe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b095      	sub	sp, #84	@ 0x54
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf8:	e853 3f00 	ldrex	r3, [r3]
 800cbfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc16:	e841 2300 	strex	r3, r2, [r1]
 800cc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1e6      	bne.n	800cbf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3308      	adds	r3, #8
 800cc28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc32:	69fa      	ldr	r2, [r7, #28]
 800cc34:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb0 <UART_EndRxTransfer+0xc8>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3308      	adds	r3, #8
 800cc40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e5      	bne.n	800cc22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d118      	bne.n	800cc90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	e853 3f00 	ldrex	r3, [r3]
 800cc6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f023 0310 	bic.w	r3, r3, #16
 800cc72:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc80:	6979      	ldr	r1, [r7, #20]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	e841 2300 	strex	r3, r2, [r1]
 800cc88:	613b      	str	r3, [r7, #16]
   return(result);
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1e6      	bne.n	800cc5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2220      	movs	r2, #32
 800cc94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cca4:	bf00      	nop
 800cca6:	3754      	adds	r7, #84	@ 0x54
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	effffffe 	.word	0xeffffffe

0800ccb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7fe ff2e 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	e853 3f00 	ldrex	r3, [r3]
 800ccf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccfc:	61fb      	str	r3, [r7, #28]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0a:	6979      	ldr	r1, [r7, #20]
 800cd0c:	69ba      	ldr	r2, [r7, #24]
 800cd0e:	e841 2300 	strex	r3, r2, [r1]
 800cd12:	613b      	str	r3, [r7, #16]
   return(result);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1e6      	bne.n	800cce8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7fe fef9 	bl	800bb20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd2e:	bf00      	nop
 800cd30:	3720      	adds	r7, #32
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b09c      	sub	sp, #112	@ 0x70
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd50:	2b22      	cmp	r3, #34	@ 0x22
 800cd52:	f040 80be 	bne.w	800ced2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cd64:	b2d9      	uxtb	r1, r3
 800cd66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd70:	400a      	ands	r2, r1
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 80a1 	bne.w	800cee2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cda8:	e853 3f00 	ldrex	r3, [r3]
 800cdac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e6      	bne.n	800cda0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cddc:	e853 3f00 	ldrex	r3, [r3]
 800cde0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde4:	f023 0301 	bic.w	r3, r3, #1
 800cde8:	667b      	str	r3, [r7, #100]	@ 0x64
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cdf2:	647a      	str	r2, [r7, #68]	@ 0x44
 800cdf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e5      	bne.n	800cdd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a33      	ldr	r2, [pc, #204]	@ (800ceec <UART_RxISR_8BIT+0x1b4>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d01f      	beq.n	800ce64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d018      	beq.n	800ce64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3a:	e853 3f00 	ldrex	r3, [r3]
 800ce3e:	623b      	str	r3, [r7, #32]
   return(result);
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce46:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce58:	e841 2300 	strex	r3, r2, [r1]
 800ce5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e6      	bne.n	800ce32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d12e      	bne.n	800ceca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	e853 3f00 	ldrex	r3, [r3]
 800ce7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 0310 	bic.w	r3, r3, #16
 800ce86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce90:	61fb      	str	r3, [r7, #28]
 800ce92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce94:	69b9      	ldr	r1, [r7, #24]
 800ce96:	69fa      	ldr	r2, [r7, #28]
 800ce98:	e841 2300 	strex	r3, r2, [r1]
 800ce9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1e6      	bne.n	800ce72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	f003 0310 	and.w	r3, r3, #16
 800ceae:	2b10      	cmp	r3, #16
 800ceb0:	d103      	bne.n	800ceba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2210      	movs	r2, #16
 800ceb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7fe fe40 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cec8:	e00b      	b.n	800cee2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7f5 f9e0 	bl	8002290 <HAL_UART_RxCpltCallback>
}
 800ced0:	e007      	b.n	800cee2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	699a      	ldr	r2, [r3, #24]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f042 0208 	orr.w	r2, r2, #8
 800cee0:	619a      	str	r2, [r3, #24]
}
 800cee2:	bf00      	nop
 800cee4:	3770      	adds	r7, #112	@ 0x70
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	58000c00 	.word	0x58000c00

0800cef0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b09c      	sub	sp, #112	@ 0x70
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cefe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf08:	2b22      	cmp	r3, #34	@ 0x22
 800cf0a:	f040 80be 	bne.w	800d08a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cf1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cf22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cf26:	4013      	ands	r3, r2
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf32:	1c9a      	adds	r2, r3, #2
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	3b01      	subs	r3, #1
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f040 80a1 	bne.w	800d09a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf60:	e853 3f00 	ldrex	r3, [r3]
 800cf64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cf66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf76:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf7e:	e841 2300 	strex	r3, r2, [r1]
 800cf82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cf84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1e6      	bne.n	800cf58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3308      	adds	r3, #8
 800cf90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf94:	e853 3f00 	ldrex	r3, [r3]
 800cf98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	f023 0301 	bic.w	r3, r3, #1
 800cfa0:	663b      	str	r3, [r7, #96]	@ 0x60
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cfaa:	643a      	str	r2, [r7, #64]	@ 0x40
 800cfac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e5      	bne.n	800cf8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a33      	ldr	r2, [pc, #204]	@ (800d0a4 <UART_RxISR_16BIT+0x1b4>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d01f      	beq.n	800d01c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d018      	beq.n	800d01c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	461a      	mov	r2, r3
 800d006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d00a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d00e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d010:	e841 2300 	strex	r3, r2, [r1]
 800d014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1e6      	bne.n	800cfea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d020:	2b01      	cmp	r3, #1
 800d022:	d12e      	bne.n	800d082 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	60bb      	str	r3, [r7, #8]
   return(result);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f023 0310 	bic.w	r3, r3, #16
 800d03e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	6979      	ldr	r1, [r7, #20]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	613b      	str	r3, [r7, #16]
   return(result);
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e6      	bne.n	800d02a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	f003 0310 	and.w	r3, r3, #16
 800d066:	2b10      	cmp	r3, #16
 800d068:	d103      	bne.n	800d072 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2210      	movs	r2, #16
 800d070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7fe fd64 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d080:	e00b      	b.n	800d09a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7f5 f904 	bl	8002290 <HAL_UART_RxCpltCallback>
}
 800d088:	e007      	b.n	800d09a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	699a      	ldr	r2, [r3, #24]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f042 0208 	orr.w	r2, r2, #8
 800d098:	619a      	str	r2, [r3, #24]
}
 800d09a:	bf00      	nop
 800d09c:	3770      	adds	r7, #112	@ 0x70
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	58000c00 	.word	0x58000c00

0800d0a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b0ac      	sub	sp, #176	@ 0xb0
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d0b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0de:	2b22      	cmp	r3, #34	@ 0x22
 800d0e0:	f040 8180 	bne.w	800d3e4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d0ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0ee:	e123      	b.n	800d338 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d0fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d0fe:	b2d9      	uxtb	r1, r3
 800d100:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d104:	b2da      	uxtb	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d10a:	400a      	ands	r2, r1
 800d10c:	b2d2      	uxtb	r2, r2
 800d10e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d120:	b29b      	uxth	r3, r3
 800d122:	3b01      	subs	r3, #1
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	69db      	ldr	r3, [r3, #28]
 800d132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d13a:	f003 0307 	and.w	r3, r3, #7
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d053      	beq.n	800d1ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d011      	beq.n	800d172 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d14e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00b      	beq.n	800d172 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2201      	movs	r2, #1
 800d160:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d168:	f043 0201 	orr.w	r2, r3, #1
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d176:	f003 0302 	and.w	r3, r3, #2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d011      	beq.n	800d1a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d17e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00b      	beq.n	800d1a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2202      	movs	r2, #2
 800d190:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d198:	f043 0204 	orr.w	r2, r3, #4
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1a6:	f003 0304 	and.w	r3, r3, #4
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d011      	beq.n	800d1d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d1ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2204      	movs	r2, #4
 800d1c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c8:	f043 0202 	orr.w	r2, r3, #2
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d006      	beq.n	800d1ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7fe fca9 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f040 80a0 	bne.w	800d338 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d200:	e853 3f00 	ldrex	r3, [r3]
 800d204:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d20c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d21a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d21c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d220:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e4      	bne.n	800d1f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3308      	adds	r3, #8
 800d234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d23e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d240:	4b6e      	ldr	r3, [pc, #440]	@ (800d3fc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d242:	4013      	ands	r3, r2
 800d244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3308      	adds	r3, #8
 800d24e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d252:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d254:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d256:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d258:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d25a:	e841 2300 	strex	r3, r2, [r1]
 800d25e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e3      	bne.n	800d22e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2220      	movs	r2, #32
 800d26a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a60      	ldr	r2, [pc, #384]	@ (800d400 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d021      	beq.n	800d2c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d01a      	beq.n	800d2c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2bc:	e841 2300 	strex	r3, r2, [r1]
 800d2c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e4      	bne.n	800d292 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d130      	bne.n	800d332 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2de:	e853 3f00 	ldrex	r3, [r3]
 800d2e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e6:	f023 0310 	bic.w	r3, r3, #16
 800d2ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e4      	bne.n	800d2d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f003 0310 	and.w	r3, r3, #16
 800d316:	2b10      	cmp	r3, #16
 800d318:	d103      	bne.n	800d322 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2210      	movs	r2, #16
 800d320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7fe fc0c 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
 800d330:	e002      	b.n	800d338 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7f4 ffac 	bl	8002290 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d338:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d344:	f003 0320 	and.w	r3, r3, #32
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f47f aed1 	bne.w	800d0f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d354:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d358:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d049      	beq.n	800d3f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d366:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d242      	bcs.n	800d3f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3308      	adds	r3, #8
 800d374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	e853 3f00 	ldrex	r3, [r3]
 800d37c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3308      	adds	r3, #8
 800d38e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d39a:	e841 2300 	strex	r3, r2, [r1]
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e3      	bne.n	800d36e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a16      	ldr	r2, [pc, #88]	@ (800d404 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d3aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	e853 3f00 	ldrex	r3, [r3]
 800d3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f043 0320 	orr.w	r3, r3, #32
 800d3c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d3ce:	61bb      	str	r3, [r7, #24]
 800d3d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d2:	6979      	ldr	r1, [r7, #20]
 800d3d4:	69ba      	ldr	r2, [r7, #24]
 800d3d6:	e841 2300 	strex	r3, r2, [r1]
 800d3da:	613b      	str	r3, [r7, #16]
   return(result);
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1e4      	bne.n	800d3ac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3e2:	e007      	b.n	800d3f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	699a      	ldr	r2, [r3, #24]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f042 0208 	orr.w	r2, r2, #8
 800d3f2:	619a      	str	r2, [r3, #24]
}
 800d3f4:	bf00      	nop
 800d3f6:	37b0      	adds	r7, #176	@ 0xb0
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	effffffe 	.word	0xeffffffe
 800d400:	58000c00 	.word	0x58000c00
 800d404:	0800cd39 	.word	0x0800cd39

0800d408 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b0ae      	sub	sp, #184	@ 0xb8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d416:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	69db      	ldr	r3, [r3, #28]
 800d420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d43e:	2b22      	cmp	r3, #34	@ 0x22
 800d440:	f040 8184 	bne.w	800d74c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d44a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d44e:	e127      	b.n	800d6a0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d456:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d45e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d462:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d466:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d46a:	4013      	ands	r3, r2
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d472:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d478:	1c9a      	adds	r2, r3, #2
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d484:	b29b      	uxth	r3, r3
 800d486:	3b01      	subs	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d49a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d49e:	f003 0307 	and.w	r3, r3, #7
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d053      	beq.n	800d54e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d011      	beq.n	800d4d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00b      	beq.n	800d4d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4cc:	f043 0201 	orr.w	r2, r3, #1
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d011      	beq.n	800d506 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4fc:	f043 0204 	orr.w	r2, r3, #4
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d50a:	f003 0304 	and.w	r3, r3, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d011      	beq.n	800d536 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2204      	movs	r2, #4
 800d524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d52c:	f043 0202 	orr.w	r2, r3, #2
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7fe faf7 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d554:	b29b      	uxth	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	f040 80a2 	bne.w	800d6a0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d564:	e853 3f00 	ldrex	r3, [r3]
 800d568:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d56a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d56c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	461a      	mov	r2, r3
 800d57a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d57e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d582:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d584:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d586:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d58a:	e841 2300 	strex	r3, r2, [r1]
 800d58e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e2      	bne.n	800d55c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3308      	adds	r3, #8
 800d59c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d5a0:	e853 3f00 	ldrex	r3, [r3]
 800d5a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d5a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d5a8:	4b6e      	ldr	r3, [pc, #440]	@ (800d764 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d5ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d5bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d5c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d5c2:	e841 2300 	strex	r3, r2, [r1]
 800d5c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d5c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1e3      	bne.n	800d596 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2220      	movs	r2, #32
 800d5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a60      	ldr	r2, [pc, #384]	@ (800d768 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d021      	beq.n	800d630 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d01a      	beq.n	800d630 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d60a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d60e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d61c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d61e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d620:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d622:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d624:	e841 2300 	strex	r3, r2, [r1]
 800d628:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e4      	bne.n	800d5fa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d634:	2b01      	cmp	r3, #1
 800d636:	d130      	bne.n	800d69a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d646:	e853 3f00 	ldrex	r3, [r3]
 800d64a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d64e:	f023 0310 	bic.w	r3, r3, #16
 800d652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	461a      	mov	r2, r3
 800d65c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d660:	647b      	str	r3, [r7, #68]	@ 0x44
 800d662:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d668:	e841 2300 	strex	r3, r2, [r1]
 800d66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1e4      	bne.n	800d63e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	f003 0310 	and.w	r3, r3, #16
 800d67e:	2b10      	cmp	r3, #16
 800d680:	d103      	bne.n	800d68a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2210      	movs	r2, #16
 800d688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7fe fa58 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
 800d698:	e002      	b.n	800d6a0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7f4 fdf8 	bl	8002290 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d006      	beq.n	800d6b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d6a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d6ac:	f003 0320 	and.w	r3, r3, #32
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f47f aecd 	bne.w	800d450 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d049      	beq.n	800d75c <UART_RxISR_16BIT_FIFOEN+0x354>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d6ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d242      	bcs.n	800d75c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3308      	adds	r3, #8
 800d6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e3      	bne.n	800d6d6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a16      	ldr	r2, [pc, #88]	@ (800d76c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d712:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	60fb      	str	r3, [r7, #12]
   return(result);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f043 0320 	orr.w	r3, r3, #32
 800d728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	461a      	mov	r2, r3
 800d732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d736:	61fb      	str	r3, [r7, #28]
 800d738:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73a:	69b9      	ldr	r1, [r7, #24]
 800d73c:	69fa      	ldr	r2, [r7, #28]
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	617b      	str	r3, [r7, #20]
   return(result);
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e4      	bne.n	800d714 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d74a:	e007      	b.n	800d75c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 0208 	orr.w	r2, r2, #8
 800d75a:	619a      	str	r2, [r3, #24]
}
 800d75c:	bf00      	nop
 800d75e:	37b8      	adds	r7, #184	@ 0xb8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	effffffe 	.word	0xeffffffe
 800d768:	58000c00 	.word	0x58000c00
 800d76c:	0800cef1 	.word	0x0800cef1

0800d770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e027      	b.n	800d812 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2224      	movs	r2, #36	@ 0x24
 800d7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f022 0201 	bic.w	r2, r2, #1
 800d7e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2220      	movs	r2, #32
 800d804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d101      	bne.n	800d836 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d832:	2302      	movs	r3, #2
 800d834:	e02d      	b.n	800d892 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2224      	movs	r2, #36	@ 0x24
 800d842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f022 0201 	bic.w	r2, r2, #1
 800d85c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f850 	bl	800d918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2220      	movs	r2, #32
 800d884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d101      	bne.n	800d8b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	e02d      	b.n	800d90e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2224      	movs	r2, #36	@ 0x24
 800d8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f022 0201 	bic.w	r2, r2, #1
 800d8d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	430a      	orrs	r2, r1
 800d8ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f812 	bl	800d918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d924:	2b00      	cmp	r3, #0
 800d926:	d108      	bne.n	800d93a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d938:	e031      	b.n	800d99e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d93a:	2310      	movs	r3, #16
 800d93c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d93e:	2310      	movs	r3, #16
 800d940:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	0e5b      	lsrs	r3, r3, #25
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	f003 0307 	and.w	r3, r3, #7
 800d950:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	0f5b      	lsrs	r3, r3, #29
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f003 0307 	and.w	r3, r3, #7
 800d960:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d962:	7bbb      	ldrb	r3, [r7, #14]
 800d964:	7b3a      	ldrb	r2, [r7, #12]
 800d966:	4911      	ldr	r1, [pc, #68]	@ (800d9ac <UARTEx_SetNbDataToProcess+0x94>)
 800d968:	5c8a      	ldrb	r2, [r1, r2]
 800d96a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d96e:	7b3a      	ldrb	r2, [r7, #12]
 800d970:	490f      	ldr	r1, [pc, #60]	@ (800d9b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d972:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d974:	fb93 f3f2 	sdiv	r3, r3, r2
 800d978:	b29a      	uxth	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	7b7a      	ldrb	r2, [r7, #13]
 800d984:	4909      	ldr	r1, [pc, #36]	@ (800d9ac <UARTEx_SetNbDataToProcess+0x94>)
 800d986:	5c8a      	ldrb	r2, [r1, r2]
 800d988:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d98c:	7b7a      	ldrb	r2, [r7, #13]
 800d98e:	4908      	ldr	r1, [pc, #32]	@ (800d9b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d990:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d992:	fb93 f3f2 	sdiv	r3, r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d99e:	bf00      	nop
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	0801715c 	.word	0x0801715c
 800d9b0:	08017164 	.word	0x08017164

0800d9b4 <__NVIC_SetPriority>:
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6039      	str	r1, [r7, #0]
 800d9be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d9c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	db0a      	blt.n	800d9de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	490c      	ldr	r1, [pc, #48]	@ (800da00 <__NVIC_SetPriority+0x4c>)
 800d9ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9d2:	0112      	lsls	r2, r2, #4
 800d9d4:	b2d2      	uxtb	r2, r2
 800d9d6:	440b      	add	r3, r1
 800d9d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d9dc:	e00a      	b.n	800d9f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	4908      	ldr	r1, [pc, #32]	@ (800da04 <__NVIC_SetPriority+0x50>)
 800d9e4:	88fb      	ldrh	r3, [r7, #6]
 800d9e6:	f003 030f 	and.w	r3, r3, #15
 800d9ea:	3b04      	subs	r3, #4
 800d9ec:	0112      	lsls	r2, r2, #4
 800d9ee:	b2d2      	uxtb	r2, r2
 800d9f0:	440b      	add	r3, r1
 800d9f2:	761a      	strb	r2, [r3, #24]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	e000e100 	.word	0xe000e100
 800da04:	e000ed00 	.word	0xe000ed00

0800da08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800da0c:	4b05      	ldr	r3, [pc, #20]	@ (800da24 <SysTick_Handler+0x1c>)
 800da0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800da10:	f002 fc72 	bl	80102f8 <xTaskGetSchedulerState>
 800da14:	4603      	mov	r3, r0
 800da16:	2b01      	cmp	r3, #1
 800da18:	d001      	beq.n	800da1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800da1a:	f000 ff6d 	bl	800e8f8 <xPortSysTickHandler>
  }
}
 800da1e:	bf00      	nop
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	e000e010 	.word	0xe000e010

0800da28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800da2c:	2100      	movs	r1, #0
 800da2e:	f06f 0004 	mvn.w	r0, #4
 800da32:	f7ff ffbf 	bl	800d9b4 <__NVIC_SetPriority>
#endif
}
 800da36:	bf00      	nop
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da42:	f3ef 8305 	mrs	r3, IPSR
 800da46:	603b      	str	r3, [r7, #0]
  return(result);
 800da48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da4e:	f06f 0305 	mvn.w	r3, #5
 800da52:	607b      	str	r3, [r7, #4]
 800da54:	e00c      	b.n	800da70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da56:	4b0a      	ldr	r3, [pc, #40]	@ (800da80 <osKernelInitialize+0x44>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d105      	bne.n	800da6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da5e:	4b08      	ldr	r3, [pc, #32]	@ (800da80 <osKernelInitialize+0x44>)
 800da60:	2201      	movs	r2, #1
 800da62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da64:	2300      	movs	r3, #0
 800da66:	607b      	str	r3, [r7, #4]
 800da68:	e002      	b.n	800da70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da70:	687b      	ldr	r3, [r7, #4]
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	24000724 	.word	0x24000724

0800da84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da8a:	f3ef 8305 	mrs	r3, IPSR
 800da8e:	603b      	str	r3, [r7, #0]
  return(result);
 800da90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800da96:	f06f 0305 	mvn.w	r3, #5
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	e010      	b.n	800dac0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da9e:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <osKernelStart+0x48>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d109      	bne.n	800daba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800daa6:	f7ff ffbf 	bl	800da28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800daaa:	4b08      	ldr	r3, [pc, #32]	@ (800dacc <osKernelStart+0x48>)
 800daac:	2202      	movs	r2, #2
 800daae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dab0:	f001 ffac 	bl	800fa0c <vTaskStartScheduler>
      stat = osOK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	607b      	str	r3, [r7, #4]
 800dab8:	e002      	b.n	800dac0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800daba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dabe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dac0:	687b      	ldr	r3, [r7, #4]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	24000724 	.word	0x24000724

0800dad0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dad6:	f3ef 8305 	mrs	r3, IPSR
 800dada:	603b      	str	r3, [r7, #0]
  return(result);
 800dadc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800dae2:	f002 f8bf 	bl	800fc64 <xTaskGetTickCountFromISR>
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	e002      	b.n	800daf0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800daea:	f002 f8ab 	bl	800fc44 <xTaskGetTickCount>
 800daee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800daf0:	687b      	ldr	r3, [r7, #4]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b08e      	sub	sp, #56	@ 0x38
 800dafe:	af04      	add	r7, sp, #16
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800db06:	2300      	movs	r3, #0
 800db08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db0a:	f3ef 8305 	mrs	r3, IPSR
 800db0e:	617b      	str	r3, [r7, #20]
  return(result);
 800db10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800db12:	2b00      	cmp	r3, #0
 800db14:	d17e      	bne.n	800dc14 <osThreadNew+0x11a>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d07b      	beq.n	800dc14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800db1c:	2380      	movs	r3, #128	@ 0x80
 800db1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800db20:	2318      	movs	r3, #24
 800db22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800db28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d045      	beq.n	800dbc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <osThreadNew+0x48>
        name = attr->name;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d002      	beq.n	800db50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d008      	beq.n	800db68 <osThreadNew+0x6e>
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	2b38      	cmp	r3, #56	@ 0x38
 800db5a:	d805      	bhi.n	800db68 <osThreadNew+0x6e>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <osThreadNew+0x72>
        return (NULL);
 800db68:	2300      	movs	r3, #0
 800db6a:	e054      	b.n	800dc16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	089b      	lsrs	r3, r3, #2
 800db7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00e      	beq.n	800dba2 <osThreadNew+0xa8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	2ba7      	cmp	r3, #167	@ 0xa7
 800db8a:	d90a      	bls.n	800dba2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db90:	2b00      	cmp	r3, #0
 800db92:	d006      	beq.n	800dba2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <osThreadNew+0xa8>
        mem = 1;
 800db9c:	2301      	movs	r3, #1
 800db9e:	61bb      	str	r3, [r7, #24]
 800dba0:	e010      	b.n	800dbc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10c      	bne.n	800dbc4 <osThreadNew+0xca>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d108      	bne.n	800dbc4 <osThreadNew+0xca>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d104      	bne.n	800dbc4 <osThreadNew+0xca>
          mem = 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	61bb      	str	r3, [r7, #24]
 800dbbe:	e001      	b.n	800dbc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d110      	bne.n	800dbec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbd2:	9202      	str	r2, [sp, #8]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	6a3a      	ldr	r2, [r7, #32]
 800dbde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f001 fd1f 	bl	800f624 <xTaskCreateStatic>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	613b      	str	r3, [r7, #16]
 800dbea:	e013      	b.n	800dc14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d110      	bne.n	800dc14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	f107 0310 	add.w	r3, r7, #16
 800dbfa:	9301      	str	r3, [sp, #4]
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f001 fd6d 	bl	800f6e4 <xTaskCreate>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d001      	beq.n	800dc14 <osThreadNew+0x11a>
            hTask = NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc14:	693b      	ldr	r3, [r7, #16]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3728      	adds	r7, #40	@ 0x28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b084      	sub	sp, #16
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc26:	f3ef 8305 	mrs	r3, IPSR
 800dc2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <osDelay+0x1c>
    stat = osErrorISR;
 800dc32:	f06f 0305 	mvn.w	r3, #5
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	e007      	b.n	800dc4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <osDelay+0x2c>
      vTaskDelay(ticks);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 feab 	bl	800f9a0 <vTaskDelay>
    }
  }

  return (stat);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b088      	sub	sp, #32
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc60:	f3ef 8305 	mrs	r3, IPSR
 800dc64:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc66:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d174      	bne.n	800dd56 <osMutexNew+0x102>
    if (attr != NULL) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <osMutexNew+0x26>
      type = attr->attr_bits;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	61bb      	str	r3, [r7, #24]
 800dc78:	e001      	b.n	800dc7e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <osMutexNew+0x3a>
      rmtx = 1U;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	e001      	b.n	800dc92 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	f003 0308 	and.w	r3, r3, #8
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d15c      	bne.n	800dd56 <osMutexNew+0x102>
      mem = -1;
 800dc9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dca0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d015      	beq.n	800dcd4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d006      	beq.n	800dcbe <osMutexNew+0x6a>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	2b4f      	cmp	r3, #79	@ 0x4f
 800dcb6:	d902      	bls.n	800dcbe <osMutexNew+0x6a>
          mem = 1;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	613b      	str	r3, [r7, #16]
 800dcbc:	e00c      	b.n	800dcd8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d108      	bne.n	800dcd8 <osMutexNew+0x84>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d104      	bne.n	800dcd8 <osMutexNew+0x84>
            mem = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	613b      	str	r3, [r7, #16]
 800dcd2:	e001      	b.n	800dcd8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d112      	bne.n	800dd04 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d007      	beq.n	800dcf4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	4619      	mov	r1, r3
 800dcea:	2004      	movs	r0, #4
 800dcec:	f001 f80d 	bl	800ed0a <xQueueCreateMutexStatic>
 800dcf0:	61f8      	str	r0, [r7, #28]
 800dcf2:	e016      	b.n	800dd22 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	2001      	movs	r0, #1
 800dcfc:	f001 f805 	bl	800ed0a <xQueueCreateMutexStatic>
 800dd00:	61f8      	str	r0, [r7, #28]
 800dd02:	e00e      	b.n	800dd22 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10b      	bne.n	800dd22 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d004      	beq.n	800dd1a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dd10:	2004      	movs	r0, #4
 800dd12:	f000 ffe2 	bl	800ecda <xQueueCreateMutex>
 800dd16:	61f8      	str	r0, [r7, #28]
 800dd18:	e003      	b.n	800dd22 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	f000 ffdd 	bl	800ecda <xQueueCreateMutex>
 800dd20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00c      	beq.n	800dd42 <osMutexNew+0xee>
        if (attr != NULL) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <osMutexNew+0xe2>
          name = attr->name;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	60fb      	str	r3, [r7, #12]
 800dd34:	e001      	b.n	800dd3a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800dd3a:	68f9      	ldr	r1, [r7, #12]
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f001 fc13 	bl	800f568 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d006      	beq.n	800dd56 <osMutexNew+0x102>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	f043 0301 	orr.w	r3, r3, #1
 800dd54:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dd56:	69fb      	ldr	r3, [r7, #28]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3720      	adds	r7, #32
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd70:	f3ef 8305 	mrs	r3, IPSR
 800dd74:	613b      	str	r3, [r7, #16]
  return(result);
 800dd76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d15f      	bne.n	800de3c <osMessageQueueNew+0xdc>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d05c      	beq.n	800de3c <osMessageQueueNew+0xdc>
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d059      	beq.n	800de3c <osMessageQueueNew+0xdc>
    mem = -1;
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d029      	beq.n	800dde8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d012      	beq.n	800ddc2 <osMessageQueueNew+0x62>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	2b4f      	cmp	r3, #79	@ 0x4f
 800dda2:	d90e      	bls.n	800ddc2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00a      	beq.n	800ddc2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	695a      	ldr	r2, [r3, #20]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	fb01 f303 	mul.w	r3, r1, r3
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d302      	bcc.n	800ddc2 <osMessageQueueNew+0x62>
        mem = 1;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	61bb      	str	r3, [r7, #24]
 800ddc0:	e014      	b.n	800ddec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d110      	bne.n	800ddec <osMessageQueueNew+0x8c>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10c      	bne.n	800ddec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d108      	bne.n	800ddec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d104      	bne.n	800ddec <osMessageQueueNew+0x8c>
          mem = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	61bb      	str	r3, [r7, #24]
 800dde6:	e001      	b.n	800ddec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d10b      	bne.n	800de0a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691a      	ldr	r2, [r3, #16]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	9100      	str	r1, [sp, #0]
 800ddfe:	68b9      	ldr	r1, [r7, #8]
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f000 fe75 	bl	800eaf0 <xQueueGenericCreateStatic>
 800de06:	61f8      	str	r0, [r7, #28]
 800de08:	e008      	b.n	800de1c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800de10:	2200      	movs	r2, #0
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f000 fee8 	bl	800ebea <xQueueGenericCreate>
 800de1a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00c      	beq.n	800de3c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <osMessageQueueNew+0xd0>
        name = attr->name;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e001      	b.n	800de34 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800de34:	6979      	ldr	r1, [r7, #20]
 800de36:	69f8      	ldr	r0, [r7, #28]
 800de38:	f001 fb96 	bl	800f568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800de3c:	69fb      	ldr	r3, [r7, #28]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3720      	adds	r7, #32
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
	...

0800de48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b088      	sub	sp, #32
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	603b      	str	r3, [r7, #0]
 800de54:	4613      	mov	r3, r2
 800de56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de60:	f3ef 8305 	mrs	r3, IPSR
 800de64:	617b      	str	r3, [r7, #20]
  return(result);
 800de66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d028      	beq.n	800debe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de6c:	69bb      	ldr	r3, [r7, #24]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d005      	beq.n	800de7e <osMessageQueuePut+0x36>
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <osMessageQueuePut+0x36>
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d003      	beq.n	800de86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800de7e:	f06f 0303 	mvn.w	r3, #3
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	e038      	b.n	800def8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800de86:	2300      	movs	r3, #0
 800de88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800de8a:	f107 0210 	add.w	r2, r7, #16
 800de8e:	2300      	movs	r3, #0
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	69b8      	ldr	r0, [r7, #24]
 800de94:	f001 f856 	bl	800ef44 <xQueueGenericSendFromISR>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d003      	beq.n	800dea6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800de9e:	f06f 0302 	mvn.w	r3, #2
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e028      	b.n	800def8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d025      	beq.n	800def8 <osMessageQueuePut+0xb0>
 800deac:	4b15      	ldr	r3, [pc, #84]	@ (800df04 <osMessageQueuePut+0xbc>)
 800deae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	e01c      	b.n	800def8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <osMessageQueuePut+0x82>
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800deca:	f06f 0303 	mvn.w	r3, #3
 800dece:	61fb      	str	r3, [r7, #28]
 800ded0:	e012      	b.n	800def8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ded2:	2300      	movs	r3, #0
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	68b9      	ldr	r1, [r7, #8]
 800ded8:	69b8      	ldr	r0, [r7, #24]
 800deda:	f000 ff31 	bl	800ed40 <xQueueGenericSend>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d009      	beq.n	800def8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800deea:	f06f 0301 	mvn.w	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]
 800def0:	e002      	b.n	800def8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800def2:	f06f 0302 	mvn.w	r3, #2
 800def6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800def8:	69fb      	ldr	r3, [r7, #28]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3720      	adds	r7, #32
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	e000ed04 	.word	0xe000ed04

0800df08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df1e:	f3ef 8305 	mrs	r3, IPSR
 800df22:	617b      	str	r3, [r7, #20]
  return(result);
 800df24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800df26:	2b00      	cmp	r3, #0
 800df28:	d028      	beq.n	800df7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d005      	beq.n	800df3c <osMessageQueueGet+0x34>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <osMessageQueueGet+0x34>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800df3c:	f06f 0303 	mvn.w	r3, #3
 800df40:	61fb      	str	r3, [r7, #28]
 800df42:	e037      	b.n	800dfb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800df44:	2300      	movs	r3, #0
 800df46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800df48:	f107 0310 	add.w	r3, r7, #16
 800df4c:	461a      	mov	r2, r3
 800df4e:	68b9      	ldr	r1, [r7, #8]
 800df50:	69b8      	ldr	r0, [r7, #24]
 800df52:	f001 f977 	bl	800f244 <xQueueReceiveFromISR>
 800df56:	4603      	mov	r3, r0
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d003      	beq.n	800df64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800df5c:	f06f 0302 	mvn.w	r3, #2
 800df60:	61fb      	str	r3, [r7, #28]
 800df62:	e027      	b.n	800dfb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d024      	beq.n	800dfb4 <osMessageQueueGet+0xac>
 800df6a:	4b15      	ldr	r3, [pc, #84]	@ (800dfc0 <osMessageQueueGet+0xb8>)
 800df6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	e01b      	b.n	800dfb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <osMessageQueueGet+0x80>
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d103      	bne.n	800df90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800df88:	f06f 0303 	mvn.w	r3, #3
 800df8c:	61fb      	str	r3, [r7, #28]
 800df8e:	e011      	b.n	800dfb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	68b9      	ldr	r1, [r7, #8]
 800df94:	69b8      	ldr	r0, [r7, #24]
 800df96:	f001 f873 	bl	800f080 <xQueueReceive>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d009      	beq.n	800dfb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dfa6:	f06f 0301 	mvn.w	r3, #1
 800dfaa:	61fb      	str	r3, [r7, #28]
 800dfac:	e002      	b.n	800dfb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dfae:	f06f 0302 	mvn.w	r3, #2
 800dfb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dfb4:	69fb      	ldr	r3, [r7, #28]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3720      	adds	r7, #32
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	e000ed04 	.word	0xe000ed04

0800dfc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4a07      	ldr	r2, [pc, #28]	@ (800dff0 <vApplicationGetIdleTaskMemory+0x2c>)
 800dfd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	4a06      	ldr	r2, [pc, #24]	@ (800dff4 <vApplicationGetIdleTaskMemory+0x30>)
 800dfda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2280      	movs	r2, #128	@ 0x80
 800dfe0:	601a      	str	r2, [r3, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	24000728 	.word	0x24000728
 800dff4:	240007d0 	.word	0x240007d0

0800dff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4a07      	ldr	r2, [pc, #28]	@ (800e024 <vApplicationGetTimerTaskMemory+0x2c>)
 800e008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	4a06      	ldr	r2, [pc, #24]	@ (800e028 <vApplicationGetTimerTaskMemory+0x30>)
 800e00e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e016:	601a      	str	r2, [r3, #0]
}
 800e018:	bf00      	nop
 800e01a:	3714      	adds	r7, #20
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	240009d0 	.word	0x240009d0
 800e028:	24000a78 	.word	0x24000a78

0800e02c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	@ 0x28
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e034:	2300      	movs	r3, #0
 800e036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e038:	f001 fd58 	bl	800faec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e03c:	4b5c      	ldr	r3, [pc, #368]	@ (800e1b0 <pvPortMalloc+0x184>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e044:	f000 f924 	bl	800e290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e048:	4b5a      	ldr	r3, [pc, #360]	@ (800e1b4 <pvPortMalloc+0x188>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4013      	ands	r3, r2
 800e050:	2b00      	cmp	r3, #0
 800e052:	f040 8095 	bne.w	800e180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01e      	beq.n	800e09a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e05c:	2208      	movs	r2, #8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4413      	add	r3, r2
 800e062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f003 0307 	and.w	r3, r3, #7
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d015      	beq.n	800e09a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f023 0307 	bic.w	r3, r3, #7
 800e074:	3308      	adds	r3, #8
 800e076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f003 0307 	and.w	r3, r3, #7
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00b      	beq.n	800e09a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop
 800e098:	e7fd      	b.n	800e096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d06f      	beq.n	800e180 <pvPortMalloc+0x154>
 800e0a0:	4b45      	ldr	r3, [pc, #276]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d86a      	bhi.n	800e180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0aa:	4b44      	ldr	r3, [pc, #272]	@ (800e1bc <pvPortMalloc+0x190>)
 800e0ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0ae:	4b43      	ldr	r3, [pc, #268]	@ (800e1bc <pvPortMalloc+0x190>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0b4:	e004      	b.n	800e0c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d903      	bls.n	800e0d2 <pvPortMalloc+0xa6>
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1f1      	bne.n	800e0b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0d2:	4b37      	ldr	r3, [pc, #220]	@ (800e1b0 <pvPortMalloc+0x184>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d051      	beq.n	800e180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2208      	movs	r2, #8
 800e0e2:	4413      	add	r3, r2
 800e0e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	1ad2      	subs	r2, r2, r3
 800e0f6:	2308      	movs	r3, #8
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d920      	bls.n	800e140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4413      	add	r3, r2
 800e104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <pvPortMalloc+0xfc>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	613b      	str	r3, [r7, #16]
}
 800e122:	bf00      	nop
 800e124:	bf00      	nop
 800e126:	e7fd      	b.n	800e124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e13a:	69b8      	ldr	r0, [r7, #24]
 800e13c:	f000 f90a 	bl	800e354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e140:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e14e:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c0 <pvPortMalloc+0x194>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	d203      	bcs.n	800e162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e15a:	4b17      	ldr	r3, [pc, #92]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a18      	ldr	r2, [pc, #96]	@ (800e1c0 <pvPortMalloc+0x194>)
 800e160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	4b13      	ldr	r3, [pc, #76]	@ (800e1b4 <pvPortMalloc+0x188>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	431a      	orrs	r2, r3
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e176:	4b13      	ldr	r3, [pc, #76]	@ (800e1c4 <pvPortMalloc+0x198>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3301      	adds	r3, #1
 800e17c:	4a11      	ldr	r2, [pc, #68]	@ (800e1c4 <pvPortMalloc+0x198>)
 800e17e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e180:	f001 fcc2 	bl	800fb08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00b      	beq.n	800e1a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	60fb      	str	r3, [r7, #12]
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	e7fd      	b.n	800e1a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e1a6:	69fb      	ldr	r3, [r7, #28]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3728      	adds	r7, #40	@ 0x28
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	24004a80 	.word	0x24004a80
 800e1b4:	24004a94 	.word	0x24004a94
 800e1b8:	24004a84 	.word	0x24004a84
 800e1bc:	24004a78 	.word	0x24004a78
 800e1c0:	24004a88 	.word	0x24004a88
 800e1c4:	24004a8c 	.word	0x24004a8c

0800e1c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d04f      	beq.n	800e27a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1da:	2308      	movs	r3, #8
 800e1dc:	425b      	negs	r3, r3
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	4b25      	ldr	r3, [pc, #148]	@ (800e284 <vPortFree+0xbc>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <vPortFree+0x46>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	60fb      	str	r3, [r7, #12]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00b      	beq.n	800e22e <vPortFree+0x66>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60bb      	str	r3, [r7, #8]
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	4b14      	ldr	r3, [pc, #80]	@ (800e284 <vPortFree+0xbc>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4013      	ands	r3, r2
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01e      	beq.n	800e27a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d11a      	bne.n	800e27a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	4b0e      	ldr	r3, [pc, #56]	@ (800e284 <vPortFree+0xbc>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	43db      	mvns	r3, r3
 800e24e:	401a      	ands	r2, r3
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e254:	f001 fc4a 	bl	800faec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	4b0a      	ldr	r3, [pc, #40]	@ (800e288 <vPortFree+0xc0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4413      	add	r3, r2
 800e262:	4a09      	ldr	r2, [pc, #36]	@ (800e288 <vPortFree+0xc0>)
 800e264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e266:	6938      	ldr	r0, [r7, #16]
 800e268:	f000 f874 	bl	800e354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e26c:	4b07      	ldr	r3, [pc, #28]	@ (800e28c <vPortFree+0xc4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3301      	adds	r3, #1
 800e272:	4a06      	ldr	r2, [pc, #24]	@ (800e28c <vPortFree+0xc4>)
 800e274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e276:	f001 fc47 	bl	800fb08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e27a:	bf00      	nop
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	24004a94 	.word	0x24004a94
 800e288:	24004a84 	.word	0x24004a84
 800e28c:	24004a90 	.word	0x24004a90

0800e290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e29a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e29c:	4b27      	ldr	r3, [pc, #156]	@ (800e33c <prvHeapInit+0xac>)
 800e29e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f003 0307 	and.w	r3, r3, #7
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00c      	beq.n	800e2c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3307      	adds	r3, #7
 800e2ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f023 0307 	bic.w	r3, r3, #7
 800e2b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	4a1f      	ldr	r2, [pc, #124]	@ (800e33c <prvHeapInit+0xac>)
 800e2c0:	4413      	add	r3, r2
 800e2c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e340 <prvHeapInit+0xb0>)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e340 <prvHeapInit+0xb0>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	4413      	add	r3, r2
 800e2da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2dc:	2208      	movs	r2, #8
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1a9b      	subs	r3, r3, r2
 800e2e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4a15      	ldr	r2, [pc, #84]	@ (800e344 <prvHeapInit+0xb4>)
 800e2f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2f2:	4b14      	ldr	r3, [pc, #80]	@ (800e344 <prvHeapInit+0xb4>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2fa:	4b12      	ldr	r3, [pc, #72]	@ (800e344 <prvHeapInit+0xb4>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2200      	movs	r2, #0
 800e300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	1ad2      	subs	r2, r2, r3
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e310:	4b0c      	ldr	r3, [pc, #48]	@ (800e344 <prvHeapInit+0xb4>)
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	4a0a      	ldr	r2, [pc, #40]	@ (800e348 <prvHeapInit+0xb8>)
 800e31e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	4a09      	ldr	r2, [pc, #36]	@ (800e34c <prvHeapInit+0xbc>)
 800e326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e328:	4b09      	ldr	r3, [pc, #36]	@ (800e350 <prvHeapInit+0xc0>)
 800e32a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e32e:	601a      	str	r2, [r3, #0]
}
 800e330:	bf00      	nop
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	24000e78 	.word	0x24000e78
 800e340:	24004a78 	.word	0x24004a78
 800e344:	24004a80 	.word	0x24004a80
 800e348:	24004a88 	.word	0x24004a88
 800e34c:	24004a84 	.word	0x24004a84
 800e350:	24004a94 	.word	0x24004a94

0800e354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e35c:	4b28      	ldr	r3, [pc, #160]	@ (800e400 <prvInsertBlockIntoFreeList+0xac>)
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	e002      	b.n	800e368 <prvInsertBlockIntoFreeList+0x14>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d8f7      	bhi.n	800e362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	4413      	add	r3, r2
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	d108      	bne.n	800e396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	441a      	add	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d118      	bne.n	800e3dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	4b15      	ldr	r3, [pc, #84]	@ (800e404 <prvInsertBlockIntoFreeList+0xb0>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d00d      	beq.n	800e3d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	e008      	b.n	800e3e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e404 <prvInsertBlockIntoFreeList+0xb0>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e003      	b.n	800e3e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d002      	beq.n	800e3f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3f2:	bf00      	nop
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	24004a78 	.word	0x24004a78
 800e404:	24004a80 	.word	0x24004a80

0800e408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f103 0208 	add.w	r2, r3, #8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f103 0208 	add.w	r2, r3, #8
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f103 0208 	add.w	r2, r3, #8
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e456:	bf00      	nop
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	689a      	ldr	r2, [r3, #8]
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
}
 800e49e:	bf00      	nop
 800e4a0:	3714      	adds	r7, #20
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b085      	sub	sp, #20
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4c0:	d103      	bne.n	800e4ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e00c      	b.n	800e4e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3308      	adds	r3, #8
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	e002      	b.n	800e4d8 <vListInsert+0x2e>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d2f6      	bcs.n	800e4d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	601a      	str	r2, [r3, #0]
}
 800e510:	bf00      	nop
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	6892      	ldr	r2, [r2, #8]
 800e532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	6852      	ldr	r2, [r2, #4]
 800e53c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	429a      	cmp	r2, r3
 800e546:	d103      	bne.n	800e550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	689a      	ldr	r2, [r3, #8]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	1e5a      	subs	r2, r3, #1
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3b04      	subs	r3, #4
 800e580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	3b04      	subs	r3, #4
 800e58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f023 0201 	bic.w	r2, r3, #1
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3b04      	subs	r3, #4
 800e59e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5a0:	4a0c      	ldr	r2, [pc, #48]	@ (800e5d4 <pxPortInitialiseStack+0x64>)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	3b14      	subs	r3, #20
 800e5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3b04      	subs	r3, #4
 800e5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f06f 0202 	mvn.w	r2, #2
 800e5be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3b20      	subs	r3, #32
 800e5c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	0800e5d9 	.word	0x0800e5d9

0800e5d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e5e2:	4b13      	ldr	r3, [pc, #76]	@ (800e630 <prvTaskExitError+0x58>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5ea:	d00b      	beq.n	800e604 <prvTaskExitError+0x2c>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60fb      	str	r3, [r7, #12]
}
 800e5fe:	bf00      	nop
 800e600:	bf00      	nop
 800e602:	e7fd      	b.n	800e600 <prvTaskExitError+0x28>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	60bb      	str	r3, [r7, #8]
}
 800e616:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e618:	bf00      	nop
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d0fc      	beq.n	800e61a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	3714      	adds	r7, #20
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	2400001c 	.word	0x2400001c
	...

0800e640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e640:	4b07      	ldr	r3, [pc, #28]	@ (800e660 <pxCurrentTCBConst2>)
 800e642:	6819      	ldr	r1, [r3, #0]
 800e644:	6808      	ldr	r0, [r1, #0]
 800e646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64a:	f380 8809 	msr	PSP, r0
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f04f 0000 	mov.w	r0, #0
 800e656:	f380 8811 	msr	BASEPRI, r0
 800e65a:	4770      	bx	lr
 800e65c:	f3af 8000 	nop.w

0800e660 <pxCurrentTCBConst2>:
 800e660:	24004ae0 	.word	0x24004ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop

0800e668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e668:	4808      	ldr	r0, [pc, #32]	@ (800e68c <prvPortStartFirstTask+0x24>)
 800e66a:	6800      	ldr	r0, [r0, #0]
 800e66c:	6800      	ldr	r0, [r0, #0]
 800e66e:	f380 8808 	msr	MSP, r0
 800e672:	f04f 0000 	mov.w	r0, #0
 800e676:	f380 8814 	msr	CONTROL, r0
 800e67a:	b662      	cpsie	i
 800e67c:	b661      	cpsie	f
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	df00      	svc	0
 800e688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e68a:	bf00      	nop
 800e68c:	e000ed08 	.word	0xe000ed08

0800e690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e696:	4b47      	ldr	r3, [pc, #284]	@ (800e7b4 <xPortStartScheduler+0x124>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a47      	ldr	r2, [pc, #284]	@ (800e7b8 <xPortStartScheduler+0x128>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d10b      	bne.n	800e6b8 <xPortStartScheduler+0x28>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	60fb      	str	r3, [r7, #12]
}
 800e6b2:	bf00      	nop
 800e6b4:	bf00      	nop
 800e6b6:	e7fd      	b.n	800e6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800e7b4 <xPortStartScheduler+0x124>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a3f      	ldr	r2, [pc, #252]	@ (800e7bc <xPortStartScheduler+0x12c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d10b      	bne.n	800e6da <xPortStartScheduler+0x4a>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	613b      	str	r3, [r7, #16]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6da:	4b39      	ldr	r3, [pc, #228]	@ (800e7c0 <xPortStartScheduler+0x130>)
 800e6dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	22ff      	movs	r2, #255	@ 0xff
 800e6ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e6f4:	78fb      	ldrb	r3, [r7, #3]
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	4b31      	ldr	r3, [pc, #196]	@ (800e7c4 <xPortStartScheduler+0x134>)
 800e700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e702:	4b31      	ldr	r3, [pc, #196]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e704:	2207      	movs	r2, #7
 800e706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e708:	e009      	b.n	800e71e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e70a:	4b2f      	ldr	r3, [pc, #188]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3b01      	subs	r3, #1
 800e710:	4a2d      	ldr	r2, [pc, #180]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	005b      	lsls	r3, r3, #1
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e71e:	78fb      	ldrb	r3, [r7, #3]
 800e720:	b2db      	uxtb	r3, r3
 800e722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e726:	2b80      	cmp	r3, #128	@ 0x80
 800e728:	d0ef      	beq.n	800e70a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e72a:	4b27      	ldr	r3, [pc, #156]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f1c3 0307 	rsb	r3, r3, #7
 800e732:	2b04      	cmp	r3, #4
 800e734:	d00b      	beq.n	800e74e <xPortStartScheduler+0xbe>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	60bb      	str	r3, [r7, #8]
}
 800e748:	bf00      	nop
 800e74a:	bf00      	nop
 800e74c:	e7fd      	b.n	800e74a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e74e:	4b1e      	ldr	r3, [pc, #120]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	021b      	lsls	r3, r3, #8
 800e754:	4a1c      	ldr	r2, [pc, #112]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e758:	4b1b      	ldr	r3, [pc, #108]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e760:	4a19      	ldr	r2, [pc, #100]	@ (800e7c8 <xPortStartScheduler+0x138>)
 800e762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	b2da      	uxtb	r2, r3
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e76c:	4b17      	ldr	r3, [pc, #92]	@ (800e7cc <xPortStartScheduler+0x13c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a16      	ldr	r2, [pc, #88]	@ (800e7cc <xPortStartScheduler+0x13c>)
 800e772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e778:	4b14      	ldr	r3, [pc, #80]	@ (800e7cc <xPortStartScheduler+0x13c>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a13      	ldr	r2, [pc, #76]	@ (800e7cc <xPortStartScheduler+0x13c>)
 800e77e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e784:	f000 f8da 	bl	800e93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e788:	4b11      	ldr	r3, [pc, #68]	@ (800e7d0 <xPortStartScheduler+0x140>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e78e:	f000 f8f9 	bl	800e984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e792:	4b10      	ldr	r3, [pc, #64]	@ (800e7d4 <xPortStartScheduler+0x144>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a0f      	ldr	r2, [pc, #60]	@ (800e7d4 <xPortStartScheduler+0x144>)
 800e798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e79c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e79e:	f7ff ff63 	bl	800e668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7a2:	f001 fb2b 	bl	800fdfc <vTaskSwitchContext>
	prvTaskExitError();
 800e7a6:	f7ff ff17 	bl	800e5d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	e000ed00 	.word	0xe000ed00
 800e7b8:	410fc271 	.word	0x410fc271
 800e7bc:	410fc270 	.word	0x410fc270
 800e7c0:	e000e400 	.word	0xe000e400
 800e7c4:	24004a98 	.word	0x24004a98
 800e7c8:	24004a9c 	.word	0x24004a9c
 800e7cc:	e000ed20 	.word	0xe000ed20
 800e7d0:	2400001c 	.word	0x2400001c
 800e7d4:	e000ef34 	.word	0xe000ef34

0800e7d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
}
 800e7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e7f2:	4b10      	ldr	r3, [pc, #64]	@ (800e834 <vPortEnterCritical+0x5c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	4a0e      	ldr	r2, [pc, #56]	@ (800e834 <vPortEnterCritical+0x5c>)
 800e7fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e834 <vPortEnterCritical+0x5c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b01      	cmp	r3, #1
 800e802:	d110      	bne.n	800e826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e804:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <vPortEnterCritical+0x60>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00b      	beq.n	800e826 <vPortEnterCritical+0x4e>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	603b      	str	r3, [r7, #0]
}
 800e820:	bf00      	nop
 800e822:	bf00      	nop
 800e824:	e7fd      	b.n	800e822 <vPortEnterCritical+0x4a>
	}
}
 800e826:	bf00      	nop
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	2400001c 	.word	0x2400001c
 800e838:	e000ed04 	.word	0xe000ed04

0800e83c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e842:	4b12      	ldr	r3, [pc, #72]	@ (800e88c <vPortExitCritical+0x50>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10b      	bne.n	800e862 <vPortExitCritical+0x26>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	607b      	str	r3, [r7, #4]
}
 800e85c:	bf00      	nop
 800e85e:	bf00      	nop
 800e860:	e7fd      	b.n	800e85e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e862:	4b0a      	ldr	r3, [pc, #40]	@ (800e88c <vPortExitCritical+0x50>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3b01      	subs	r3, #1
 800e868:	4a08      	ldr	r2, [pc, #32]	@ (800e88c <vPortExitCritical+0x50>)
 800e86a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e86c:	4b07      	ldr	r3, [pc, #28]	@ (800e88c <vPortExitCritical+0x50>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d105      	bne.n	800e880 <vPortExitCritical+0x44>
 800e874:	2300      	movs	r3, #0
 800e876:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e87e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	2400001c 	.word	0x2400001c

0800e890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e890:	f3ef 8009 	mrs	r0, PSP
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	4b15      	ldr	r3, [pc, #84]	@ (800e8f0 <pxCurrentTCBConst>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	f01e 0f10 	tst.w	lr, #16
 800e8a0:	bf08      	it	eq
 800e8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8aa:	6010      	str	r0, [r2, #0]
 800e8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e8b4:	f380 8811 	msr	BASEPRI, r0
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f001 fa9c 	bl	800fdfc <vTaskSwitchContext>
 800e8c4:	f04f 0000 	mov.w	r0, #0
 800e8c8:	f380 8811 	msr	BASEPRI, r0
 800e8cc:	bc09      	pop	{r0, r3}
 800e8ce:	6819      	ldr	r1, [r3, #0]
 800e8d0:	6808      	ldr	r0, [r1, #0]
 800e8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d6:	f01e 0f10 	tst.w	lr, #16
 800e8da:	bf08      	it	eq
 800e8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e8e0:	f380 8809 	msr	PSP, r0
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	f3af 8000 	nop.w

0800e8f0 <pxCurrentTCBConst>:
 800e8f0:	24004ae0 	.word	0x24004ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop

0800e8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	607b      	str	r3, [r7, #4]
}
 800e910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e912:	f001 f9b9 	bl	800fc88 <xTaskIncrementTick>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e91c:	4b06      	ldr	r3, [pc, #24]	@ (800e938 <xPortSysTickHandler+0x40>)
 800e91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	2300      	movs	r3, #0
 800e926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	f383 8811 	msr	BASEPRI, r3
}
 800e92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e930:	bf00      	nop
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	e000ed04 	.word	0xe000ed04

0800e93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e940:	4b0b      	ldr	r3, [pc, #44]	@ (800e970 <vPortSetupTimerInterrupt+0x34>)
 800e942:	2200      	movs	r2, #0
 800e944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e946:	4b0b      	ldr	r3, [pc, #44]	@ (800e974 <vPortSetupTimerInterrupt+0x38>)
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e94c:	4b0a      	ldr	r3, [pc, #40]	@ (800e978 <vPortSetupTimerInterrupt+0x3c>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a0a      	ldr	r2, [pc, #40]	@ (800e97c <vPortSetupTimerInterrupt+0x40>)
 800e952:	fba2 2303 	umull	r2, r3, r2, r3
 800e956:	099b      	lsrs	r3, r3, #6
 800e958:	4a09      	ldr	r2, [pc, #36]	@ (800e980 <vPortSetupTimerInterrupt+0x44>)
 800e95a:	3b01      	subs	r3, #1
 800e95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e95e:	4b04      	ldr	r3, [pc, #16]	@ (800e970 <vPortSetupTimerInterrupt+0x34>)
 800e960:	2207      	movs	r2, #7
 800e962:	601a      	str	r2, [r3, #0]
}
 800e964:	bf00      	nop
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	e000e010 	.word	0xe000e010
 800e974:	e000e018 	.word	0xe000e018
 800e978:	24000000 	.word	0x24000000
 800e97c:	10624dd3 	.word	0x10624dd3
 800e980:	e000e014 	.word	0xe000e014

0800e984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e994 <vPortEnableVFP+0x10>
 800e988:	6801      	ldr	r1, [r0, #0]
 800e98a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e98e:	6001      	str	r1, [r0, #0]
 800e990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e992:	bf00      	nop
 800e994:	e000ed88 	.word	0xe000ed88

0800e998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e99e:	f3ef 8305 	mrs	r3, IPSR
 800e9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d915      	bls.n	800e9d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9aa:	4a18      	ldr	r2, [pc, #96]	@ (800ea0c <vPortValidateInterruptPriority+0x74>)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9b4:	4b16      	ldr	r3, [pc, #88]	@ (800ea10 <vPortValidateInterruptPriority+0x78>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	7afa      	ldrb	r2, [r7, #11]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d20b      	bcs.n	800e9d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	607b      	str	r3, [r7, #4]
}
 800e9d0:	bf00      	nop
 800e9d2:	bf00      	nop
 800e9d4:	e7fd      	b.n	800e9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ea14 <vPortValidateInterruptPriority+0x7c>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e9de:	4b0e      	ldr	r3, [pc, #56]	@ (800ea18 <vPortValidateInterruptPriority+0x80>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d90b      	bls.n	800e9fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	603b      	str	r3, [r7, #0]
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	e7fd      	b.n	800e9fa <vPortValidateInterruptPriority+0x62>
	}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	e000e3f0 	.word	0xe000e3f0
 800ea10:	24004a98 	.word	0x24004a98
 800ea14:	e000ed0c 	.word	0xe000ed0c
 800ea18:	24004a9c 	.word	0x24004a9c

0800ea1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d10b      	bne.n	800ea48 <xQueueGenericReset+0x2c>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	60bb      	str	r3, [r7, #8]
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	e7fd      	b.n	800ea44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ea48:	f7ff fec6 	bl	800e7d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea54:	68f9      	ldr	r1, [r7, #12]
 800ea56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ea58:	fb01 f303 	mul.w	r3, r1, r3
 800ea5c:	441a      	add	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	68f9      	ldr	r1, [r7, #12]
 800ea7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ea7e:	fb01 f303 	mul.w	r3, r1, r3
 800ea82:	441a      	add	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	22ff      	movs	r2, #255	@ 0xff
 800ea8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	22ff      	movs	r2, #255	@ 0xff
 800ea94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d114      	bne.n	800eac8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d01a      	beq.n	800eadc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	3310      	adds	r3, #16
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f001 fa5e 	bl	800ff6c <xTaskRemoveFromEventList>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d012      	beq.n	800eadc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eab6:	4b0d      	ldr	r3, [pc, #52]	@ (800eaec <xQueueGenericReset+0xd0>)
 800eab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	e009      	b.n	800eadc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3310      	adds	r3, #16
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff fc9b 	bl	800e408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3324      	adds	r3, #36	@ 0x24
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fc96 	bl	800e408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eadc:	f7ff feae 	bl	800e83c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eae0:	2301      	movs	r3, #1
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08e      	sub	sp, #56	@ 0x38
 800eaf4:	af02      	add	r7, sp, #8
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
 800eafc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10b      	bne.n	800eb1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800eb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eb16:	bf00      	nop
 800eb18:	bf00      	nop
 800eb1a:	e7fd      	b.n	800eb18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10b      	bne.n	800eb3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop
 800eb38:	e7fd      	b.n	800eb36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <xQueueGenericCreateStatic+0x56>
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <xQueueGenericCreateStatic+0x5a>
 800eb46:	2301      	movs	r3, #1
 800eb48:	e000      	b.n	800eb4c <xQueueGenericCreateStatic+0x5c>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10b      	bne.n	800eb68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	623b      	str	r3, [r7, #32]
}
 800eb62:	bf00      	nop
 800eb64:	bf00      	nop
 800eb66:	e7fd      	b.n	800eb64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <xQueueGenericCreateStatic+0x84>
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d101      	bne.n	800eb78 <xQueueGenericCreateStatic+0x88>
 800eb74:	2301      	movs	r3, #1
 800eb76:	e000      	b.n	800eb7a <xQueueGenericCreateStatic+0x8a>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d10b      	bne.n	800eb96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800eb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb82:	f383 8811 	msr	BASEPRI, r3
 800eb86:	f3bf 8f6f 	isb	sy
 800eb8a:	f3bf 8f4f 	dsb	sy
 800eb8e:	61fb      	str	r3, [r7, #28]
}
 800eb90:	bf00      	nop
 800eb92:	bf00      	nop
 800eb94:	e7fd      	b.n	800eb92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eb96:	2350      	movs	r3, #80	@ 0x50
 800eb98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2b50      	cmp	r3, #80	@ 0x50
 800eb9e:	d00b      	beq.n	800ebb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	61bb      	str	r3, [r7, #24]
}
 800ebb2:	bf00      	nop
 800ebb4:	bf00      	nop
 800ebb6:	e7fd      	b.n	800ebb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ebb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ebbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00d      	beq.n	800ebe0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ebc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ebcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ebd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	68b9      	ldr	r1, [r7, #8]
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 f840 	bl	800ec60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3730      	adds	r7, #48	@ 0x30
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b08a      	sub	sp, #40	@ 0x28
 800ebee:	af02      	add	r7, sp, #8
 800ebf0:	60f8      	str	r0, [r7, #12]
 800ebf2:	60b9      	str	r1, [r7, #8]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10b      	bne.n	800ec16 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	613b      	str	r3, [r7, #16]
}
 800ec10:	bf00      	nop
 800ec12:	bf00      	nop
 800ec14:	e7fd      	b.n	800ec12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	fb02 f303 	mul.w	r3, r2, r3
 800ec1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	3350      	adds	r3, #80	@ 0x50
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff fa01 	bl	800e02c <pvPortMalloc>
 800ec2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d011      	beq.n	800ec56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	3350      	adds	r3, #80	@ 0x50
 800ec3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec44:	79fa      	ldrb	r2, [r7, #7]
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	68b9      	ldr	r1, [r7, #8]
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 f805 	bl	800ec60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec56:	69bb      	ldr	r3, [r7, #24]
	}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d103      	bne.n	800ec7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	69ba      	ldr	r2, [r7, #24]
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	e002      	b.n	800ec82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec8e:	2101      	movs	r1, #1
 800ec90:	69b8      	ldr	r0, [r7, #24]
 800ec92:	f7ff fec3 	bl	800ea1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	78fa      	ldrb	r2, [r7, #3]
 800ec9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec9e:	bf00      	nop
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b082      	sub	sp, #8
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00e      	beq.n	800ecd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 f837 	bl	800ed40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b086      	sub	sp, #24
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	4603      	mov	r3, r0
 800ece2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ece4:	2301      	movs	r3, #1
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	2300      	movs	r3, #0
 800ecea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6939      	ldr	r1, [r7, #16]
 800ecf2:	6978      	ldr	r0, [r7, #20]
 800ecf4:	f7ff ff79 	bl	800ebea <xQueueGenericCreate>
 800ecf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7ff ffd3 	bl	800eca6 <prvInitialiseMutex>

		return xNewQueue;
 800ed00:	68fb      	ldr	r3, [r7, #12]
	}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b088      	sub	sp, #32
 800ed0e:	af02      	add	r7, sp, #8
 800ed10:	4603      	mov	r3, r0
 800ed12:	6039      	str	r1, [r7, #0]
 800ed14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed16:	2301      	movs	r3, #1
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ed1e:	79fb      	ldrb	r3, [r7, #7]
 800ed20:	9300      	str	r3, [sp, #0]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2200      	movs	r2, #0
 800ed26:	6939      	ldr	r1, [r7, #16]
 800ed28:	6978      	ldr	r0, [r7, #20]
 800ed2a:	f7ff fee1 	bl	800eaf0 <xQueueGenericCreateStatic>
 800ed2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff ffb8 	bl	800eca6 <prvInitialiseMutex>

		return xNewQueue;
 800ed36:	68fb      	ldr	r3, [r7, #12]
	}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3718      	adds	r7, #24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08e      	sub	sp, #56	@ 0x38
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ed56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10b      	bne.n	800ed74 <xQueueGenericSend+0x34>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ed6e:	bf00      	nop
 800ed70:	bf00      	nop
 800ed72:	e7fd      	b.n	800ed70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d103      	bne.n	800ed82 <xQueueGenericSend+0x42>
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <xQueueGenericSend+0x46>
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <xQueueGenericSend+0x48>
 800ed86:	2300      	movs	r3, #0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10b      	bne.n	800eda4 <xQueueGenericSend+0x64>
	__asm volatile
 800ed8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed90:	f383 8811 	msr	BASEPRI, r3
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ed9e:	bf00      	nop
 800eda0:	bf00      	nop
 800eda2:	e7fd      	b.n	800eda0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d103      	bne.n	800edb2 <xQueueGenericSend+0x72>
 800edaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d101      	bne.n	800edb6 <xQueueGenericSend+0x76>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e000      	b.n	800edb8 <xQueueGenericSend+0x78>
 800edb6:	2300      	movs	r3, #0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10b      	bne.n	800edd4 <xQueueGenericSend+0x94>
	__asm volatile
 800edbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	623b      	str	r3, [r7, #32]
}
 800edce:	bf00      	nop
 800edd0:	bf00      	nop
 800edd2:	e7fd      	b.n	800edd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edd4:	f001 fa90 	bl	80102f8 <xTaskGetSchedulerState>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d102      	bne.n	800ede4 <xQueueGenericSend+0xa4>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <xQueueGenericSend+0xa8>
 800ede4:	2301      	movs	r3, #1
 800ede6:	e000      	b.n	800edea <xQueueGenericSend+0xaa>
 800ede8:	2300      	movs	r3, #0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10b      	bne.n	800ee06 <xQueueGenericSend+0xc6>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	61fb      	str	r3, [r7, #28]
}
 800ee00:	bf00      	nop
 800ee02:	bf00      	nop
 800ee04:	e7fd      	b.n	800ee02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee06:	f7ff fce7 	bl	800e7d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <xQueueGenericSend+0xdc>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d129      	bne.n	800ee70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee22:	f000 fa91 	bl	800f348 <prvCopyDataToQueue>
 800ee26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d010      	beq.n	800ee52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee32:	3324      	adds	r3, #36	@ 0x24
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 f899 	bl	800ff6c <xTaskRemoveFromEventList>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d013      	beq.n	800ee68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee40:	4b3f      	ldr	r3, [pc, #252]	@ (800ef40 <xQueueGenericSend+0x200>)
 800ee42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee46:	601a      	str	r2, [r3, #0]
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	e00a      	b.n	800ee68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee58:	4b39      	ldr	r3, [pc, #228]	@ (800ef40 <xQueueGenericSend+0x200>)
 800ee5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee68:	f7ff fce8 	bl	800e83c <vPortExitCritical>
				return pdPASS;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e063      	b.n	800ef38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d103      	bne.n	800ee7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee76:	f7ff fce1 	bl	800e83c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e05c      	b.n	800ef38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d106      	bne.n	800ee92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee84:	f107 0314 	add.w	r3, r7, #20
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f001 f8d3 	bl	8010034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee92:	f7ff fcd3 	bl	800e83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee96:	f000 fe29 	bl	800faec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee9a:	f7ff fc9d 	bl	800e7d8 <vPortEnterCritical>
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eea4:	b25b      	sxtb	r3, r3
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eeaa:	d103      	bne.n	800eeb4 <xQueueGenericSend+0x174>
 800eeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eeba:	b25b      	sxtb	r3, r3
 800eebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eec0:	d103      	bne.n	800eeca <xQueueGenericSend+0x18a>
 800eec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eeca:	f7ff fcb7 	bl	800e83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eece:	1d3a      	adds	r2, r7, #4
 800eed0:	f107 0314 	add.w	r3, r7, #20
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f001 f8c2 	bl	8010060 <xTaskCheckForTimeOut>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d124      	bne.n	800ef2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eee4:	f000 fb28 	bl	800f538 <prvIsQueueFull>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d018      	beq.n	800ef20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef0:	3310      	adds	r3, #16
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 ffe6 	bl	800fec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eefc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eefe:	f000 fab3 	bl	800f468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef02:	f000 fe01 	bl	800fb08 <xTaskResumeAll>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f47f af7c 	bne.w	800ee06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ef0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef40 <xQueueGenericSend+0x200>)
 800ef10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	e772      	b.n	800ee06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef22:	f000 faa1 	bl	800f468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef26:	f000 fdef 	bl	800fb08 <xTaskResumeAll>
 800ef2a:	e76c      	b.n	800ee06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef2e:	f000 fa9b 	bl	800f468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef32:	f000 fde9 	bl	800fb08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3738      	adds	r7, #56	@ 0x38
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	e000ed04 	.word	0xe000ed04

0800ef44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b090      	sub	sp, #64	@ 0x40
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ef56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10b      	bne.n	800ef74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ef6e:	bf00      	nop
 800ef70:	bf00      	nop
 800ef72:	e7fd      	b.n	800ef70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d103      	bne.n	800ef82 <xQueueGenericSendFromISR+0x3e>
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <xQueueGenericSendFromISR+0x42>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <xQueueGenericSendFromISR+0x44>
 800ef86:	2300      	movs	r3, #0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ef9e:	bf00      	nop
 800efa0:	bf00      	nop
 800efa2:	e7fd      	b.n	800efa0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d103      	bne.n	800efb2 <xQueueGenericSendFromISR+0x6e>
 800efaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d101      	bne.n	800efb6 <xQueueGenericSendFromISR+0x72>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e000      	b.n	800efb8 <xQueueGenericSendFromISR+0x74>
 800efb6:	2300      	movs	r3, #0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10b      	bne.n	800efd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	623b      	str	r3, [r7, #32]
}
 800efce:	bf00      	nop
 800efd0:	bf00      	nop
 800efd2:	e7fd      	b.n	800efd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efd4:	f7ff fce0 	bl	800e998 <vPortValidateInterruptPriority>
	__asm volatile
 800efd8:	f3ef 8211 	mrs	r2, BASEPRI
 800efdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	61fa      	str	r2, [r7, #28]
 800efee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800eff0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eff2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800effc:	429a      	cmp	r2, r3
 800effe:	d302      	bcc.n	800f006 <xQueueGenericSendFromISR+0xc2>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b02      	cmp	r3, #2
 800f004:	d12f      	bne.n	800f066 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f00c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f014:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	68b9      	ldr	r1, [r7, #8]
 800f01a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f01c:	f000 f994 	bl	800f348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f020:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f028:	d112      	bne.n	800f050 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d016      	beq.n	800f060 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	3324      	adds	r3, #36	@ 0x24
 800f036:	4618      	mov	r0, r3
 800f038:	f000 ff98 	bl	800ff6c <xTaskRemoveFromEventList>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00e      	beq.n	800f060 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00b      	beq.n	800f060 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	e007      	b.n	800f060 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f054:	3301      	adds	r3, #1
 800f056:	b2db      	uxtb	r3, r3
 800f058:	b25a      	sxtb	r2, r3
 800f05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f060:	2301      	movs	r3, #1
 800f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f064:	e001      	b.n	800f06a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f066:	2300      	movs	r3, #0
 800f068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f06c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	f383 8811 	msr	BASEPRI, r3
}
 800f074:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3740      	adds	r7, #64	@ 0x40
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08c      	sub	sp, #48	@ 0x30
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f08c:	2300      	movs	r3, #0
 800f08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10b      	bne.n	800f0b2 <xQueueReceive+0x32>
	__asm volatile
 800f09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	623b      	str	r3, [r7, #32]
}
 800f0ac:	bf00      	nop
 800f0ae:	bf00      	nop
 800f0b0:	e7fd      	b.n	800f0ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d103      	bne.n	800f0c0 <xQueueReceive+0x40>
 800f0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <xQueueReceive+0x44>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <xQueueReceive+0x46>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10b      	bne.n	800f0e2 <xQueueReceive+0x62>
	__asm volatile
 800f0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	61fb      	str	r3, [r7, #28]
}
 800f0dc:	bf00      	nop
 800f0de:	bf00      	nop
 800f0e0:	e7fd      	b.n	800f0de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0e2:	f001 f909 	bl	80102f8 <xTaskGetSchedulerState>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d102      	bne.n	800f0f2 <xQueueReceive+0x72>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <xQueueReceive+0x76>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e000      	b.n	800f0f8 <xQueueReceive+0x78>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10b      	bne.n	800f114 <xQueueReceive+0x94>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	61bb      	str	r3, [r7, #24]
}
 800f10e:	bf00      	nop
 800f110:	bf00      	nop
 800f112:	e7fd      	b.n	800f110 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f114:	f7ff fb60 	bl	800e7d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	d01f      	beq.n	800f164 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f124:	68b9      	ldr	r1, [r7, #8]
 800f126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f128:	f000 f978 	bl	800f41c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12e:	1e5a      	subs	r2, r3, #1
 800f130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f132:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00f      	beq.n	800f15c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13e:	3310      	adds	r3, #16
 800f140:	4618      	mov	r0, r3
 800f142:	f000 ff13 	bl	800ff6c <xTaskRemoveFromEventList>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d007      	beq.n	800f15c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f14c:	4b3c      	ldr	r3, [pc, #240]	@ (800f240 <xQueueReceive+0x1c0>)
 800f14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f15c:	f7ff fb6e 	bl	800e83c <vPortExitCritical>
				return pdPASS;
 800f160:	2301      	movs	r3, #1
 800f162:	e069      	b.n	800f238 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d103      	bne.n	800f172 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f16a:	f7ff fb67 	bl	800e83c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f16e:	2300      	movs	r3, #0
 800f170:	e062      	b.n	800f238 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f174:	2b00      	cmp	r3, #0
 800f176:	d106      	bne.n	800f186 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f178:	f107 0310 	add.w	r3, r7, #16
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 ff59 	bl	8010034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f182:	2301      	movs	r3, #1
 800f184:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f186:	f7ff fb59 	bl	800e83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f18a:	f000 fcaf 	bl	800faec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f18e:	f7ff fb23 	bl	800e7d8 <vPortEnterCritical>
 800f192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f19e:	d103      	bne.n	800f1a8 <xQueueReceive+0x128>
 800f1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1ae:	b25b      	sxtb	r3, r3
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1b4:	d103      	bne.n	800f1be <xQueueReceive+0x13e>
 800f1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1be:	f7ff fb3d 	bl	800e83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1c2:	1d3a      	adds	r2, r7, #4
 800f1c4:	f107 0310 	add.w	r3, r7, #16
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 ff48 	bl	8010060 <xTaskCheckForTimeOut>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d123      	bne.n	800f21e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1d8:	f000 f998 	bl	800f50c <prvIsQueueEmpty>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d017      	beq.n	800f212 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e4:	3324      	adds	r3, #36	@ 0x24
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fe6c 	bl	800fec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1f2:	f000 f939 	bl	800f468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1f6:	f000 fc87 	bl	800fb08 <xTaskResumeAll>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d189      	bne.n	800f114 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f200:	4b0f      	ldr	r3, [pc, #60]	@ (800f240 <xQueueReceive+0x1c0>)
 800f202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	e780      	b.n	800f114 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f214:	f000 f928 	bl	800f468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f218:	f000 fc76 	bl	800fb08 <xTaskResumeAll>
 800f21c:	e77a      	b.n	800f114 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f220:	f000 f922 	bl	800f468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f224:	f000 fc70 	bl	800fb08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f22a:	f000 f96f 	bl	800f50c <prvIsQueueEmpty>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	f43f af6f 	beq.w	800f114 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f236:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3730      	adds	r7, #48	@ 0x30
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	e000ed04 	.word	0xe000ed04

0800f244 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08e      	sub	sp, #56	@ 0x38
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10b      	bne.n	800f272 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	623b      	str	r3, [r7, #32]
}
 800f26c:	bf00      	nop
 800f26e:	bf00      	nop
 800f270:	e7fd      	b.n	800f26e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d103      	bne.n	800f280 <xQueueReceiveFromISR+0x3c>
 800f278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <xQueueReceiveFromISR+0x40>
 800f280:	2301      	movs	r3, #1
 800f282:	e000      	b.n	800f286 <xQueueReceiveFromISR+0x42>
 800f284:	2300      	movs	r3, #0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10b      	bne.n	800f2a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	61fb      	str	r3, [r7, #28]
}
 800f29c:	bf00      	nop
 800f29e:	bf00      	nop
 800f2a0:	e7fd      	b.n	800f29e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2a2:	f7ff fb79 	bl	800e998 <vPortValidateInterruptPriority>
	__asm volatile
 800f2a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	61ba      	str	r2, [r7, #24]
 800f2bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d02f      	beq.n	800f32e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2d8:	68b9      	ldr	r1, [r7, #8]
 800f2da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2dc:	f000 f89e 	bl	800f41c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e2:	1e5a      	subs	r2, r3, #1
 800f2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f2e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2f0:	d112      	bne.n	800f318 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d016      	beq.n	800f328 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fc:	3310      	adds	r3, #16
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fe34 	bl	800ff6c <xTaskRemoveFromEventList>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00e      	beq.n	800f328 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00b      	beq.n	800f328 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2201      	movs	r2, #1
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	e007      	b.n	800f328 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f31c:	3301      	adds	r3, #1
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	b25a      	sxtb	r2, r3
 800f322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f328:	2301      	movs	r3, #1
 800f32a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f32c:	e001      	b.n	800f332 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f32e:	2300      	movs	r3, #0
 800f330:	637b      	str	r3, [r7, #52]	@ 0x34
 800f332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f334:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	f383 8811 	msr	BASEPRI, r3
}
 800f33c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f340:	4618      	mov	r0, r3
 800f342:	3738      	adds	r7, #56	@ 0x38
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f354:	2300      	movs	r3, #0
 800f356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f35c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10d      	bne.n	800f382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d14d      	bne.n	800f40a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	4618      	mov	r0, r3
 800f374:	f000 ffde 	bl	8010334 <xTaskPriorityDisinherit>
 800f378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	609a      	str	r2, [r3, #8]
 800f380:	e043      	b.n	800f40a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d119      	bne.n	800f3bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6858      	ldr	r0, [r3, #4]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f390:	461a      	mov	r2, r3
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	f002 fe13 	bl	8011fbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3a0:	441a      	add	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d32b      	bcc.n	800f40a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	605a      	str	r2, [r3, #4]
 800f3ba:	e026      	b.n	800f40a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	68d8      	ldr	r0, [r3, #12]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	f002 fdf9 	bl	8011fbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	68da      	ldr	r2, [r3, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3d4:	425b      	negs	r3, r3
 800f3d6:	441a      	add	r2, r3
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	68da      	ldr	r2, [r3, #12]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d207      	bcs.n	800f3f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	689a      	ldr	r2, [r3, #8]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3f0:	425b      	negs	r3, r3
 800f3f2:	441a      	add	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d105      	bne.n	800f40a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	3b01      	subs	r3, #1
 800f408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f412:	697b      	ldr	r3, [r7, #20]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d018      	beq.n	800f460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68da      	ldr	r2, [r3, #12]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f436:	441a      	add	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	429a      	cmp	r2, r3
 800f446:	d303      	bcc.n	800f450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68d9      	ldr	r1, [r3, #12]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f458:	461a      	mov	r2, r3
 800f45a:	6838      	ldr	r0, [r7, #0]
 800f45c:	f002 fdaf 	bl	8011fbe <memcpy>
	}
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f470:	f7ff f9b2 	bl	800e7d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f47a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f47c:	e011      	b.n	800f4a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f482:	2b00      	cmp	r3, #0
 800f484:	d012      	beq.n	800f4ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	3324      	adds	r3, #36	@ 0x24
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 fd6e 	bl	800ff6c <xTaskRemoveFromEventList>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f496:	f000 fe47 	bl	8010128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f49a:	7bfb      	ldrb	r3, [r7, #15]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dce9      	bgt.n	800f47e <prvUnlockQueue+0x16>
 800f4aa:	e000      	b.n	800f4ae <prvUnlockQueue+0x46>
					break;
 800f4ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	22ff      	movs	r2, #255	@ 0xff
 800f4b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f4b6:	f7ff f9c1 	bl	800e83c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4ba:	f7ff f98d 	bl	800e7d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f4c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4c6:	e011      	b.n	800f4ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d012      	beq.n	800f4f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3310      	adds	r3, #16
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fd49 	bl	800ff6c <xTaskRemoveFromEventList>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4e0:	f000 fe22 	bl	8010128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dce9      	bgt.n	800f4c8 <prvUnlockQueue+0x60>
 800f4f4:	e000      	b.n	800f4f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	22ff      	movs	r2, #255	@ 0xff
 800f4fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f500:	f7ff f99c 	bl	800e83c <vPortExitCritical>
}
 800f504:	bf00      	nop
 800f506:	3710      	adds	r7, #16
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f514:	f7ff f960 	bl	800e7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d102      	bne.n	800f526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f520:	2301      	movs	r3, #1
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e001      	b.n	800f52a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f526:	2300      	movs	r3, #0
 800f528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f52a:	f7ff f987 	bl	800e83c <vPortExitCritical>

	return xReturn;
 800f52e:	68fb      	ldr	r3, [r7, #12]
}
 800f530:	4618      	mov	r0, r3
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f540:	f7ff f94a 	bl	800e7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d102      	bne.n	800f556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f550:	2301      	movs	r3, #1
 800f552:	60fb      	str	r3, [r7, #12]
 800f554:	e001      	b.n	800f55a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f556:	2300      	movs	r3, #0
 800f558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f55a:	f7ff f96f 	bl	800e83c <vPortExitCritical>

	return xReturn;
 800f55e:	68fb      	ldr	r3, [r7, #12]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3710      	adds	r7, #16
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	e014      	b.n	800f5a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f578:	4a0f      	ldr	r2, [pc, #60]	@ (800f5b8 <vQueueAddToRegistry+0x50>)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10b      	bne.n	800f59c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f584:	490c      	ldr	r1, [pc, #48]	@ (800f5b8 <vQueueAddToRegistry+0x50>)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f58e:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b8 <vQueueAddToRegistry+0x50>)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	4413      	add	r3, r2
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f59a:	e006      	b.n	800f5aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	60fb      	str	r3, [r7, #12]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2b07      	cmp	r3, #7
 800f5a6:	d9e7      	bls.n	800f578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5a8:	bf00      	nop
 800f5aa:	bf00      	nop
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	24004aa0 	.word	0x24004aa0

0800f5bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5cc:	f7ff f904 	bl	800e7d8 <vPortEnterCritical>
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f5d6:	b25b      	sxtb	r3, r3
 800f5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5dc:	d103      	bne.n	800f5e6 <vQueueWaitForMessageRestricted+0x2a>
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5ec:	b25b      	sxtb	r3, r3
 800f5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5f2:	d103      	bne.n	800f5fc <vQueueWaitForMessageRestricted+0x40>
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f5fc:	f7ff f91e 	bl	800e83c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	3324      	adds	r3, #36	@ 0x24
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	68b9      	ldr	r1, [r7, #8]
 800f610:	4618      	mov	r0, r3
 800f612:	f000 fc7f 	bl	800ff14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f616:	6978      	ldr	r0, [r7, #20]
 800f618:	f7ff ff26 	bl	800f468 <prvUnlockQueue>
	}
 800f61c:	bf00      	nop
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f624:	b580      	push	{r7, lr}
 800f626:	b08e      	sub	sp, #56	@ 0x38
 800f628:	af04      	add	r7, sp, #16
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f634:	2b00      	cmp	r3, #0
 800f636:	d10b      	bne.n	800f650 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63c:	f383 8811 	msr	BASEPRI, r3
 800f640:	f3bf 8f6f 	isb	sy
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	623b      	str	r3, [r7, #32]
}
 800f64a:	bf00      	nop
 800f64c:	bf00      	nop
 800f64e:	e7fd      	b.n	800f64c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10b      	bne.n	800f66e <xTaskCreateStatic+0x4a>
	__asm volatile
 800f656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	61fb      	str	r3, [r7, #28]
}
 800f668:	bf00      	nop
 800f66a:	bf00      	nop
 800f66c:	e7fd      	b.n	800f66a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f66e:	23a8      	movs	r3, #168	@ 0xa8
 800f670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	2ba8      	cmp	r3, #168	@ 0xa8
 800f676:	d00b      	beq.n	800f690 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	61bb      	str	r3, [r7, #24]
}
 800f68a:	bf00      	nop
 800f68c:	bf00      	nop
 800f68e:	e7fd      	b.n	800f68c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f690:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f694:	2b00      	cmp	r3, #0
 800f696:	d01e      	beq.n	800f6d6 <xTaskCreateStatic+0xb2>
 800f698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d01b      	beq.n	800f6d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f6a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6aa:	2202      	movs	r2, #2
 800f6ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	9303      	str	r3, [sp, #12]
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b6:	9302      	str	r3, [sp, #8]
 800f6b8:	f107 0314 	add.w	r3, r7, #20
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	68b9      	ldr	r1, [r7, #8]
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f000 f851 	bl	800f770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6d0:	f000 f8f6 	bl	800f8c0 <prvAddNewTaskToReadyList>
 800f6d4:	e001      	b.n	800f6da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6da:	697b      	ldr	r3, [r7, #20]
	}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3728      	adds	r7, #40	@ 0x28
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b08c      	sub	sp, #48	@ 0x30
 800f6e8:	af04      	add	r7, sp, #16
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	603b      	str	r3, [r7, #0]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6f4:	88fb      	ldrh	r3, [r7, #6]
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fc97 	bl	800e02c <pvPortMalloc>
 800f6fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f706:	20a8      	movs	r0, #168	@ 0xa8
 800f708:	f7fe fc90 	bl	800e02c <pvPortMalloc>
 800f70c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d003      	beq.n	800f71c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	631a      	str	r2, [r3, #48]	@ 0x30
 800f71a:	e005      	b.n	800f728 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f71c:	6978      	ldr	r0, [r7, #20]
 800f71e:	f7fe fd53 	bl	800e1c8 <vPortFree>
 800f722:	e001      	b.n	800f728 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f724:	2300      	movs	r3, #0
 800f726:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d017      	beq.n	800f75e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	2200      	movs	r2, #0
 800f732:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f736:	88fa      	ldrh	r2, [r7, #6]
 800f738:	2300      	movs	r3, #0
 800f73a:	9303      	str	r3, [sp, #12]
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	9302      	str	r3, [sp, #8]
 800f740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	68b9      	ldr	r1, [r7, #8]
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 f80f 	bl	800f770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f752:	69f8      	ldr	r0, [r7, #28]
 800f754:	f000 f8b4 	bl	800f8c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f758:	2301      	movs	r3, #1
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	e002      	b.n	800f764 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f75e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f762:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f764:	69bb      	ldr	r3, [r7, #24]
	}
 800f766:	4618      	mov	r0, r3
 800f768:	3720      	adds	r7, #32
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	461a      	mov	r2, r3
 800f788:	21a5      	movs	r1, #165	@ 0xa5
 800f78a:	f002 fb3b 	bl	8011e04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f798:	440b      	add	r3, r1
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	f023 0307 	bic.w	r3, r3, #7
 800f7a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	f003 0307 	and.w	r3, r3, #7
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00b      	beq.n	800f7ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	617b      	str	r3, [r7, #20]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d01f      	beq.n	800f810 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	e012      	b.n	800f7fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	4413      	add	r3, r2
 800f7dc:	7819      	ldrb	r1, [r3, #0]
 800f7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	3334      	adds	r3, #52	@ 0x34
 800f7e6:	460a      	mov	r2, r1
 800f7e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	2b0f      	cmp	r3, #15
 800f800:	d9e9      	bls.n	800f7d6 <prvInitialiseNewTask+0x66>
 800f802:	e000      	b.n	800f806 <prvInitialiseNewTask+0x96>
			{
				break;
 800f804:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f80e:	e003      	b.n	800f818 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81a:	2b37      	cmp	r3, #55	@ 0x37
 800f81c:	d901      	bls.n	800f822 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f81e:	2337      	movs	r3, #55	@ 0x37
 800f820:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f826:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f82c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f830:	2200      	movs	r2, #0
 800f832:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f836:	3304      	adds	r3, #4
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fe fe05 	bl	800e448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f840:	3318      	adds	r3, #24
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe fe00 	bl	800e448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f84a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f84c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f850:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f856:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f85c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f860:	2200      	movs	r2, #0
 800f862:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f870:	3354      	adds	r3, #84	@ 0x54
 800f872:	224c      	movs	r2, #76	@ 0x4c
 800f874:	2100      	movs	r1, #0
 800f876:	4618      	mov	r0, r3
 800f878:	f002 fac4 	bl	8011e04 <memset>
 800f87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87e:	4a0d      	ldr	r2, [pc, #52]	@ (800f8b4 <prvInitialiseNewTask+0x144>)
 800f880:	659a      	str	r2, [r3, #88]	@ 0x58
 800f882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f884:	4a0c      	ldr	r2, [pc, #48]	@ (800f8b8 <prvInitialiseNewTask+0x148>)
 800f886:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f88a:	4a0c      	ldr	r2, [pc, #48]	@ (800f8bc <prvInitialiseNewTask+0x14c>)
 800f88c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	68f9      	ldr	r1, [r7, #12]
 800f892:	69b8      	ldr	r0, [r7, #24]
 800f894:	f7fe fe6c 	bl	800e570 <pxPortInitialiseStack>
 800f898:	4602      	mov	r2, r0
 800f89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f89c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8aa:	bf00      	nop
 800f8ac:	3720      	adds	r7, #32
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	2400510c 	.word	0x2400510c
 800f8b8:	24005174 	.word	0x24005174
 800f8bc:	240051dc 	.word	0x240051dc

0800f8c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8c8:	f7fe ff86 	bl	800e7d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8cc:	4b2d      	ldr	r3, [pc, #180]	@ (800f984 <prvAddNewTaskToReadyList+0xc4>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	4a2c      	ldr	r2, [pc, #176]	@ (800f984 <prvAddNewTaskToReadyList+0xc4>)
 800f8d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800f988 <prvAddNewTaskToReadyList+0xc8>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d109      	bne.n	800f8f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8de:	4a2a      	ldr	r2, [pc, #168]	@ (800f988 <prvAddNewTaskToReadyList+0xc8>)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8e4:	4b27      	ldr	r3, [pc, #156]	@ (800f984 <prvAddNewTaskToReadyList+0xc4>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d110      	bne.n	800f90e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8ec:	f000 fc40 	bl	8010170 <prvInitialiseTaskLists>
 800f8f0:	e00d      	b.n	800f90e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8f2:	4b26      	ldr	r3, [pc, #152]	@ (800f98c <prvAddNewTaskToReadyList+0xcc>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d109      	bne.n	800f90e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8fa:	4b23      	ldr	r3, [pc, #140]	@ (800f988 <prvAddNewTaskToReadyList+0xc8>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f904:	429a      	cmp	r2, r3
 800f906:	d802      	bhi.n	800f90e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f908:	4a1f      	ldr	r2, [pc, #124]	@ (800f988 <prvAddNewTaskToReadyList+0xc8>)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f90e:	4b20      	ldr	r3, [pc, #128]	@ (800f990 <prvAddNewTaskToReadyList+0xd0>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3301      	adds	r3, #1
 800f914:	4a1e      	ldr	r2, [pc, #120]	@ (800f990 <prvAddNewTaskToReadyList+0xd0>)
 800f916:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f918:	4b1d      	ldr	r3, [pc, #116]	@ (800f990 <prvAddNewTaskToReadyList+0xd0>)
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f924:	4b1b      	ldr	r3, [pc, #108]	@ (800f994 <prvAddNewTaskToReadyList+0xd4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d903      	bls.n	800f934 <prvAddNewTaskToReadyList+0x74>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f930:	4a18      	ldr	r2, [pc, #96]	@ (800f994 <prvAddNewTaskToReadyList+0xd4>)
 800f932:	6013      	str	r3, [r2, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4a15      	ldr	r2, [pc, #84]	@ (800f998 <prvAddNewTaskToReadyList+0xd8>)
 800f942:	441a      	add	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	3304      	adds	r3, #4
 800f948:	4619      	mov	r1, r3
 800f94a:	4610      	mov	r0, r2
 800f94c:	f7fe fd89 	bl	800e462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f950:	f7fe ff74 	bl	800e83c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f954:	4b0d      	ldr	r3, [pc, #52]	@ (800f98c <prvAddNewTaskToReadyList+0xcc>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00e      	beq.n	800f97a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f95c:	4b0a      	ldr	r3, [pc, #40]	@ (800f988 <prvAddNewTaskToReadyList+0xc8>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f966:	429a      	cmp	r2, r3
 800f968:	d207      	bcs.n	800f97a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f96a:	4b0c      	ldr	r3, [pc, #48]	@ (800f99c <prvAddNewTaskToReadyList+0xdc>)
 800f96c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	f3bf 8f4f 	dsb	sy
 800f976:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	24004fb4 	.word	0x24004fb4
 800f988:	24004ae0 	.word	0x24004ae0
 800f98c:	24004fc0 	.word	0x24004fc0
 800f990:	24004fd0 	.word	0x24004fd0
 800f994:	24004fbc 	.word	0x24004fbc
 800f998:	24004ae4 	.word	0x24004ae4
 800f99c:	e000ed04 	.word	0xe000ed04

0800f9a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d018      	beq.n	800f9e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9b2:	4b14      	ldr	r3, [pc, #80]	@ (800fa04 <vTaskDelay+0x64>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00b      	beq.n	800f9d2 <vTaskDelay+0x32>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	60bb      	str	r3, [r7, #8]
}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	e7fd      	b.n	800f9ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9d2:	f000 f88b 	bl	800faec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 fd1b 	bl	8010414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9de:	f000 f893 	bl	800fb08 <xTaskResumeAll>
 800f9e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d107      	bne.n	800f9fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f9ea:	4b07      	ldr	r3, [pc, #28]	@ (800fa08 <vTaskDelay+0x68>)
 800f9ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9fa:	bf00      	nop
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	24004fdc 	.word	0x24004fdc
 800fa08:	e000ed04 	.word	0xe000ed04

0800fa0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b08a      	sub	sp, #40	@ 0x28
 800fa10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	1d39      	adds	r1, r7, #4
 800fa1e:	f107 0308 	add.w	r3, r7, #8
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fe face 	bl	800dfc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	9202      	str	r2, [sp, #8]
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	2300      	movs	r3, #0
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	2300      	movs	r3, #0
 800fa38:	460a      	mov	r2, r1
 800fa3a:	4924      	ldr	r1, [pc, #144]	@ (800facc <vTaskStartScheduler+0xc0>)
 800fa3c:	4824      	ldr	r0, [pc, #144]	@ (800fad0 <vTaskStartScheduler+0xc4>)
 800fa3e:	f7ff fdf1 	bl	800f624 <xTaskCreateStatic>
 800fa42:	4603      	mov	r3, r0
 800fa44:	4a23      	ldr	r2, [pc, #140]	@ (800fad4 <vTaskStartScheduler+0xc8>)
 800fa46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa48:	4b22      	ldr	r3, [pc, #136]	@ (800fad4 <vTaskStartScheduler+0xc8>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa50:	2301      	movs	r3, #1
 800fa52:	617b      	str	r3, [r7, #20]
 800fa54:	e001      	b.n	800fa5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa56:	2300      	movs	r3, #0
 800fa58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d102      	bne.n	800fa66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa60:	f000 fd2c 	bl	80104bc <xTimerCreateTimerTask>
 800fa64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d11b      	bne.n	800faa4 <vTaskStartScheduler+0x98>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	613b      	str	r3, [r7, #16]
}
 800fa7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa80:	4b15      	ldr	r3, [pc, #84]	@ (800fad8 <vTaskStartScheduler+0xcc>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3354      	adds	r3, #84	@ 0x54
 800fa86:	4a15      	ldr	r2, [pc, #84]	@ (800fadc <vTaskStartScheduler+0xd0>)
 800fa88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa8a:	4b15      	ldr	r3, [pc, #84]	@ (800fae0 <vTaskStartScheduler+0xd4>)
 800fa8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa92:	4b14      	ldr	r3, [pc, #80]	@ (800fae4 <vTaskStartScheduler+0xd8>)
 800fa94:	2201      	movs	r2, #1
 800fa96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa98:	4b13      	ldr	r3, [pc, #76]	@ (800fae8 <vTaskStartScheduler+0xdc>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa9e:	f7fe fdf7 	bl	800e690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800faa2:	e00f      	b.n	800fac4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800faaa:	d10b      	bne.n	800fac4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800faac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab0:	f383 8811 	msr	BASEPRI, r3
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	60fb      	str	r3, [r7, #12]
}
 800fabe:	bf00      	nop
 800fac0:	bf00      	nop
 800fac2:	e7fd      	b.n	800fac0 <vTaskStartScheduler+0xb4>
}
 800fac4:	bf00      	nop
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	08016ff8 	.word	0x08016ff8
 800fad0:	08010141 	.word	0x08010141
 800fad4:	24004fd8 	.word	0x24004fd8
 800fad8:	24004ae0 	.word	0x24004ae0
 800fadc:	2400002c 	.word	0x2400002c
 800fae0:	24004fd4 	.word	0x24004fd4
 800fae4:	24004fc0 	.word	0x24004fc0
 800fae8:	24004fb8 	.word	0x24004fb8

0800faec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800faec:	b480      	push	{r7}
 800faee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800faf0:	4b04      	ldr	r3, [pc, #16]	@ (800fb04 <vTaskSuspendAll+0x18>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	3301      	adds	r3, #1
 800faf6:	4a03      	ldr	r2, [pc, #12]	@ (800fb04 <vTaskSuspendAll+0x18>)
 800faf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fafa:	bf00      	nop
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	24004fdc 	.word	0x24004fdc

0800fb08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb16:	4b42      	ldr	r3, [pc, #264]	@ (800fc20 <xTaskResumeAll+0x118>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10b      	bne.n	800fb36 <xTaskResumeAll+0x2e>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	603b      	str	r3, [r7, #0]
}
 800fb30:	bf00      	nop
 800fb32:	bf00      	nop
 800fb34:	e7fd      	b.n	800fb32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb36:	f7fe fe4f 	bl	800e7d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb3a:	4b39      	ldr	r3, [pc, #228]	@ (800fc20 <xTaskResumeAll+0x118>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	4a37      	ldr	r2, [pc, #220]	@ (800fc20 <xTaskResumeAll+0x118>)
 800fb42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb44:	4b36      	ldr	r3, [pc, #216]	@ (800fc20 <xTaskResumeAll+0x118>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d162      	bne.n	800fc12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb4c:	4b35      	ldr	r3, [pc, #212]	@ (800fc24 <xTaskResumeAll+0x11c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d05e      	beq.n	800fc12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb54:	e02f      	b.n	800fbb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb56:	4b34      	ldr	r3, [pc, #208]	@ (800fc28 <xTaskResumeAll+0x120>)
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3318      	adds	r3, #24
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fcda 	bl	800e51c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe fcd5 	bl	800e51c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb76:	4b2d      	ldr	r3, [pc, #180]	@ (800fc2c <xTaskResumeAll+0x124>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d903      	bls.n	800fb86 <xTaskResumeAll+0x7e>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb82:	4a2a      	ldr	r2, [pc, #168]	@ (800fc2c <xTaskResumeAll+0x124>)
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	4413      	add	r3, r2
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	4a27      	ldr	r2, [pc, #156]	@ (800fc30 <xTaskResumeAll+0x128>)
 800fb94:	441a      	add	r2, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3304      	adds	r3, #4
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	f7fe fc60 	bl	800e462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fba6:	4b23      	ldr	r3, [pc, #140]	@ (800fc34 <xTaskResumeAll+0x12c>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d302      	bcc.n	800fbb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fbb0:	4b21      	ldr	r3, [pc, #132]	@ (800fc38 <xTaskResumeAll+0x130>)
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbb6:	4b1c      	ldr	r3, [pc, #112]	@ (800fc28 <xTaskResumeAll+0x120>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1cb      	bne.n	800fb56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbc4:	f000 fb78 	bl	80102b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbc8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc3c <xTaskResumeAll+0x134>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d010      	beq.n	800fbf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbd4:	f000 f858 	bl	800fc88 <xTaskIncrementTick>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d002      	beq.n	800fbe4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fbde:	4b16      	ldr	r3, [pc, #88]	@ (800fc38 <xTaskResumeAll+0x130>)
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1f1      	bne.n	800fbd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fbf0:	4b12      	ldr	r3, [pc, #72]	@ (800fc3c <xTaskResumeAll+0x134>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbf6:	4b10      	ldr	r3, [pc, #64]	@ (800fc38 <xTaskResumeAll+0x130>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d009      	beq.n	800fc12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc02:	4b0f      	ldr	r3, [pc, #60]	@ (800fc40 <xTaskResumeAll+0x138>)
 800fc04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc12:	f7fe fe13 	bl	800e83c <vPortExitCritical>

	return xAlreadyYielded;
 800fc16:	68bb      	ldr	r3, [r7, #8]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	24004fdc 	.word	0x24004fdc
 800fc24:	24004fb4 	.word	0x24004fb4
 800fc28:	24004f74 	.word	0x24004f74
 800fc2c:	24004fbc 	.word	0x24004fbc
 800fc30:	24004ae4 	.word	0x24004ae4
 800fc34:	24004ae0 	.word	0x24004ae0
 800fc38:	24004fc8 	.word	0x24004fc8
 800fc3c:	24004fc4 	.word	0x24004fc4
 800fc40:	e000ed04 	.word	0xe000ed04

0800fc44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc4a:	4b05      	ldr	r3, [pc, #20]	@ (800fc60 <xTaskGetTickCount+0x1c>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc50:	687b      	ldr	r3, [r7, #4]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	24004fb8 	.word	0x24004fb8

0800fc64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc6a:	f7fe fe95 	bl	800e998 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc6e:	2300      	movs	r3, #0
 800fc70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc72:	4b04      	ldr	r3, [pc, #16]	@ (800fc84 <xTaskGetTickCountFromISR+0x20>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc78:	683b      	ldr	r3, [r7, #0]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	24004fb8 	.word	0x24004fb8

0800fc88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b086      	sub	sp, #24
 800fc8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc92:	4b4f      	ldr	r3, [pc, #316]	@ (800fdd0 <xTaskIncrementTick+0x148>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f040 8090 	bne.w	800fdbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc9c:	4b4d      	ldr	r3, [pc, #308]	@ (800fdd4 <xTaskIncrementTick+0x14c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fca4:	4a4b      	ldr	r2, [pc, #300]	@ (800fdd4 <xTaskIncrementTick+0x14c>)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d121      	bne.n	800fcf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcb0:	4b49      	ldr	r3, [pc, #292]	@ (800fdd8 <xTaskIncrementTick+0x150>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00b      	beq.n	800fcd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	603b      	str	r3, [r7, #0]
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <xTaskIncrementTick+0x46>
 800fcd2:	4b41      	ldr	r3, [pc, #260]	@ (800fdd8 <xTaskIncrementTick+0x150>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	4b40      	ldr	r3, [pc, #256]	@ (800fddc <xTaskIncrementTick+0x154>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a3e      	ldr	r2, [pc, #248]	@ (800fdd8 <xTaskIncrementTick+0x150>)
 800fcde:	6013      	str	r3, [r2, #0]
 800fce0:	4a3e      	ldr	r2, [pc, #248]	@ (800fddc <xTaskIncrementTick+0x154>)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	4b3e      	ldr	r3, [pc, #248]	@ (800fde0 <xTaskIncrementTick+0x158>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3301      	adds	r3, #1
 800fcec:	4a3c      	ldr	r2, [pc, #240]	@ (800fde0 <xTaskIncrementTick+0x158>)
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	f000 fae2 	bl	80102b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcf4:	4b3b      	ldr	r3, [pc, #236]	@ (800fde4 <xTaskIncrementTick+0x15c>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	693a      	ldr	r2, [r7, #16]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d349      	bcc.n	800fd92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcfe:	4b36      	ldr	r3, [pc, #216]	@ (800fdd8 <xTaskIncrementTick+0x150>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d104      	bne.n	800fd12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd08:	4b36      	ldr	r3, [pc, #216]	@ (800fde4 <xTaskIncrementTick+0x15c>)
 800fd0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd0e:	601a      	str	r2, [r3, #0]
					break;
 800fd10:	e03f      	b.n	800fd92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd12:	4b31      	ldr	r3, [pc, #196]	@ (800fdd8 <xTaskIncrementTick+0x150>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d203      	bcs.n	800fd32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd2a:	4a2e      	ldr	r2, [pc, #184]	@ (800fde4 <xTaskIncrementTick+0x15c>)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd30:	e02f      	b.n	800fd92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	3304      	adds	r3, #4
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe fbf0 	bl	800e51c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d004      	beq.n	800fd4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	3318      	adds	r3, #24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe fbe7 	bl	800e51c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd52:	4b25      	ldr	r3, [pc, #148]	@ (800fde8 <xTaskIncrementTick+0x160>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d903      	bls.n	800fd62 <xTaskIncrementTick+0xda>
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd5e:	4a22      	ldr	r2, [pc, #136]	@ (800fde8 <xTaskIncrementTick+0x160>)
 800fd60:	6013      	str	r3, [r2, #0]
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd66:	4613      	mov	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4a1f      	ldr	r2, [pc, #124]	@ (800fdec <xTaskIncrementTick+0x164>)
 800fd70:	441a      	add	r2, r3
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	3304      	adds	r3, #4
 800fd76:	4619      	mov	r1, r3
 800fd78:	4610      	mov	r0, r2
 800fd7a:	f7fe fb72 	bl	800e462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd82:	4b1b      	ldr	r3, [pc, #108]	@ (800fdf0 <xTaskIncrementTick+0x168>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d3b8      	bcc.n	800fcfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd90:	e7b5      	b.n	800fcfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd92:	4b17      	ldr	r3, [pc, #92]	@ (800fdf0 <xTaskIncrementTick+0x168>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd98:	4914      	ldr	r1, [pc, #80]	@ (800fdec <xTaskIncrementTick+0x164>)
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4413      	add	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	440b      	add	r3, r1
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d901      	bls.n	800fdae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdae:	4b11      	ldr	r3, [pc, #68]	@ (800fdf4 <xTaskIncrementTick+0x16c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d007      	beq.n	800fdc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	617b      	str	r3, [r7, #20]
 800fdba:	e004      	b.n	800fdc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdbc:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf8 <xTaskIncrementTick+0x170>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	4a0d      	ldr	r2, [pc, #52]	@ (800fdf8 <xTaskIncrementTick+0x170>)
 800fdc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdc6:	697b      	ldr	r3, [r7, #20]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3718      	adds	r7, #24
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	24004fdc 	.word	0x24004fdc
 800fdd4:	24004fb8 	.word	0x24004fb8
 800fdd8:	24004f6c 	.word	0x24004f6c
 800fddc:	24004f70 	.word	0x24004f70
 800fde0:	24004fcc 	.word	0x24004fcc
 800fde4:	24004fd4 	.word	0x24004fd4
 800fde8:	24004fbc 	.word	0x24004fbc
 800fdec:	24004ae4 	.word	0x24004ae4
 800fdf0:	24004ae0 	.word	0x24004ae0
 800fdf4:	24004fc8 	.word	0x24004fc8
 800fdf8:	24004fc4 	.word	0x24004fc4

0800fdfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe02:	4b2b      	ldr	r3, [pc, #172]	@ (800feb0 <vTaskSwitchContext+0xb4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe0a:	4b2a      	ldr	r3, [pc, #168]	@ (800feb4 <vTaskSwitchContext+0xb8>)
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe10:	e047      	b.n	800fea2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fe12:	4b28      	ldr	r3, [pc, #160]	@ (800feb4 <vTaskSwitchContext+0xb8>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe18:	4b27      	ldr	r3, [pc, #156]	@ (800feb8 <vTaskSwitchContext+0xbc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	e011      	b.n	800fe44 <vTaskSwitchContext+0x48>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d10b      	bne.n	800fe3e <vTaskSwitchContext+0x42>
	__asm volatile
 800fe26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	607b      	str	r3, [r7, #4]
}
 800fe38:	bf00      	nop
 800fe3a:	bf00      	nop
 800fe3c:	e7fd      	b.n	800fe3a <vTaskSwitchContext+0x3e>
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	491d      	ldr	r1, [pc, #116]	@ (800febc <vTaskSwitchContext+0xc0>)
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	440b      	add	r3, r1
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d0e3      	beq.n	800fe20 <vTaskSwitchContext+0x24>
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4a16      	ldr	r2, [pc, #88]	@ (800febc <vTaskSwitchContext+0xc0>)
 800fe64:	4413      	add	r3, r2
 800fe66:	60bb      	str	r3, [r7, #8]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	605a      	str	r2, [r3, #4]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	3308      	adds	r3, #8
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d104      	bne.n	800fe88 <vTaskSwitchContext+0x8c>
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	605a      	str	r2, [r3, #4]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	4a0c      	ldr	r2, [pc, #48]	@ (800fec0 <vTaskSwitchContext+0xc4>)
 800fe90:	6013      	str	r3, [r2, #0]
 800fe92:	4a09      	ldr	r2, [pc, #36]	@ (800feb8 <vTaskSwitchContext+0xbc>)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe98:	4b09      	ldr	r3, [pc, #36]	@ (800fec0 <vTaskSwitchContext+0xc4>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	3354      	adds	r3, #84	@ 0x54
 800fe9e:	4a09      	ldr	r2, [pc, #36]	@ (800fec4 <vTaskSwitchContext+0xc8>)
 800fea0:	6013      	str	r3, [r2, #0]
}
 800fea2:	bf00      	nop
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	24004fdc 	.word	0x24004fdc
 800feb4:	24004fc8 	.word	0x24004fc8
 800feb8:	24004fbc 	.word	0x24004fbc
 800febc:	24004ae4 	.word	0x24004ae4
 800fec0:	24004ae0 	.word	0x24004ae0
 800fec4:	2400002c 	.word	0x2400002c

0800fec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10b      	bne.n	800fef0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	60fb      	str	r3, [r7, #12]
}
 800feea:	bf00      	nop
 800feec:	bf00      	nop
 800feee:	e7fd      	b.n	800feec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fef0:	4b07      	ldr	r3, [pc, #28]	@ (800ff10 <vTaskPlaceOnEventList+0x48>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	3318      	adds	r3, #24
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fe fad6 	bl	800e4aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fefe:	2101      	movs	r1, #1
 800ff00:	6838      	ldr	r0, [r7, #0]
 800ff02:	f000 fa87 	bl	8010414 <prvAddCurrentTaskToDelayedList>
}
 800ff06:	bf00      	nop
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	24004ae0 	.word	0x24004ae0

0800ff14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b086      	sub	sp, #24
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d10b      	bne.n	800ff3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	617b      	str	r3, [r7, #20]
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	e7fd      	b.n	800ff3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff68 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3318      	adds	r3, #24
 800ff44:	4619      	mov	r1, r3
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7fe fa8b 	bl	800e462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d002      	beq.n	800ff58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	68b8      	ldr	r0, [r7, #8]
 800ff5c:	f000 fa5a 	bl	8010414 <prvAddCurrentTaskToDelayedList>
	}
 800ff60:	bf00      	nop
 800ff62:	3718      	adds	r7, #24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	24004ae0 	.word	0x24004ae0

0800ff6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10b      	bne.n	800ff9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ff82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff86:	f383 8811 	msr	BASEPRI, r3
 800ff8a:	f3bf 8f6f 	isb	sy
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	60fb      	str	r3, [r7, #12]
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop
 800ff98:	e7fd      	b.n	800ff96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	3318      	adds	r3, #24
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe fabc 	bl	800e51c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffa4:	4b1d      	ldr	r3, [pc, #116]	@ (801001c <xTaskRemoveFromEventList+0xb0>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d11d      	bne.n	800ffe8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fe fab3 	bl	800e51c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffba:	4b19      	ldr	r3, [pc, #100]	@ (8010020 <xTaskRemoveFromEventList+0xb4>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d903      	bls.n	800ffca <xTaskRemoveFromEventList+0x5e>
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc6:	4a16      	ldr	r2, [pc, #88]	@ (8010020 <xTaskRemoveFromEventList+0xb4>)
 800ffc8:	6013      	str	r3, [r2, #0]
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffce:	4613      	mov	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	4a13      	ldr	r2, [pc, #76]	@ (8010024 <xTaskRemoveFromEventList+0xb8>)
 800ffd8:	441a      	add	r2, r3
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	4619      	mov	r1, r3
 800ffe0:	4610      	mov	r0, r2
 800ffe2:	f7fe fa3e 	bl	800e462 <vListInsertEnd>
 800ffe6:	e005      	b.n	800fff4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	3318      	adds	r3, #24
 800ffec:	4619      	mov	r1, r3
 800ffee:	480e      	ldr	r0, [pc, #56]	@ (8010028 <xTaskRemoveFromEventList+0xbc>)
 800fff0:	f7fe fa37 	bl	800e462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff8:	4b0c      	ldr	r3, [pc, #48]	@ (801002c <xTaskRemoveFromEventList+0xc0>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fffe:	429a      	cmp	r2, r3
 8010000:	d905      	bls.n	801000e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010002:	2301      	movs	r3, #1
 8010004:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010006:	4b0a      	ldr	r3, [pc, #40]	@ (8010030 <xTaskRemoveFromEventList+0xc4>)
 8010008:	2201      	movs	r2, #1
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	e001      	b.n	8010012 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801000e:	2300      	movs	r3, #0
 8010010:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010012:	697b      	ldr	r3, [r7, #20]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	24004fdc 	.word	0x24004fdc
 8010020:	24004fbc 	.word	0x24004fbc
 8010024:	24004ae4 	.word	0x24004ae4
 8010028:	24004f74 	.word	0x24004f74
 801002c:	24004ae0 	.word	0x24004ae0
 8010030:	24004fc8 	.word	0x24004fc8

08010034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801003c:	4b06      	ldr	r3, [pc, #24]	@ (8010058 <vTaskInternalSetTimeOutState+0x24>)
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010044:	4b05      	ldr	r3, [pc, #20]	@ (801005c <vTaskInternalSetTimeOutState+0x28>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	605a      	str	r2, [r3, #4]
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	24004fcc 	.word	0x24004fcc
 801005c:	24004fb8 	.word	0x24004fb8

08010060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d10b      	bne.n	8010088 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010074:	f383 8811 	msr	BASEPRI, r3
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	f3bf 8f4f 	dsb	sy
 8010080:	613b      	str	r3, [r7, #16]
}
 8010082:	bf00      	nop
 8010084:	bf00      	nop
 8010086:	e7fd      	b.n	8010084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d10b      	bne.n	80100a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801008e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010092:	f383 8811 	msr	BASEPRI, r3
 8010096:	f3bf 8f6f 	isb	sy
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	60fb      	str	r3, [r7, #12]
}
 80100a0:	bf00      	nop
 80100a2:	bf00      	nop
 80100a4:	e7fd      	b.n	80100a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80100a6:	f7fe fb97 	bl	800e7d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100aa:	4b1d      	ldr	r3, [pc, #116]	@ (8010120 <xTaskCheckForTimeOut+0xc0>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	69ba      	ldr	r2, [r7, #24]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100c2:	d102      	bne.n	80100ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100c4:	2300      	movs	r3, #0
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	e023      	b.n	8010112 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	4b15      	ldr	r3, [pc, #84]	@ (8010124 <xTaskCheckForTimeOut+0xc4>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d007      	beq.n	80100e6 <xTaskCheckForTimeOut+0x86>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	69ba      	ldr	r2, [r7, #24]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d302      	bcc.n	80100e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100e0:	2301      	movs	r3, #1
 80100e2:	61fb      	str	r3, [r7, #28]
 80100e4:	e015      	b.n	8010112 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d20b      	bcs.n	8010108 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	1ad2      	subs	r2, r2, r3
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ff99 	bl	8010034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010102:	2300      	movs	r3, #0
 8010104:	61fb      	str	r3, [r7, #28]
 8010106:	e004      	b.n	8010112 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	2200      	movs	r2, #0
 801010c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801010e:	2301      	movs	r3, #1
 8010110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010112:	f7fe fb93 	bl	800e83c <vPortExitCritical>

	return xReturn;
 8010116:	69fb      	ldr	r3, [r7, #28]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3720      	adds	r7, #32
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	24004fb8 	.word	0x24004fb8
 8010124:	24004fcc 	.word	0x24004fcc

08010128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010128:	b480      	push	{r7}
 801012a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801012c:	4b03      	ldr	r3, [pc, #12]	@ (801013c <vTaskMissedYield+0x14>)
 801012e:	2201      	movs	r2, #1
 8010130:	601a      	str	r2, [r3, #0]
}
 8010132:	bf00      	nop
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	24004fc8 	.word	0x24004fc8

08010140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010148:	f000 f852 	bl	80101f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801014c:	4b06      	ldr	r3, [pc, #24]	@ (8010168 <prvIdleTask+0x28>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b01      	cmp	r3, #1
 8010152:	d9f9      	bls.n	8010148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010154:	4b05      	ldr	r3, [pc, #20]	@ (801016c <prvIdleTask+0x2c>)
 8010156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801015a:	601a      	str	r2, [r3, #0]
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010164:	e7f0      	b.n	8010148 <prvIdleTask+0x8>
 8010166:	bf00      	nop
 8010168:	24004ae4 	.word	0x24004ae4
 801016c:	e000ed04 	.word	0xe000ed04

08010170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010176:	2300      	movs	r3, #0
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	e00c      	b.n	8010196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	4613      	mov	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	4413      	add	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4a12      	ldr	r2, [pc, #72]	@ (80101d0 <prvInitialiseTaskLists+0x60>)
 8010188:	4413      	add	r3, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f7fe f93c 	bl	800e408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	3301      	adds	r3, #1
 8010194:	607b      	str	r3, [r7, #4]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b37      	cmp	r3, #55	@ 0x37
 801019a:	d9ef      	bls.n	801017c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801019c:	480d      	ldr	r0, [pc, #52]	@ (80101d4 <prvInitialiseTaskLists+0x64>)
 801019e:	f7fe f933 	bl	800e408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101a2:	480d      	ldr	r0, [pc, #52]	@ (80101d8 <prvInitialiseTaskLists+0x68>)
 80101a4:	f7fe f930 	bl	800e408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101a8:	480c      	ldr	r0, [pc, #48]	@ (80101dc <prvInitialiseTaskLists+0x6c>)
 80101aa:	f7fe f92d 	bl	800e408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101ae:	480c      	ldr	r0, [pc, #48]	@ (80101e0 <prvInitialiseTaskLists+0x70>)
 80101b0:	f7fe f92a 	bl	800e408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101b4:	480b      	ldr	r0, [pc, #44]	@ (80101e4 <prvInitialiseTaskLists+0x74>)
 80101b6:	f7fe f927 	bl	800e408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101ba:	4b0b      	ldr	r3, [pc, #44]	@ (80101e8 <prvInitialiseTaskLists+0x78>)
 80101bc:	4a05      	ldr	r2, [pc, #20]	@ (80101d4 <prvInitialiseTaskLists+0x64>)
 80101be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101c0:	4b0a      	ldr	r3, [pc, #40]	@ (80101ec <prvInitialiseTaskLists+0x7c>)
 80101c2:	4a05      	ldr	r2, [pc, #20]	@ (80101d8 <prvInitialiseTaskLists+0x68>)
 80101c4:	601a      	str	r2, [r3, #0]
}
 80101c6:	bf00      	nop
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	24004ae4 	.word	0x24004ae4
 80101d4:	24004f44 	.word	0x24004f44
 80101d8:	24004f58 	.word	0x24004f58
 80101dc:	24004f74 	.word	0x24004f74
 80101e0:	24004f88 	.word	0x24004f88
 80101e4:	24004fa0 	.word	0x24004fa0
 80101e8:	24004f6c 	.word	0x24004f6c
 80101ec:	24004f70 	.word	0x24004f70

080101f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101f6:	e019      	b.n	801022c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101f8:	f7fe faee 	bl	800e7d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101fc:	4b10      	ldr	r3, [pc, #64]	@ (8010240 <prvCheckTasksWaitingTermination+0x50>)
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3304      	adds	r3, #4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fe f987 	bl	800e51c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801020e:	4b0d      	ldr	r3, [pc, #52]	@ (8010244 <prvCheckTasksWaitingTermination+0x54>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3b01      	subs	r3, #1
 8010214:	4a0b      	ldr	r2, [pc, #44]	@ (8010244 <prvCheckTasksWaitingTermination+0x54>)
 8010216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010218:	4b0b      	ldr	r3, [pc, #44]	@ (8010248 <prvCheckTasksWaitingTermination+0x58>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	3b01      	subs	r3, #1
 801021e:	4a0a      	ldr	r2, [pc, #40]	@ (8010248 <prvCheckTasksWaitingTermination+0x58>)
 8010220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010222:	f7fe fb0b 	bl	800e83c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f810 	bl	801024c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801022c:	4b06      	ldr	r3, [pc, #24]	@ (8010248 <prvCheckTasksWaitingTermination+0x58>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1e1      	bne.n	80101f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010234:	bf00      	nop
 8010236:	bf00      	nop
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	24004f88 	.word	0x24004f88
 8010244:	24004fb4 	.word	0x24004fb4
 8010248:	24004f9c 	.word	0x24004f9c

0801024c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3354      	adds	r3, #84	@ 0x54
 8010258:	4618      	mov	r0, r3
 801025a:	f001 fdef 	bl	8011e3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010264:	2b00      	cmp	r3, #0
 8010266:	d108      	bne.n	801027a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801026c:	4618      	mov	r0, r3
 801026e:	f7fd ffab 	bl	800e1c8 <vPortFree>
				vPortFree( pxTCB );
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7fd ffa8 	bl	800e1c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010278:	e019      	b.n	80102ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010280:	2b01      	cmp	r3, #1
 8010282:	d103      	bne.n	801028c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7fd ff9f 	bl	800e1c8 <vPortFree>
	}
 801028a:	e010      	b.n	80102ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010292:	2b02      	cmp	r3, #2
 8010294:	d00b      	beq.n	80102ae <prvDeleteTCB+0x62>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	60fb      	str	r3, [r7, #12]
}
 80102a8:	bf00      	nop
 80102aa:	bf00      	nop
 80102ac:	e7fd      	b.n	80102aa <prvDeleteTCB+0x5e>
	}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102be:	4b0c      	ldr	r3, [pc, #48]	@ (80102f0 <prvResetNextTaskUnblockTime+0x38>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d104      	bne.n	80102d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102c8:	4b0a      	ldr	r3, [pc, #40]	@ (80102f4 <prvResetNextTaskUnblockTime+0x3c>)
 80102ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102d0:	e008      	b.n	80102e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102d2:	4b07      	ldr	r3, [pc, #28]	@ (80102f0 <prvResetNextTaskUnblockTime+0x38>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	4a04      	ldr	r2, [pc, #16]	@ (80102f4 <prvResetNextTaskUnblockTime+0x3c>)
 80102e2:	6013      	str	r3, [r2, #0]
}
 80102e4:	bf00      	nop
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr
 80102f0:	24004f6c 	.word	0x24004f6c
 80102f4:	24004fd4 	.word	0x24004fd4

080102f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102fe:	4b0b      	ldr	r3, [pc, #44]	@ (801032c <xTaskGetSchedulerState+0x34>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010306:	2301      	movs	r3, #1
 8010308:	607b      	str	r3, [r7, #4]
 801030a:	e008      	b.n	801031e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801030c:	4b08      	ldr	r3, [pc, #32]	@ (8010330 <xTaskGetSchedulerState+0x38>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d102      	bne.n	801031a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010314:	2302      	movs	r3, #2
 8010316:	607b      	str	r3, [r7, #4]
 8010318:	e001      	b.n	801031e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801031a:	2300      	movs	r3, #0
 801031c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801031e:	687b      	ldr	r3, [r7, #4]
	}
 8010320:	4618      	mov	r0, r3
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	24004fc0 	.word	0x24004fc0
 8010330:	24004fdc 	.word	0x24004fdc

08010334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010340:	2300      	movs	r3, #0
 8010342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d058      	beq.n	80103fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801034a:	4b2f      	ldr	r3, [pc, #188]	@ (8010408 <xTaskPriorityDisinherit+0xd4>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	429a      	cmp	r2, r3
 8010352:	d00b      	beq.n	801036c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	60fb      	str	r3, [r7, #12]
}
 8010366:	bf00      	nop
 8010368:	bf00      	nop
 801036a:	e7fd      	b.n	8010368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10b      	bne.n	801038c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	60bb      	str	r3, [r7, #8]
}
 8010386:	bf00      	nop
 8010388:	bf00      	nop
 801038a:	e7fd      	b.n	8010388 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010390:	1e5a      	subs	r2, r3, #1
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801039e:	429a      	cmp	r2, r3
 80103a0:	d02c      	beq.n	80103fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d128      	bne.n	80103fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	3304      	adds	r3, #4
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe f8b4 	bl	800e51c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103cc:	4b0f      	ldr	r3, [pc, #60]	@ (801040c <xTaskPriorityDisinherit+0xd8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d903      	bls.n	80103dc <xTaskPriorityDisinherit+0xa8>
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103d8:	4a0c      	ldr	r2, [pc, #48]	@ (801040c <xTaskPriorityDisinherit+0xd8>)
 80103da:	6013      	str	r3, [r2, #0]
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103e0:	4613      	mov	r3, r2
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	4413      	add	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4a09      	ldr	r2, [pc, #36]	@ (8010410 <xTaskPriorityDisinherit+0xdc>)
 80103ea:	441a      	add	r2, r3
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	3304      	adds	r3, #4
 80103f0:	4619      	mov	r1, r3
 80103f2:	4610      	mov	r0, r2
 80103f4:	f7fe f835 	bl	800e462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103f8:	2301      	movs	r3, #1
 80103fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103fc:	697b      	ldr	r3, [r7, #20]
	}
 80103fe:	4618      	mov	r0, r3
 8010400:	3718      	adds	r7, #24
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	24004ae0 	.word	0x24004ae0
 801040c:	24004fbc 	.word	0x24004fbc
 8010410:	24004ae4 	.word	0x24004ae4

08010414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801041e:	4b21      	ldr	r3, [pc, #132]	@ (80104a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010424:	4b20      	ldr	r3, [pc, #128]	@ (80104a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3304      	adds	r3, #4
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe f876 	bl	800e51c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010436:	d10a      	bne.n	801044e <prvAddCurrentTaskToDelayedList+0x3a>
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d007      	beq.n	801044e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801043e:	4b1a      	ldr	r3, [pc, #104]	@ (80104a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3304      	adds	r3, #4
 8010444:	4619      	mov	r1, r3
 8010446:	4819      	ldr	r0, [pc, #100]	@ (80104ac <prvAddCurrentTaskToDelayedList+0x98>)
 8010448:	f7fe f80b 	bl	800e462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801044c:	e026      	b.n	801049c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4413      	add	r3, r2
 8010454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010456:	4b14      	ldr	r3, [pc, #80]	@ (80104a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	429a      	cmp	r2, r3
 8010464:	d209      	bcs.n	801047a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010466:	4b12      	ldr	r3, [pc, #72]	@ (80104b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	4b0f      	ldr	r3, [pc, #60]	@ (80104a8 <prvAddCurrentTaskToDelayedList+0x94>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	3304      	adds	r3, #4
 8010470:	4619      	mov	r1, r3
 8010472:	4610      	mov	r0, r2
 8010474:	f7fe f819 	bl	800e4aa <vListInsert>
}
 8010478:	e010      	b.n	801049c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801047a:	4b0e      	ldr	r3, [pc, #56]	@ (80104b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	4b0a      	ldr	r3, [pc, #40]	@ (80104a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	3304      	adds	r3, #4
 8010484:	4619      	mov	r1, r3
 8010486:	4610      	mov	r0, r2
 8010488:	f7fe f80f 	bl	800e4aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801048c:	4b0a      	ldr	r3, [pc, #40]	@ (80104b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	429a      	cmp	r2, r3
 8010494:	d202      	bcs.n	801049c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010496:	4a08      	ldr	r2, [pc, #32]	@ (80104b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	6013      	str	r3, [r2, #0]
}
 801049c:	bf00      	nop
 801049e:	3710      	adds	r7, #16
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	24004fb8 	.word	0x24004fb8
 80104a8:	24004ae0 	.word	0x24004ae0
 80104ac:	24004fa0 	.word	0x24004fa0
 80104b0:	24004f70 	.word	0x24004f70
 80104b4:	24004f6c 	.word	0x24004f6c
 80104b8:	24004fd4 	.word	0x24004fd4

080104bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	@ 0x28
 80104c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80104c2:	2300      	movs	r3, #0
 80104c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80104c6:	f000 fb13 	bl	8010af0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80104ca:	4b1d      	ldr	r3, [pc, #116]	@ (8010540 <xTimerCreateTimerTask+0x84>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d021      	beq.n	8010516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80104d6:	2300      	movs	r3, #0
 80104d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80104da:	1d3a      	adds	r2, r7, #4
 80104dc:	f107 0108 	add.w	r1, r7, #8
 80104e0:	f107 030c 	add.w	r3, r7, #12
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd fd87 	bl	800dff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	9202      	str	r2, [sp, #8]
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	2302      	movs	r3, #2
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	2300      	movs	r3, #0
 80104fa:	460a      	mov	r2, r1
 80104fc:	4911      	ldr	r1, [pc, #68]	@ (8010544 <xTimerCreateTimerTask+0x88>)
 80104fe:	4812      	ldr	r0, [pc, #72]	@ (8010548 <xTimerCreateTimerTask+0x8c>)
 8010500:	f7ff f890 	bl	800f624 <xTaskCreateStatic>
 8010504:	4603      	mov	r3, r0
 8010506:	4a11      	ldr	r2, [pc, #68]	@ (801054c <xTimerCreateTimerTask+0x90>)
 8010508:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801050a:	4b10      	ldr	r3, [pc, #64]	@ (801054c <xTimerCreateTimerTask+0x90>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d001      	beq.n	8010516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010512:	2301      	movs	r3, #1
 8010514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10b      	bne.n	8010534 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801051c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010520:	f383 8811 	msr	BASEPRI, r3
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	613b      	str	r3, [r7, #16]
}
 801052e:	bf00      	nop
 8010530:	bf00      	nop
 8010532:	e7fd      	b.n	8010530 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010534:	697b      	ldr	r3, [r7, #20]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	24005010 	.word	0x24005010
 8010544:	08017000 	.word	0x08017000
 8010548:	08010689 	.word	0x08010689
 801054c:	24005014 	.word	0x24005014

08010550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b08a      	sub	sp, #40	@ 0x28
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801055e:	2300      	movs	r3, #0
 8010560:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10b      	bne.n	8010580 <xTimerGenericCommand+0x30>
	__asm volatile
 8010568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056c:	f383 8811 	msr	BASEPRI, r3
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	623b      	str	r3, [r7, #32]
}
 801057a:	bf00      	nop
 801057c:	bf00      	nop
 801057e:	e7fd      	b.n	801057c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010580:	4b19      	ldr	r3, [pc, #100]	@ (80105e8 <xTimerGenericCommand+0x98>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d02a      	beq.n	80105de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b05      	cmp	r3, #5
 8010598:	dc18      	bgt.n	80105cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801059a:	f7ff fead 	bl	80102f8 <xTaskGetSchedulerState>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d109      	bne.n	80105b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105a4:	4b10      	ldr	r3, [pc, #64]	@ (80105e8 <xTimerGenericCommand+0x98>)
 80105a6:	6818      	ldr	r0, [r3, #0]
 80105a8:	f107 0110 	add.w	r1, r7, #16
 80105ac:	2300      	movs	r3, #0
 80105ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105b0:	f7fe fbc6 	bl	800ed40 <xQueueGenericSend>
 80105b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80105b6:	e012      	b.n	80105de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105b8:	4b0b      	ldr	r3, [pc, #44]	@ (80105e8 <xTimerGenericCommand+0x98>)
 80105ba:	6818      	ldr	r0, [r3, #0]
 80105bc:	f107 0110 	add.w	r1, r7, #16
 80105c0:	2300      	movs	r3, #0
 80105c2:	2200      	movs	r2, #0
 80105c4:	f7fe fbbc 	bl	800ed40 <xQueueGenericSend>
 80105c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80105ca:	e008      	b.n	80105de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105cc:	4b06      	ldr	r3, [pc, #24]	@ (80105e8 <xTimerGenericCommand+0x98>)
 80105ce:	6818      	ldr	r0, [r3, #0]
 80105d0:	f107 0110 	add.w	r1, r7, #16
 80105d4:	2300      	movs	r3, #0
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	f7fe fcb4 	bl	800ef44 <xQueueGenericSendFromISR>
 80105dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3728      	adds	r7, #40	@ 0x28
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	24005010 	.word	0x24005010

080105ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b088      	sub	sp, #32
 80105f0:	af02      	add	r7, sp, #8
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105f6:	4b23      	ldr	r3, [pc, #140]	@ (8010684 <prvProcessExpiredTimer+0x98>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	3304      	adds	r3, #4
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd ff89 	bl	800e51c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010610:	f003 0304 	and.w	r3, r3, #4
 8010614:	2b00      	cmp	r3, #0
 8010616:	d023      	beq.n	8010660 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	699a      	ldr	r2, [r3, #24]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	18d1      	adds	r1, r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	683a      	ldr	r2, [r7, #0]
 8010624:	6978      	ldr	r0, [r7, #20]
 8010626:	f000 f8d5 	bl	80107d4 <prvInsertTimerInActiveList>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d020      	beq.n	8010672 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010630:	2300      	movs	r3, #0
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	2300      	movs	r3, #0
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	2100      	movs	r1, #0
 801063a:	6978      	ldr	r0, [r7, #20]
 801063c:	f7ff ff88 	bl	8010550 <xTimerGenericCommand>
 8010640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d114      	bne.n	8010672 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064c:	f383 8811 	msr	BASEPRI, r3
 8010650:	f3bf 8f6f 	isb	sy
 8010654:	f3bf 8f4f 	dsb	sy
 8010658:	60fb      	str	r3, [r7, #12]
}
 801065a:	bf00      	nop
 801065c:	bf00      	nop
 801065e:	e7fd      	b.n	801065c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010666:	f023 0301 	bic.w	r3, r3, #1
 801066a:	b2da      	uxtb	r2, r3
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	6a1b      	ldr	r3, [r3, #32]
 8010676:	6978      	ldr	r0, [r7, #20]
 8010678:	4798      	blx	r3
}
 801067a:	bf00      	nop
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	24005008 	.word	0x24005008

08010688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010690:	f107 0308 	add.w	r3, r7, #8
 8010694:	4618      	mov	r0, r3
 8010696:	f000 f859 	bl	801074c <prvGetNextExpireTime>
 801069a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	4619      	mov	r1, r3
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 f805 	bl	80106b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80106a6:	f000 f8d7 	bl	8010858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106aa:	bf00      	nop
 80106ac:	e7f0      	b.n	8010690 <prvTimerTask+0x8>
	...

080106b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106ba:	f7ff fa17 	bl	800faec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106be:	f107 0308 	add.w	r3, r7, #8
 80106c2:	4618      	mov	r0, r3
 80106c4:	f000 f866 	bl	8010794 <prvSampleTimeNow>
 80106c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d130      	bne.n	8010732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d10a      	bne.n	80106ec <prvProcessTimerOrBlockTask+0x3c>
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d806      	bhi.n	80106ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80106de:	f7ff fa13 	bl	800fb08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80106e2:	68f9      	ldr	r1, [r7, #12]
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff ff81 	bl	80105ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106ea:	e024      	b.n	8010736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d008      	beq.n	8010704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80106f2:	4b13      	ldr	r3, [pc, #76]	@ (8010740 <prvProcessTimerOrBlockTask+0x90>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <prvProcessTimerOrBlockTask+0x50>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e000      	b.n	8010702 <prvProcessTimerOrBlockTask+0x52>
 8010700:	2300      	movs	r3, #0
 8010702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010704:	4b0f      	ldr	r3, [pc, #60]	@ (8010744 <prvProcessTimerOrBlockTask+0x94>)
 8010706:	6818      	ldr	r0, [r3, #0]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	683a      	ldr	r2, [r7, #0]
 8010710:	4619      	mov	r1, r3
 8010712:	f7fe ff53 	bl	800f5bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010716:	f7ff f9f7 	bl	800fb08 <xTaskResumeAll>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10a      	bne.n	8010736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010720:	4b09      	ldr	r3, [pc, #36]	@ (8010748 <prvProcessTimerOrBlockTask+0x98>)
 8010722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010726:	601a      	str	r2, [r3, #0]
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
}
 8010730:	e001      	b.n	8010736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010732:	f7ff f9e9 	bl	800fb08 <xTaskResumeAll>
}
 8010736:	bf00      	nop
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	2400500c 	.word	0x2400500c
 8010744:	24005010 	.word	0x24005010
 8010748:	e000ed04 	.word	0xe000ed04

0801074c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801074c:	b480      	push	{r7}
 801074e:	b085      	sub	sp, #20
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010754:	4b0e      	ldr	r3, [pc, #56]	@ (8010790 <prvGetNextExpireTime+0x44>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <prvGetNextExpireTime+0x16>
 801075e:	2201      	movs	r2, #1
 8010760:	e000      	b.n	8010764 <prvGetNextExpireTime+0x18>
 8010762:	2200      	movs	r2, #0
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d105      	bne.n	801077c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010770:	4b07      	ldr	r3, [pc, #28]	@ (8010790 <prvGetNextExpireTime+0x44>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	e001      	b.n	8010780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010780:	68fb      	ldr	r3, [r7, #12]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3714      	adds	r7, #20
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr
 801078e:	bf00      	nop
 8010790:	24005008 	.word	0x24005008

08010794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801079c:	f7ff fa52 	bl	800fc44 <xTaskGetTickCount>
 80107a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80107a2:	4b0b      	ldr	r3, [pc, #44]	@ (80107d0 <prvSampleTimeNow+0x3c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d205      	bcs.n	80107b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80107ac:	f000 f93a 	bl	8010a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	e002      	b.n	80107be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107be:	4a04      	ldr	r2, [pc, #16]	@ (80107d0 <prvSampleTimeNow+0x3c>)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80107c4:	68fb      	ldr	r3, [r7, #12]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	24005018 	.word	0x24005018

080107d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b086      	sub	sp, #24
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
 80107e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80107e2:	2300      	movs	r3, #0
 80107e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80107f2:	68ba      	ldr	r2, [r7, #8]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d812      	bhi.n	8010820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	699b      	ldr	r3, [r3, #24]
 8010804:	429a      	cmp	r2, r3
 8010806:	d302      	bcc.n	801080e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010808:	2301      	movs	r3, #1
 801080a:	617b      	str	r3, [r7, #20]
 801080c:	e01b      	b.n	8010846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801080e:	4b10      	ldr	r3, [pc, #64]	@ (8010850 <prvInsertTimerInActiveList+0x7c>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	3304      	adds	r3, #4
 8010816:	4619      	mov	r1, r3
 8010818:	4610      	mov	r0, r2
 801081a:	f7fd fe46 	bl	800e4aa <vListInsert>
 801081e:	e012      	b.n	8010846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d206      	bcs.n	8010836 <prvInsertTimerInActiveList+0x62>
 8010828:	68ba      	ldr	r2, [r7, #8]
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d302      	bcc.n	8010836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010830:	2301      	movs	r3, #1
 8010832:	617b      	str	r3, [r7, #20]
 8010834:	e007      	b.n	8010846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010836:	4b07      	ldr	r3, [pc, #28]	@ (8010854 <prvInsertTimerInActiveList+0x80>)
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3304      	adds	r3, #4
 801083e:	4619      	mov	r1, r3
 8010840:	4610      	mov	r0, r2
 8010842:	f7fd fe32 	bl	800e4aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010846:	697b      	ldr	r3, [r7, #20]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3718      	adds	r7, #24
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	2400500c 	.word	0x2400500c
 8010854:	24005008 	.word	0x24005008

08010858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08e      	sub	sp, #56	@ 0x38
 801085c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801085e:	e0ce      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	da19      	bge.n	801089a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010866:	1d3b      	adds	r3, r7, #4
 8010868:	3304      	adds	r3, #4
 801086a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801086c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d10b      	bne.n	801088a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010876:	f383 8811 	msr	BASEPRI, r3
 801087a:	f3bf 8f6f 	isb	sy
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	61fb      	str	r3, [r7, #28]
}
 8010884:	bf00      	nop
 8010886:	bf00      	nop
 8010888:	e7fd      	b.n	8010886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010890:	6850      	ldr	r0, [r2, #4]
 8010892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010894:	6892      	ldr	r2, [r2, #8]
 8010896:	4611      	mov	r1, r2
 8010898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f2c0 80ae 	blt.w	80109fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80108a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a8:	695b      	ldr	r3, [r3, #20]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d004      	beq.n	80108b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b0:	3304      	adds	r3, #4
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fd fe32 	bl	800e51c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108b8:	463b      	mov	r3, r7
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7ff ff6a 	bl	8010794 <prvSampleTimeNow>
 80108c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b09      	cmp	r3, #9
 80108c6:	f200 8097 	bhi.w	80109f8 <prvProcessReceivedCommands+0x1a0>
 80108ca:	a201      	add	r2, pc, #4	@ (adr r2, 80108d0 <prvProcessReceivedCommands+0x78>)
 80108cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d0:	080108f9 	.word	0x080108f9
 80108d4:	080108f9 	.word	0x080108f9
 80108d8:	080108f9 	.word	0x080108f9
 80108dc:	0801096f 	.word	0x0801096f
 80108e0:	08010983 	.word	0x08010983
 80108e4:	080109cf 	.word	0x080109cf
 80108e8:	080108f9 	.word	0x080108f9
 80108ec:	080108f9 	.word	0x080108f9
 80108f0:	0801096f 	.word	0x0801096f
 80108f4:	08010983 	.word	0x08010983
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108fe:	f043 0301 	orr.w	r3, r3, #1
 8010902:	b2da      	uxtb	r2, r3
 8010904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	18d1      	adds	r1, r2, r3
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010918:	f7ff ff5c 	bl	80107d4 <prvInsertTimerInActiveList>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d06c      	beq.n	80109fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010924:	6a1b      	ldr	r3, [r3, #32]
 8010926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010930:	f003 0304 	and.w	r3, r3, #4
 8010934:	2b00      	cmp	r3, #0
 8010936:	d061      	beq.n	80109fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	441a      	add	r2, r3
 8010940:	2300      	movs	r3, #0
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	2300      	movs	r3, #0
 8010946:	2100      	movs	r1, #0
 8010948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801094a:	f7ff fe01 	bl	8010550 <xTimerGenericCommand>
 801094e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d152      	bne.n	80109fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	61bb      	str	r3, [r7, #24]
}
 8010968:	bf00      	nop
 801096a:	bf00      	nop
 801096c:	e7fd      	b.n	801096a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010974:	f023 0301 	bic.w	r3, r3, #1
 8010978:	b2da      	uxtb	r2, r3
 801097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801097c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010980:	e03d      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010988:	f043 0301 	orr.w	r3, r3, #1
 801098c:	b2da      	uxtb	r2, r3
 801098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010998:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d10b      	bne.n	80109ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80109a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a6:	f383 8811 	msr	BASEPRI, r3
 80109aa:	f3bf 8f6f 	isb	sy
 80109ae:	f3bf 8f4f 	dsb	sy
 80109b2:	617b      	str	r3, [r7, #20]
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop
 80109b8:	e7fd      	b.n	80109b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c0:	18d1      	adds	r1, r2, r3
 80109c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109c8:	f7ff ff04 	bl	80107d4 <prvInsertTimerInActiveList>
					break;
 80109cc:	e017      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109d4:	f003 0302 	and.w	r3, r3, #2
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d103      	bne.n	80109e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80109dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109de:	f7fd fbf3 	bl	800e1c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109e2:	e00c      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109ea:	f023 0301 	bic.w	r3, r3, #1
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80109f6:	e002      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80109f8:	bf00      	nop
 80109fa:	e000      	b.n	80109fe <prvProcessReceivedCommands+0x1a6>
					break;
 80109fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109fe:	4b08      	ldr	r3, [pc, #32]	@ (8010a20 <prvProcessReceivedCommands+0x1c8>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	1d39      	adds	r1, r7, #4
 8010a04:	2200      	movs	r2, #0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe fb3a 	bl	800f080 <xQueueReceive>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f47f af26 	bne.w	8010860 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop
 8010a18:	3730      	adds	r7, #48	@ 0x30
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	24005010 	.word	0x24005010

08010a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b088      	sub	sp, #32
 8010a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a2a:	e049      	b.n	8010ac0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a36:	4b2c      	ldr	r3, [pc, #176]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	3304      	adds	r3, #4
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fd fd69 	bl	800e51c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d02f      	beq.n	8010ac0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	699b      	ldr	r3, [r3, #24]
 8010a64:	693a      	ldr	r2, [r7, #16]
 8010a66:	4413      	add	r3, r2
 8010a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a6a:	68ba      	ldr	r2, [r7, #8]
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d90e      	bls.n	8010a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	3304      	adds	r3, #4
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f7fd fd0e 	bl	800e4aa <vListInsert>
 8010a8e:	e017      	b.n	8010ac0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a90:	2300      	movs	r3, #0
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	2300      	movs	r3, #0
 8010a96:	693a      	ldr	r2, [r7, #16]
 8010a98:	2100      	movs	r1, #0
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f7ff fd58 	bl	8010550 <xTimerGenericCommand>
 8010aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10b      	bne.n	8010ac0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	603b      	str	r3, [r7, #0]
}
 8010aba:	bf00      	nop
 8010abc:	bf00      	nop
 8010abe:	e7fd      	b.n	8010abc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ac0:	4b09      	ldr	r3, [pc, #36]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d1b0      	bne.n	8010a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010aca:	4b07      	ldr	r3, [pc, #28]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ad0:	4b06      	ldr	r3, [pc, #24]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4a04      	ldr	r2, [pc, #16]	@ (8010ae8 <prvSwitchTimerLists+0xc4>)
 8010ad6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010ad8:	4a04      	ldr	r2, [pc, #16]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	6013      	str	r3, [r2, #0]
}
 8010ade:	bf00      	nop
 8010ae0:	3718      	adds	r7, #24
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	24005008 	.word	0x24005008
 8010aec:	2400500c 	.word	0x2400500c

08010af0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010af6:	f7fd fe6f 	bl	800e7d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010afa:	4b15      	ldr	r3, [pc, #84]	@ (8010b50 <prvCheckForValidListAndQueue+0x60>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d120      	bne.n	8010b44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b02:	4814      	ldr	r0, [pc, #80]	@ (8010b54 <prvCheckForValidListAndQueue+0x64>)
 8010b04:	f7fd fc80 	bl	800e408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b08:	4813      	ldr	r0, [pc, #76]	@ (8010b58 <prvCheckForValidListAndQueue+0x68>)
 8010b0a:	f7fd fc7d 	bl	800e408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b0e:	4b13      	ldr	r3, [pc, #76]	@ (8010b5c <prvCheckForValidListAndQueue+0x6c>)
 8010b10:	4a10      	ldr	r2, [pc, #64]	@ (8010b54 <prvCheckForValidListAndQueue+0x64>)
 8010b12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b14:	4b12      	ldr	r3, [pc, #72]	@ (8010b60 <prvCheckForValidListAndQueue+0x70>)
 8010b16:	4a10      	ldr	r2, [pc, #64]	@ (8010b58 <prvCheckForValidListAndQueue+0x68>)
 8010b18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	9300      	str	r3, [sp, #0]
 8010b1e:	4b11      	ldr	r3, [pc, #68]	@ (8010b64 <prvCheckForValidListAndQueue+0x74>)
 8010b20:	4a11      	ldr	r2, [pc, #68]	@ (8010b68 <prvCheckForValidListAndQueue+0x78>)
 8010b22:	2110      	movs	r1, #16
 8010b24:	200a      	movs	r0, #10
 8010b26:	f7fd ffe3 	bl	800eaf0 <xQueueGenericCreateStatic>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	4a08      	ldr	r2, [pc, #32]	@ (8010b50 <prvCheckForValidListAndQueue+0x60>)
 8010b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b30:	4b07      	ldr	r3, [pc, #28]	@ (8010b50 <prvCheckForValidListAndQueue+0x60>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d005      	beq.n	8010b44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b38:	4b05      	ldr	r3, [pc, #20]	@ (8010b50 <prvCheckForValidListAndQueue+0x60>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	490b      	ldr	r1, [pc, #44]	@ (8010b6c <prvCheckForValidListAndQueue+0x7c>)
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fd12 	bl	800f568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b44:	f7fd fe7a 	bl	800e83c <vPortExitCritical>
}
 8010b48:	bf00      	nop
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	24005010 	.word	0x24005010
 8010b54:	24004fe0 	.word	0x24004fe0
 8010b58:	24004ff4 	.word	0x24004ff4
 8010b5c:	24005008 	.word	0x24005008
 8010b60:	2400500c 	.word	0x2400500c
 8010b64:	240050bc 	.word	0x240050bc
 8010b68:	2400501c 	.word	0x2400501c
 8010b6c:	08017008 	.word	0x08017008

08010b70 <__cvt>:
 8010b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b72:	ed2d 8b02 	vpush	{d8}
 8010b76:	eeb0 8b40 	vmov.f64	d8, d0
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	4617      	mov	r7, r2
 8010b7e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010b80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b82:	ee18 2a90 	vmov	r2, s17
 8010b86:	f025 0520 	bic.w	r5, r5, #32
 8010b8a:	2a00      	cmp	r2, #0
 8010b8c:	bfb6      	itet	lt
 8010b8e:	222d      	movlt	r2, #45	@ 0x2d
 8010b90:	2200      	movge	r2, #0
 8010b92:	eeb1 8b40 	vneglt.f64	d8, d0
 8010b96:	2d46      	cmp	r5, #70	@ 0x46
 8010b98:	460c      	mov	r4, r1
 8010b9a:	701a      	strb	r2, [r3, #0]
 8010b9c:	d004      	beq.n	8010ba8 <__cvt+0x38>
 8010b9e:	2d45      	cmp	r5, #69	@ 0x45
 8010ba0:	d100      	bne.n	8010ba4 <__cvt+0x34>
 8010ba2:	3401      	adds	r4, #1
 8010ba4:	2102      	movs	r1, #2
 8010ba6:	e000      	b.n	8010baa <__cvt+0x3a>
 8010ba8:	2103      	movs	r1, #3
 8010baa:	ab03      	add	r3, sp, #12
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	ab02      	add	r3, sp, #8
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	4622      	mov	r2, r4
 8010bb4:	4633      	mov	r3, r6
 8010bb6:	eeb0 0b48 	vmov.f64	d0, d8
 8010bba:	f001 fa9d 	bl	80120f8 <_dtoa_r>
 8010bbe:	2d47      	cmp	r5, #71	@ 0x47
 8010bc0:	d114      	bne.n	8010bec <__cvt+0x7c>
 8010bc2:	07fb      	lsls	r3, r7, #31
 8010bc4:	d50a      	bpl.n	8010bdc <__cvt+0x6c>
 8010bc6:	1902      	adds	r2, r0, r4
 8010bc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd0:	bf08      	it	eq
 8010bd2:	9203      	streq	r2, [sp, #12]
 8010bd4:	2130      	movs	r1, #48	@ 0x30
 8010bd6:	9b03      	ldr	r3, [sp, #12]
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d319      	bcc.n	8010c10 <__cvt+0xa0>
 8010bdc:	9b03      	ldr	r3, [sp, #12]
 8010bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010be0:	1a1b      	subs	r3, r3, r0
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	b005      	add	sp, #20
 8010be6:	ecbd 8b02 	vpop	{d8}
 8010bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bec:	2d46      	cmp	r5, #70	@ 0x46
 8010bee:	eb00 0204 	add.w	r2, r0, r4
 8010bf2:	d1e9      	bne.n	8010bc8 <__cvt+0x58>
 8010bf4:	7803      	ldrb	r3, [r0, #0]
 8010bf6:	2b30      	cmp	r3, #48	@ 0x30
 8010bf8:	d107      	bne.n	8010c0a <__cvt+0x9a>
 8010bfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	bf1c      	itt	ne
 8010c04:	f1c4 0401 	rsbne	r4, r4, #1
 8010c08:	6034      	strne	r4, [r6, #0]
 8010c0a:	6833      	ldr	r3, [r6, #0]
 8010c0c:	441a      	add	r2, r3
 8010c0e:	e7db      	b.n	8010bc8 <__cvt+0x58>
 8010c10:	1c5c      	adds	r4, r3, #1
 8010c12:	9403      	str	r4, [sp, #12]
 8010c14:	7019      	strb	r1, [r3, #0]
 8010c16:	e7de      	b.n	8010bd6 <__cvt+0x66>

08010c18 <__exponent>:
 8010c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c1a:	2900      	cmp	r1, #0
 8010c1c:	bfba      	itte	lt
 8010c1e:	4249      	neglt	r1, r1
 8010c20:	232d      	movlt	r3, #45	@ 0x2d
 8010c22:	232b      	movge	r3, #43	@ 0x2b
 8010c24:	2909      	cmp	r1, #9
 8010c26:	7002      	strb	r2, [r0, #0]
 8010c28:	7043      	strb	r3, [r0, #1]
 8010c2a:	dd29      	ble.n	8010c80 <__exponent+0x68>
 8010c2c:	f10d 0307 	add.w	r3, sp, #7
 8010c30:	461d      	mov	r5, r3
 8010c32:	270a      	movs	r7, #10
 8010c34:	461a      	mov	r2, r3
 8010c36:	fbb1 f6f7 	udiv	r6, r1, r7
 8010c3a:	fb07 1416 	mls	r4, r7, r6, r1
 8010c3e:	3430      	adds	r4, #48	@ 0x30
 8010c40:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010c44:	460c      	mov	r4, r1
 8010c46:	2c63      	cmp	r4, #99	@ 0x63
 8010c48:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010c4c:	4631      	mov	r1, r6
 8010c4e:	dcf1      	bgt.n	8010c34 <__exponent+0x1c>
 8010c50:	3130      	adds	r1, #48	@ 0x30
 8010c52:	1e94      	subs	r4, r2, #2
 8010c54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010c58:	1c41      	adds	r1, r0, #1
 8010c5a:	4623      	mov	r3, r4
 8010c5c:	42ab      	cmp	r3, r5
 8010c5e:	d30a      	bcc.n	8010c76 <__exponent+0x5e>
 8010c60:	f10d 0309 	add.w	r3, sp, #9
 8010c64:	1a9b      	subs	r3, r3, r2
 8010c66:	42ac      	cmp	r4, r5
 8010c68:	bf88      	it	hi
 8010c6a:	2300      	movhi	r3, #0
 8010c6c:	3302      	adds	r3, #2
 8010c6e:	4403      	add	r3, r0
 8010c70:	1a18      	subs	r0, r3, r0
 8010c72:	b003      	add	sp, #12
 8010c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c76:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010c7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010c7e:	e7ed      	b.n	8010c5c <__exponent+0x44>
 8010c80:	2330      	movs	r3, #48	@ 0x30
 8010c82:	3130      	adds	r1, #48	@ 0x30
 8010c84:	7083      	strb	r3, [r0, #2]
 8010c86:	70c1      	strb	r1, [r0, #3]
 8010c88:	1d03      	adds	r3, r0, #4
 8010c8a:	e7f1      	b.n	8010c70 <__exponent+0x58>
 8010c8c:	0000      	movs	r0, r0
	...

08010c90 <_printf_float>:
 8010c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	b08d      	sub	sp, #52	@ 0x34
 8010c96:	460c      	mov	r4, r1
 8010c98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010c9c:	4616      	mov	r6, r2
 8010c9e:	461f      	mov	r7, r3
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	f001 f8b7 	bl	8011e14 <_localeconv_r>
 8010ca6:	f8d0 b000 	ldr.w	fp, [r0]
 8010caa:	4658      	mov	r0, fp
 8010cac:	f7ef fb68 	bl	8000380 <strlen>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8010cb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010cbc:	6822      	ldr	r2, [r4, #0]
 8010cbe:	9005      	str	r0, [sp, #20]
 8010cc0:	3307      	adds	r3, #7
 8010cc2:	f023 0307 	bic.w	r3, r3, #7
 8010cc6:	f103 0108 	add.w	r1, r3, #8
 8010cca:	f8c8 1000 	str.w	r1, [r8]
 8010cce:	ed93 0b00 	vldr	d0, [r3]
 8010cd2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010f30 <_printf_float+0x2a0>
 8010cd6:	eeb0 7bc0 	vabs.f64	d7, d0
 8010cda:	eeb4 7b46 	vcmp.f64	d7, d6
 8010cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010ce6:	dd24      	ble.n	8010d32 <_printf_float+0xa2>
 8010ce8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf0:	d502      	bpl.n	8010cf8 <_printf_float+0x68>
 8010cf2:	232d      	movs	r3, #45	@ 0x2d
 8010cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cf8:	498f      	ldr	r1, [pc, #572]	@ (8010f38 <_printf_float+0x2a8>)
 8010cfa:	4b90      	ldr	r3, [pc, #576]	@ (8010f3c <_printf_float+0x2ac>)
 8010cfc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010d00:	bf8c      	ite	hi
 8010d02:	4688      	movhi	r8, r1
 8010d04:	4698      	movls	r8, r3
 8010d06:	f022 0204 	bic.w	r2, r2, #4
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	6123      	str	r3, [r4, #16]
 8010d0e:	6022      	str	r2, [r4, #0]
 8010d10:	f04f 0a00 	mov.w	sl, #0
 8010d14:	9700      	str	r7, [sp, #0]
 8010d16:	4633      	mov	r3, r6
 8010d18:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f000 f9d1 	bl	80110c4 <_printf_common>
 8010d22:	3001      	adds	r0, #1
 8010d24:	f040 8089 	bne.w	8010e3a <_printf_float+0x1aa>
 8010d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d2c:	b00d      	add	sp, #52	@ 0x34
 8010d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d32:	eeb4 0b40 	vcmp.f64	d0, d0
 8010d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3a:	d709      	bvc.n	8010d50 <_printf_float+0xc0>
 8010d3c:	ee10 3a90 	vmov	r3, s1
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	bfbc      	itt	lt
 8010d44:	232d      	movlt	r3, #45	@ 0x2d
 8010d46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010d4a:	497d      	ldr	r1, [pc, #500]	@ (8010f40 <_printf_float+0x2b0>)
 8010d4c:	4b7d      	ldr	r3, [pc, #500]	@ (8010f44 <_printf_float+0x2b4>)
 8010d4e:	e7d5      	b.n	8010cfc <_printf_float+0x6c>
 8010d50:	6863      	ldr	r3, [r4, #4]
 8010d52:	1c59      	adds	r1, r3, #1
 8010d54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010d58:	d139      	bne.n	8010dce <_printf_float+0x13e>
 8010d5a:	2306      	movs	r3, #6
 8010d5c:	6063      	str	r3, [r4, #4]
 8010d5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010d62:	2300      	movs	r3, #0
 8010d64:	6022      	str	r2, [r4, #0]
 8010d66:	9303      	str	r3, [sp, #12]
 8010d68:	ab0a      	add	r3, sp, #40	@ 0x28
 8010d6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010d6e:	ab09      	add	r3, sp, #36	@ 0x24
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	6861      	ldr	r1, [r4, #4]
 8010d74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f7ff fef9 	bl	8010b70 <__cvt>
 8010d7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010d82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d84:	4680      	mov	r8, r0
 8010d86:	d129      	bne.n	8010ddc <_printf_float+0x14c>
 8010d88:	1cc8      	adds	r0, r1, #3
 8010d8a:	db02      	blt.n	8010d92 <_printf_float+0x102>
 8010d8c:	6863      	ldr	r3, [r4, #4]
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	dd41      	ble.n	8010e16 <_printf_float+0x186>
 8010d92:	f1a9 0902 	sub.w	r9, r9, #2
 8010d96:	fa5f f989 	uxtb.w	r9, r9
 8010d9a:	3901      	subs	r1, #1
 8010d9c:	464a      	mov	r2, r9
 8010d9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010da2:	9109      	str	r1, [sp, #36]	@ 0x24
 8010da4:	f7ff ff38 	bl	8010c18 <__exponent>
 8010da8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010daa:	1813      	adds	r3, r2, r0
 8010dac:	2a01      	cmp	r2, #1
 8010dae:	4682      	mov	sl, r0
 8010db0:	6123      	str	r3, [r4, #16]
 8010db2:	dc02      	bgt.n	8010dba <_printf_float+0x12a>
 8010db4:	6822      	ldr	r2, [r4, #0]
 8010db6:	07d2      	lsls	r2, r2, #31
 8010db8:	d501      	bpl.n	8010dbe <_printf_float+0x12e>
 8010dba:	3301      	adds	r3, #1
 8010dbc:	6123      	str	r3, [r4, #16]
 8010dbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d0a6      	beq.n	8010d14 <_printf_float+0x84>
 8010dc6:	232d      	movs	r3, #45	@ 0x2d
 8010dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dcc:	e7a2      	b.n	8010d14 <_printf_float+0x84>
 8010dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010dd2:	d1c4      	bne.n	8010d5e <_printf_float+0xce>
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1c2      	bne.n	8010d5e <_printf_float+0xce>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e7bf      	b.n	8010d5c <_printf_float+0xcc>
 8010ddc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010de0:	d9db      	bls.n	8010d9a <_printf_float+0x10a>
 8010de2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010de6:	d118      	bne.n	8010e1a <_printf_float+0x18a>
 8010de8:	2900      	cmp	r1, #0
 8010dea:	6863      	ldr	r3, [r4, #4]
 8010dec:	dd0b      	ble.n	8010e06 <_printf_float+0x176>
 8010dee:	6121      	str	r1, [r4, #16]
 8010df0:	b913      	cbnz	r3, 8010df8 <_printf_float+0x168>
 8010df2:	6822      	ldr	r2, [r4, #0]
 8010df4:	07d0      	lsls	r0, r2, #31
 8010df6:	d502      	bpl.n	8010dfe <_printf_float+0x16e>
 8010df8:	3301      	adds	r3, #1
 8010dfa:	440b      	add	r3, r1
 8010dfc:	6123      	str	r3, [r4, #16]
 8010dfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010e00:	f04f 0a00 	mov.w	sl, #0
 8010e04:	e7db      	b.n	8010dbe <_printf_float+0x12e>
 8010e06:	b913      	cbnz	r3, 8010e0e <_printf_float+0x17e>
 8010e08:	6822      	ldr	r2, [r4, #0]
 8010e0a:	07d2      	lsls	r2, r2, #31
 8010e0c:	d501      	bpl.n	8010e12 <_printf_float+0x182>
 8010e0e:	3302      	adds	r3, #2
 8010e10:	e7f4      	b.n	8010dfc <_printf_float+0x16c>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e7f2      	b.n	8010dfc <_printf_float+0x16c>
 8010e16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8010e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e1c:	4299      	cmp	r1, r3
 8010e1e:	db05      	blt.n	8010e2c <_printf_float+0x19c>
 8010e20:	6823      	ldr	r3, [r4, #0]
 8010e22:	6121      	str	r1, [r4, #16]
 8010e24:	07d8      	lsls	r0, r3, #31
 8010e26:	d5ea      	bpl.n	8010dfe <_printf_float+0x16e>
 8010e28:	1c4b      	adds	r3, r1, #1
 8010e2a:	e7e7      	b.n	8010dfc <_printf_float+0x16c>
 8010e2c:	2900      	cmp	r1, #0
 8010e2e:	bfd4      	ite	le
 8010e30:	f1c1 0202 	rsble	r2, r1, #2
 8010e34:	2201      	movgt	r2, #1
 8010e36:	4413      	add	r3, r2
 8010e38:	e7e0      	b.n	8010dfc <_printf_float+0x16c>
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	055a      	lsls	r2, r3, #21
 8010e3e:	d407      	bmi.n	8010e50 <_printf_float+0x1c0>
 8010e40:	6923      	ldr	r3, [r4, #16]
 8010e42:	4642      	mov	r2, r8
 8010e44:	4631      	mov	r1, r6
 8010e46:	4628      	mov	r0, r5
 8010e48:	47b8      	blx	r7
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	d12a      	bne.n	8010ea4 <_printf_float+0x214>
 8010e4e:	e76b      	b.n	8010d28 <_printf_float+0x98>
 8010e50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010e54:	f240 80e0 	bls.w	8011018 <_printf_float+0x388>
 8010e58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010e5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	d133      	bne.n	8010ece <_printf_float+0x23e>
 8010e66:	4a38      	ldr	r2, [pc, #224]	@ (8010f48 <_printf_float+0x2b8>)
 8010e68:	2301      	movs	r3, #1
 8010e6a:	4631      	mov	r1, r6
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	47b8      	blx	r7
 8010e70:	3001      	adds	r0, #1
 8010e72:	f43f af59 	beq.w	8010d28 <_printf_float+0x98>
 8010e76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010e7a:	4543      	cmp	r3, r8
 8010e7c:	db02      	blt.n	8010e84 <_printf_float+0x1f4>
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	07d8      	lsls	r0, r3, #31
 8010e82:	d50f      	bpl.n	8010ea4 <_printf_float+0x214>
 8010e84:	9b05      	ldr	r3, [sp, #20]
 8010e86:	465a      	mov	r2, fp
 8010e88:	4631      	mov	r1, r6
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	47b8      	blx	r7
 8010e8e:	3001      	adds	r0, #1
 8010e90:	f43f af4a 	beq.w	8010d28 <_printf_float+0x98>
 8010e94:	f04f 0900 	mov.w	r9, #0
 8010e98:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010e9c:	f104 0a1a 	add.w	sl, r4, #26
 8010ea0:	45c8      	cmp	r8, r9
 8010ea2:	dc09      	bgt.n	8010eb8 <_printf_float+0x228>
 8010ea4:	6823      	ldr	r3, [r4, #0]
 8010ea6:	079b      	lsls	r3, r3, #30
 8010ea8:	f100 8107 	bmi.w	80110ba <_printf_float+0x42a>
 8010eac:	68e0      	ldr	r0, [r4, #12]
 8010eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010eb0:	4298      	cmp	r0, r3
 8010eb2:	bfb8      	it	lt
 8010eb4:	4618      	movlt	r0, r3
 8010eb6:	e739      	b.n	8010d2c <_printf_float+0x9c>
 8010eb8:	2301      	movs	r3, #1
 8010eba:	4652      	mov	r2, sl
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	47b8      	blx	r7
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	f43f af30 	beq.w	8010d28 <_printf_float+0x98>
 8010ec8:	f109 0901 	add.w	r9, r9, #1
 8010ecc:	e7e8      	b.n	8010ea0 <_printf_float+0x210>
 8010ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	dc3b      	bgt.n	8010f4c <_printf_float+0x2bc>
 8010ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8010f48 <_printf_float+0x2b8>)
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	47b8      	blx	r7
 8010ede:	3001      	adds	r0, #1
 8010ee0:	f43f af22 	beq.w	8010d28 <_printf_float+0x98>
 8010ee4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010ee8:	ea59 0303 	orrs.w	r3, r9, r3
 8010eec:	d102      	bne.n	8010ef4 <_printf_float+0x264>
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	07d9      	lsls	r1, r3, #31
 8010ef2:	d5d7      	bpl.n	8010ea4 <_printf_float+0x214>
 8010ef4:	9b05      	ldr	r3, [sp, #20]
 8010ef6:	465a      	mov	r2, fp
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	f43f af12 	beq.w	8010d28 <_printf_float+0x98>
 8010f04:	f04f 0a00 	mov.w	sl, #0
 8010f08:	f104 0b1a 	add.w	fp, r4, #26
 8010f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f0e:	425b      	negs	r3, r3
 8010f10:	4553      	cmp	r3, sl
 8010f12:	dc01      	bgt.n	8010f18 <_printf_float+0x288>
 8010f14:	464b      	mov	r3, r9
 8010f16:	e794      	b.n	8010e42 <_printf_float+0x1b2>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	465a      	mov	r2, fp
 8010f1c:	4631      	mov	r1, r6
 8010f1e:	4628      	mov	r0, r5
 8010f20:	47b8      	blx	r7
 8010f22:	3001      	adds	r0, #1
 8010f24:	f43f af00 	beq.w	8010d28 <_printf_float+0x98>
 8010f28:	f10a 0a01 	add.w	sl, sl, #1
 8010f2c:	e7ee      	b.n	8010f0c <_printf_float+0x27c>
 8010f2e:	bf00      	nop
 8010f30:	ffffffff 	.word	0xffffffff
 8010f34:	7fefffff 	.word	0x7fefffff
 8010f38:	08017170 	.word	0x08017170
 8010f3c:	0801716c 	.word	0x0801716c
 8010f40:	08017178 	.word	0x08017178
 8010f44:	08017174 	.word	0x08017174
 8010f48:	080172b2 	.word	0x080172b2
 8010f4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010f4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010f52:	4553      	cmp	r3, sl
 8010f54:	bfa8      	it	ge
 8010f56:	4653      	movge	r3, sl
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	4699      	mov	r9, r3
 8010f5c:	dc37      	bgt.n	8010fce <_printf_float+0x33e>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	9307      	str	r3, [sp, #28]
 8010f62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f66:	f104 021a 	add.w	r2, r4, #26
 8010f6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010f6c:	9907      	ldr	r1, [sp, #28]
 8010f6e:	9306      	str	r3, [sp, #24]
 8010f70:	eba3 0309 	sub.w	r3, r3, r9
 8010f74:	428b      	cmp	r3, r1
 8010f76:	dc31      	bgt.n	8010fdc <_printf_float+0x34c>
 8010f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f7a:	459a      	cmp	sl, r3
 8010f7c:	dc3b      	bgt.n	8010ff6 <_printf_float+0x366>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	07da      	lsls	r2, r3, #31
 8010f82:	d438      	bmi.n	8010ff6 <_printf_float+0x366>
 8010f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f86:	ebaa 0903 	sub.w	r9, sl, r3
 8010f8a:	9b06      	ldr	r3, [sp, #24]
 8010f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8010f90:	4599      	cmp	r9, r3
 8010f92:	bfa8      	it	ge
 8010f94:	4699      	movge	r9, r3
 8010f96:	f1b9 0f00 	cmp.w	r9, #0
 8010f9a:	dc34      	bgt.n	8011006 <_printf_float+0x376>
 8010f9c:	f04f 0800 	mov.w	r8, #0
 8010fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010fa4:	f104 0b1a 	add.w	fp, r4, #26
 8010fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010faa:	ebaa 0303 	sub.w	r3, sl, r3
 8010fae:	eba3 0309 	sub.w	r3, r3, r9
 8010fb2:	4543      	cmp	r3, r8
 8010fb4:	f77f af76 	ble.w	8010ea4 <_printf_float+0x214>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	465a      	mov	r2, fp
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	47b8      	blx	r7
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	f43f aeb0 	beq.w	8010d28 <_printf_float+0x98>
 8010fc8:	f108 0801 	add.w	r8, r8, #1
 8010fcc:	e7ec      	b.n	8010fa8 <_printf_float+0x318>
 8010fce:	4642      	mov	r2, r8
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	47b8      	blx	r7
 8010fd6:	3001      	adds	r0, #1
 8010fd8:	d1c1      	bne.n	8010f5e <_printf_float+0x2ce>
 8010fda:	e6a5      	b.n	8010d28 <_printf_float+0x98>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	4631      	mov	r1, r6
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	9206      	str	r2, [sp, #24]
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	f43f ae9e 	beq.w	8010d28 <_printf_float+0x98>
 8010fec:	9b07      	ldr	r3, [sp, #28]
 8010fee:	9a06      	ldr	r2, [sp, #24]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	9307      	str	r3, [sp, #28]
 8010ff4:	e7b9      	b.n	8010f6a <_printf_float+0x2da>
 8010ff6:	9b05      	ldr	r3, [sp, #20]
 8010ff8:	465a      	mov	r2, fp
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	47b8      	blx	r7
 8011000:	3001      	adds	r0, #1
 8011002:	d1bf      	bne.n	8010f84 <_printf_float+0x2f4>
 8011004:	e690      	b.n	8010d28 <_printf_float+0x98>
 8011006:	9a06      	ldr	r2, [sp, #24]
 8011008:	464b      	mov	r3, r9
 801100a:	4442      	add	r2, r8
 801100c:	4631      	mov	r1, r6
 801100e:	4628      	mov	r0, r5
 8011010:	47b8      	blx	r7
 8011012:	3001      	adds	r0, #1
 8011014:	d1c2      	bne.n	8010f9c <_printf_float+0x30c>
 8011016:	e687      	b.n	8010d28 <_printf_float+0x98>
 8011018:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801101c:	f1b9 0f01 	cmp.w	r9, #1
 8011020:	dc01      	bgt.n	8011026 <_printf_float+0x396>
 8011022:	07db      	lsls	r3, r3, #31
 8011024:	d536      	bpl.n	8011094 <_printf_float+0x404>
 8011026:	2301      	movs	r3, #1
 8011028:	4642      	mov	r2, r8
 801102a:	4631      	mov	r1, r6
 801102c:	4628      	mov	r0, r5
 801102e:	47b8      	blx	r7
 8011030:	3001      	adds	r0, #1
 8011032:	f43f ae79 	beq.w	8010d28 <_printf_float+0x98>
 8011036:	9b05      	ldr	r3, [sp, #20]
 8011038:	465a      	mov	r2, fp
 801103a:	4631      	mov	r1, r6
 801103c:	4628      	mov	r0, r5
 801103e:	47b8      	blx	r7
 8011040:	3001      	adds	r0, #1
 8011042:	f43f ae71 	beq.w	8010d28 <_printf_float+0x98>
 8011046:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801104a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011052:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011056:	d018      	beq.n	801108a <_printf_float+0x3fa>
 8011058:	464b      	mov	r3, r9
 801105a:	f108 0201 	add.w	r2, r8, #1
 801105e:	4631      	mov	r1, r6
 8011060:	4628      	mov	r0, r5
 8011062:	47b8      	blx	r7
 8011064:	3001      	adds	r0, #1
 8011066:	d10c      	bne.n	8011082 <_printf_float+0x3f2>
 8011068:	e65e      	b.n	8010d28 <_printf_float+0x98>
 801106a:	2301      	movs	r3, #1
 801106c:	465a      	mov	r2, fp
 801106e:	4631      	mov	r1, r6
 8011070:	4628      	mov	r0, r5
 8011072:	47b8      	blx	r7
 8011074:	3001      	adds	r0, #1
 8011076:	f43f ae57 	beq.w	8010d28 <_printf_float+0x98>
 801107a:	f108 0801 	add.w	r8, r8, #1
 801107e:	45c8      	cmp	r8, r9
 8011080:	dbf3      	blt.n	801106a <_printf_float+0x3da>
 8011082:	4653      	mov	r3, sl
 8011084:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011088:	e6dc      	b.n	8010e44 <_printf_float+0x1b4>
 801108a:	f04f 0800 	mov.w	r8, #0
 801108e:	f104 0b1a 	add.w	fp, r4, #26
 8011092:	e7f4      	b.n	801107e <_printf_float+0x3ee>
 8011094:	2301      	movs	r3, #1
 8011096:	4642      	mov	r2, r8
 8011098:	e7e1      	b.n	801105e <_printf_float+0x3ce>
 801109a:	2301      	movs	r3, #1
 801109c:	464a      	mov	r2, r9
 801109e:	4631      	mov	r1, r6
 80110a0:	4628      	mov	r0, r5
 80110a2:	47b8      	blx	r7
 80110a4:	3001      	adds	r0, #1
 80110a6:	f43f ae3f 	beq.w	8010d28 <_printf_float+0x98>
 80110aa:	f108 0801 	add.w	r8, r8, #1
 80110ae:	68e3      	ldr	r3, [r4, #12]
 80110b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80110b2:	1a5b      	subs	r3, r3, r1
 80110b4:	4543      	cmp	r3, r8
 80110b6:	dcf0      	bgt.n	801109a <_printf_float+0x40a>
 80110b8:	e6f8      	b.n	8010eac <_printf_float+0x21c>
 80110ba:	f04f 0800 	mov.w	r8, #0
 80110be:	f104 0919 	add.w	r9, r4, #25
 80110c2:	e7f4      	b.n	80110ae <_printf_float+0x41e>

080110c4 <_printf_common>:
 80110c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c8:	4616      	mov	r6, r2
 80110ca:	4698      	mov	r8, r3
 80110cc:	688a      	ldr	r2, [r1, #8]
 80110ce:	690b      	ldr	r3, [r1, #16]
 80110d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110d4:	4293      	cmp	r3, r2
 80110d6:	bfb8      	it	lt
 80110d8:	4613      	movlt	r3, r2
 80110da:	6033      	str	r3, [r6, #0]
 80110dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80110e0:	4607      	mov	r7, r0
 80110e2:	460c      	mov	r4, r1
 80110e4:	b10a      	cbz	r2, 80110ea <_printf_common+0x26>
 80110e6:	3301      	adds	r3, #1
 80110e8:	6033      	str	r3, [r6, #0]
 80110ea:	6823      	ldr	r3, [r4, #0]
 80110ec:	0699      	lsls	r1, r3, #26
 80110ee:	bf42      	ittt	mi
 80110f0:	6833      	ldrmi	r3, [r6, #0]
 80110f2:	3302      	addmi	r3, #2
 80110f4:	6033      	strmi	r3, [r6, #0]
 80110f6:	6825      	ldr	r5, [r4, #0]
 80110f8:	f015 0506 	ands.w	r5, r5, #6
 80110fc:	d106      	bne.n	801110c <_printf_common+0x48>
 80110fe:	f104 0a19 	add.w	sl, r4, #25
 8011102:	68e3      	ldr	r3, [r4, #12]
 8011104:	6832      	ldr	r2, [r6, #0]
 8011106:	1a9b      	subs	r3, r3, r2
 8011108:	42ab      	cmp	r3, r5
 801110a:	dc26      	bgt.n	801115a <_printf_common+0x96>
 801110c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011110:	6822      	ldr	r2, [r4, #0]
 8011112:	3b00      	subs	r3, #0
 8011114:	bf18      	it	ne
 8011116:	2301      	movne	r3, #1
 8011118:	0692      	lsls	r2, r2, #26
 801111a:	d42b      	bmi.n	8011174 <_printf_common+0xb0>
 801111c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011120:	4641      	mov	r1, r8
 8011122:	4638      	mov	r0, r7
 8011124:	47c8      	blx	r9
 8011126:	3001      	adds	r0, #1
 8011128:	d01e      	beq.n	8011168 <_printf_common+0xa4>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	6922      	ldr	r2, [r4, #16]
 801112e:	f003 0306 	and.w	r3, r3, #6
 8011132:	2b04      	cmp	r3, #4
 8011134:	bf02      	ittt	eq
 8011136:	68e5      	ldreq	r5, [r4, #12]
 8011138:	6833      	ldreq	r3, [r6, #0]
 801113a:	1aed      	subeq	r5, r5, r3
 801113c:	68a3      	ldr	r3, [r4, #8]
 801113e:	bf0c      	ite	eq
 8011140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011144:	2500      	movne	r5, #0
 8011146:	4293      	cmp	r3, r2
 8011148:	bfc4      	itt	gt
 801114a:	1a9b      	subgt	r3, r3, r2
 801114c:	18ed      	addgt	r5, r5, r3
 801114e:	2600      	movs	r6, #0
 8011150:	341a      	adds	r4, #26
 8011152:	42b5      	cmp	r5, r6
 8011154:	d11a      	bne.n	801118c <_printf_common+0xc8>
 8011156:	2000      	movs	r0, #0
 8011158:	e008      	b.n	801116c <_printf_common+0xa8>
 801115a:	2301      	movs	r3, #1
 801115c:	4652      	mov	r2, sl
 801115e:	4641      	mov	r1, r8
 8011160:	4638      	mov	r0, r7
 8011162:	47c8      	blx	r9
 8011164:	3001      	adds	r0, #1
 8011166:	d103      	bne.n	8011170 <_printf_common+0xac>
 8011168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801116c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011170:	3501      	adds	r5, #1
 8011172:	e7c6      	b.n	8011102 <_printf_common+0x3e>
 8011174:	18e1      	adds	r1, r4, r3
 8011176:	1c5a      	adds	r2, r3, #1
 8011178:	2030      	movs	r0, #48	@ 0x30
 801117a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801117e:	4422      	add	r2, r4
 8011180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011188:	3302      	adds	r3, #2
 801118a:	e7c7      	b.n	801111c <_printf_common+0x58>
 801118c:	2301      	movs	r3, #1
 801118e:	4622      	mov	r2, r4
 8011190:	4641      	mov	r1, r8
 8011192:	4638      	mov	r0, r7
 8011194:	47c8      	blx	r9
 8011196:	3001      	adds	r0, #1
 8011198:	d0e6      	beq.n	8011168 <_printf_common+0xa4>
 801119a:	3601      	adds	r6, #1
 801119c:	e7d9      	b.n	8011152 <_printf_common+0x8e>
	...

080111a0 <_printf_i>:
 80111a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111a4:	7e0f      	ldrb	r7, [r1, #24]
 80111a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80111a8:	2f78      	cmp	r7, #120	@ 0x78
 80111aa:	4691      	mov	r9, r2
 80111ac:	4680      	mov	r8, r0
 80111ae:	460c      	mov	r4, r1
 80111b0:	469a      	mov	sl, r3
 80111b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80111b6:	d807      	bhi.n	80111c8 <_printf_i+0x28>
 80111b8:	2f62      	cmp	r7, #98	@ 0x62
 80111ba:	d80a      	bhi.n	80111d2 <_printf_i+0x32>
 80111bc:	2f00      	cmp	r7, #0
 80111be:	f000 80d1 	beq.w	8011364 <_printf_i+0x1c4>
 80111c2:	2f58      	cmp	r7, #88	@ 0x58
 80111c4:	f000 80b8 	beq.w	8011338 <_printf_i+0x198>
 80111c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80111d0:	e03a      	b.n	8011248 <_printf_i+0xa8>
 80111d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80111d6:	2b15      	cmp	r3, #21
 80111d8:	d8f6      	bhi.n	80111c8 <_printf_i+0x28>
 80111da:	a101      	add	r1, pc, #4	@ (adr r1, 80111e0 <_printf_i+0x40>)
 80111dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111e0:	08011239 	.word	0x08011239
 80111e4:	0801124d 	.word	0x0801124d
 80111e8:	080111c9 	.word	0x080111c9
 80111ec:	080111c9 	.word	0x080111c9
 80111f0:	080111c9 	.word	0x080111c9
 80111f4:	080111c9 	.word	0x080111c9
 80111f8:	0801124d 	.word	0x0801124d
 80111fc:	080111c9 	.word	0x080111c9
 8011200:	080111c9 	.word	0x080111c9
 8011204:	080111c9 	.word	0x080111c9
 8011208:	080111c9 	.word	0x080111c9
 801120c:	0801134b 	.word	0x0801134b
 8011210:	08011277 	.word	0x08011277
 8011214:	08011305 	.word	0x08011305
 8011218:	080111c9 	.word	0x080111c9
 801121c:	080111c9 	.word	0x080111c9
 8011220:	0801136d 	.word	0x0801136d
 8011224:	080111c9 	.word	0x080111c9
 8011228:	08011277 	.word	0x08011277
 801122c:	080111c9 	.word	0x080111c9
 8011230:	080111c9 	.word	0x080111c9
 8011234:	0801130d 	.word	0x0801130d
 8011238:	6833      	ldr	r3, [r6, #0]
 801123a:	1d1a      	adds	r2, r3, #4
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	6032      	str	r2, [r6, #0]
 8011240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011248:	2301      	movs	r3, #1
 801124a:	e09c      	b.n	8011386 <_printf_i+0x1e6>
 801124c:	6833      	ldr	r3, [r6, #0]
 801124e:	6820      	ldr	r0, [r4, #0]
 8011250:	1d19      	adds	r1, r3, #4
 8011252:	6031      	str	r1, [r6, #0]
 8011254:	0606      	lsls	r6, r0, #24
 8011256:	d501      	bpl.n	801125c <_printf_i+0xbc>
 8011258:	681d      	ldr	r5, [r3, #0]
 801125a:	e003      	b.n	8011264 <_printf_i+0xc4>
 801125c:	0645      	lsls	r5, r0, #25
 801125e:	d5fb      	bpl.n	8011258 <_printf_i+0xb8>
 8011260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011264:	2d00      	cmp	r5, #0
 8011266:	da03      	bge.n	8011270 <_printf_i+0xd0>
 8011268:	232d      	movs	r3, #45	@ 0x2d
 801126a:	426d      	negs	r5, r5
 801126c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011270:	4858      	ldr	r0, [pc, #352]	@ (80113d4 <_printf_i+0x234>)
 8011272:	230a      	movs	r3, #10
 8011274:	e011      	b.n	801129a <_printf_i+0xfa>
 8011276:	6821      	ldr	r1, [r4, #0]
 8011278:	6833      	ldr	r3, [r6, #0]
 801127a:	0608      	lsls	r0, r1, #24
 801127c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011280:	d402      	bmi.n	8011288 <_printf_i+0xe8>
 8011282:	0649      	lsls	r1, r1, #25
 8011284:	bf48      	it	mi
 8011286:	b2ad      	uxthmi	r5, r5
 8011288:	2f6f      	cmp	r7, #111	@ 0x6f
 801128a:	4852      	ldr	r0, [pc, #328]	@ (80113d4 <_printf_i+0x234>)
 801128c:	6033      	str	r3, [r6, #0]
 801128e:	bf14      	ite	ne
 8011290:	230a      	movne	r3, #10
 8011292:	2308      	moveq	r3, #8
 8011294:	2100      	movs	r1, #0
 8011296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801129a:	6866      	ldr	r6, [r4, #4]
 801129c:	60a6      	str	r6, [r4, #8]
 801129e:	2e00      	cmp	r6, #0
 80112a0:	db05      	blt.n	80112ae <_printf_i+0x10e>
 80112a2:	6821      	ldr	r1, [r4, #0]
 80112a4:	432e      	orrs	r6, r5
 80112a6:	f021 0104 	bic.w	r1, r1, #4
 80112aa:	6021      	str	r1, [r4, #0]
 80112ac:	d04b      	beq.n	8011346 <_printf_i+0x1a6>
 80112ae:	4616      	mov	r6, r2
 80112b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80112b4:	fb03 5711 	mls	r7, r3, r1, r5
 80112b8:	5dc7      	ldrb	r7, [r0, r7]
 80112ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80112be:	462f      	mov	r7, r5
 80112c0:	42bb      	cmp	r3, r7
 80112c2:	460d      	mov	r5, r1
 80112c4:	d9f4      	bls.n	80112b0 <_printf_i+0x110>
 80112c6:	2b08      	cmp	r3, #8
 80112c8:	d10b      	bne.n	80112e2 <_printf_i+0x142>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	07df      	lsls	r7, r3, #31
 80112ce:	d508      	bpl.n	80112e2 <_printf_i+0x142>
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	6861      	ldr	r1, [r4, #4]
 80112d4:	4299      	cmp	r1, r3
 80112d6:	bfde      	ittt	le
 80112d8:	2330      	movle	r3, #48	@ 0x30
 80112da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80112de:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80112e2:	1b92      	subs	r2, r2, r6
 80112e4:	6122      	str	r2, [r4, #16]
 80112e6:	f8cd a000 	str.w	sl, [sp]
 80112ea:	464b      	mov	r3, r9
 80112ec:	aa03      	add	r2, sp, #12
 80112ee:	4621      	mov	r1, r4
 80112f0:	4640      	mov	r0, r8
 80112f2:	f7ff fee7 	bl	80110c4 <_printf_common>
 80112f6:	3001      	adds	r0, #1
 80112f8:	d14a      	bne.n	8011390 <_printf_i+0x1f0>
 80112fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112fe:	b004      	add	sp, #16
 8011300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	f043 0320 	orr.w	r3, r3, #32
 801130a:	6023      	str	r3, [r4, #0]
 801130c:	4832      	ldr	r0, [pc, #200]	@ (80113d8 <_printf_i+0x238>)
 801130e:	2778      	movs	r7, #120	@ 0x78
 8011310:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011314:	6823      	ldr	r3, [r4, #0]
 8011316:	6831      	ldr	r1, [r6, #0]
 8011318:	061f      	lsls	r7, r3, #24
 801131a:	f851 5b04 	ldr.w	r5, [r1], #4
 801131e:	d402      	bmi.n	8011326 <_printf_i+0x186>
 8011320:	065f      	lsls	r7, r3, #25
 8011322:	bf48      	it	mi
 8011324:	b2ad      	uxthmi	r5, r5
 8011326:	6031      	str	r1, [r6, #0]
 8011328:	07d9      	lsls	r1, r3, #31
 801132a:	bf44      	itt	mi
 801132c:	f043 0320 	orrmi.w	r3, r3, #32
 8011330:	6023      	strmi	r3, [r4, #0]
 8011332:	b11d      	cbz	r5, 801133c <_printf_i+0x19c>
 8011334:	2310      	movs	r3, #16
 8011336:	e7ad      	b.n	8011294 <_printf_i+0xf4>
 8011338:	4826      	ldr	r0, [pc, #152]	@ (80113d4 <_printf_i+0x234>)
 801133a:	e7e9      	b.n	8011310 <_printf_i+0x170>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	f023 0320 	bic.w	r3, r3, #32
 8011342:	6023      	str	r3, [r4, #0]
 8011344:	e7f6      	b.n	8011334 <_printf_i+0x194>
 8011346:	4616      	mov	r6, r2
 8011348:	e7bd      	b.n	80112c6 <_printf_i+0x126>
 801134a:	6833      	ldr	r3, [r6, #0]
 801134c:	6825      	ldr	r5, [r4, #0]
 801134e:	6961      	ldr	r1, [r4, #20]
 8011350:	1d18      	adds	r0, r3, #4
 8011352:	6030      	str	r0, [r6, #0]
 8011354:	062e      	lsls	r6, r5, #24
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	d501      	bpl.n	801135e <_printf_i+0x1be>
 801135a:	6019      	str	r1, [r3, #0]
 801135c:	e002      	b.n	8011364 <_printf_i+0x1c4>
 801135e:	0668      	lsls	r0, r5, #25
 8011360:	d5fb      	bpl.n	801135a <_printf_i+0x1ba>
 8011362:	8019      	strh	r1, [r3, #0]
 8011364:	2300      	movs	r3, #0
 8011366:	6123      	str	r3, [r4, #16]
 8011368:	4616      	mov	r6, r2
 801136a:	e7bc      	b.n	80112e6 <_printf_i+0x146>
 801136c:	6833      	ldr	r3, [r6, #0]
 801136e:	1d1a      	adds	r2, r3, #4
 8011370:	6032      	str	r2, [r6, #0]
 8011372:	681e      	ldr	r6, [r3, #0]
 8011374:	6862      	ldr	r2, [r4, #4]
 8011376:	2100      	movs	r1, #0
 8011378:	4630      	mov	r0, r6
 801137a:	f7ee ffb1 	bl	80002e0 <memchr>
 801137e:	b108      	cbz	r0, 8011384 <_printf_i+0x1e4>
 8011380:	1b80      	subs	r0, r0, r6
 8011382:	6060      	str	r0, [r4, #4]
 8011384:	6863      	ldr	r3, [r4, #4]
 8011386:	6123      	str	r3, [r4, #16]
 8011388:	2300      	movs	r3, #0
 801138a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801138e:	e7aa      	b.n	80112e6 <_printf_i+0x146>
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	4632      	mov	r2, r6
 8011394:	4649      	mov	r1, r9
 8011396:	4640      	mov	r0, r8
 8011398:	47d0      	blx	sl
 801139a:	3001      	adds	r0, #1
 801139c:	d0ad      	beq.n	80112fa <_printf_i+0x15a>
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	079b      	lsls	r3, r3, #30
 80113a2:	d413      	bmi.n	80113cc <_printf_i+0x22c>
 80113a4:	68e0      	ldr	r0, [r4, #12]
 80113a6:	9b03      	ldr	r3, [sp, #12]
 80113a8:	4298      	cmp	r0, r3
 80113aa:	bfb8      	it	lt
 80113ac:	4618      	movlt	r0, r3
 80113ae:	e7a6      	b.n	80112fe <_printf_i+0x15e>
 80113b0:	2301      	movs	r3, #1
 80113b2:	4632      	mov	r2, r6
 80113b4:	4649      	mov	r1, r9
 80113b6:	4640      	mov	r0, r8
 80113b8:	47d0      	blx	sl
 80113ba:	3001      	adds	r0, #1
 80113bc:	d09d      	beq.n	80112fa <_printf_i+0x15a>
 80113be:	3501      	adds	r5, #1
 80113c0:	68e3      	ldr	r3, [r4, #12]
 80113c2:	9903      	ldr	r1, [sp, #12]
 80113c4:	1a5b      	subs	r3, r3, r1
 80113c6:	42ab      	cmp	r3, r5
 80113c8:	dcf2      	bgt.n	80113b0 <_printf_i+0x210>
 80113ca:	e7eb      	b.n	80113a4 <_printf_i+0x204>
 80113cc:	2500      	movs	r5, #0
 80113ce:	f104 0619 	add.w	r6, r4, #25
 80113d2:	e7f5      	b.n	80113c0 <_printf_i+0x220>
 80113d4:	0801717c 	.word	0x0801717c
 80113d8:	0801718d 	.word	0x0801718d

080113dc <_scanf_float>:
 80113dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e0:	b087      	sub	sp, #28
 80113e2:	4691      	mov	r9, r2
 80113e4:	9303      	str	r3, [sp, #12]
 80113e6:	688b      	ldr	r3, [r1, #8]
 80113e8:	1e5a      	subs	r2, r3, #1
 80113ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80113ee:	bf81      	itttt	hi
 80113f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80113f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80113f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80113fc:	608b      	strhi	r3, [r1, #8]
 80113fe:	680b      	ldr	r3, [r1, #0]
 8011400:	460a      	mov	r2, r1
 8011402:	f04f 0500 	mov.w	r5, #0
 8011406:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801140a:	f842 3b1c 	str.w	r3, [r2], #28
 801140e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011412:	4680      	mov	r8, r0
 8011414:	460c      	mov	r4, r1
 8011416:	bf98      	it	ls
 8011418:	f04f 0b00 	movls.w	fp, #0
 801141c:	9201      	str	r2, [sp, #4]
 801141e:	4616      	mov	r6, r2
 8011420:	46aa      	mov	sl, r5
 8011422:	462f      	mov	r7, r5
 8011424:	9502      	str	r5, [sp, #8]
 8011426:	68a2      	ldr	r2, [r4, #8]
 8011428:	b15a      	cbz	r2, 8011442 <_scanf_float+0x66>
 801142a:	f8d9 3000 	ldr.w	r3, [r9]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b4e      	cmp	r3, #78	@ 0x4e
 8011432:	d863      	bhi.n	80114fc <_scanf_float+0x120>
 8011434:	2b40      	cmp	r3, #64	@ 0x40
 8011436:	d83b      	bhi.n	80114b0 <_scanf_float+0xd4>
 8011438:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801143c:	b2c8      	uxtb	r0, r1
 801143e:	280e      	cmp	r0, #14
 8011440:	d939      	bls.n	80114b6 <_scanf_float+0xda>
 8011442:	b11f      	cbz	r7, 801144c <_scanf_float+0x70>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801144a:	6023      	str	r3, [r4, #0]
 801144c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011450:	f1ba 0f01 	cmp.w	sl, #1
 8011454:	f200 8114 	bhi.w	8011680 <_scanf_float+0x2a4>
 8011458:	9b01      	ldr	r3, [sp, #4]
 801145a:	429e      	cmp	r6, r3
 801145c:	f200 8105 	bhi.w	801166a <_scanf_float+0x28e>
 8011460:	2001      	movs	r0, #1
 8011462:	b007      	add	sp, #28
 8011464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011468:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801146c:	2a0d      	cmp	r2, #13
 801146e:	d8e8      	bhi.n	8011442 <_scanf_float+0x66>
 8011470:	a101      	add	r1, pc, #4	@ (adr r1, 8011478 <_scanf_float+0x9c>)
 8011472:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011476:	bf00      	nop
 8011478:	080115c1 	.word	0x080115c1
 801147c:	08011443 	.word	0x08011443
 8011480:	08011443 	.word	0x08011443
 8011484:	08011443 	.word	0x08011443
 8011488:	0801161d 	.word	0x0801161d
 801148c:	080115f7 	.word	0x080115f7
 8011490:	08011443 	.word	0x08011443
 8011494:	08011443 	.word	0x08011443
 8011498:	080115cf 	.word	0x080115cf
 801149c:	08011443 	.word	0x08011443
 80114a0:	08011443 	.word	0x08011443
 80114a4:	08011443 	.word	0x08011443
 80114a8:	08011443 	.word	0x08011443
 80114ac:	0801158b 	.word	0x0801158b
 80114b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80114b4:	e7da      	b.n	801146c <_scanf_float+0x90>
 80114b6:	290e      	cmp	r1, #14
 80114b8:	d8c3      	bhi.n	8011442 <_scanf_float+0x66>
 80114ba:	a001      	add	r0, pc, #4	@ (adr r0, 80114c0 <_scanf_float+0xe4>)
 80114bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80114c0:	0801157b 	.word	0x0801157b
 80114c4:	08011443 	.word	0x08011443
 80114c8:	0801157b 	.word	0x0801157b
 80114cc:	0801160b 	.word	0x0801160b
 80114d0:	08011443 	.word	0x08011443
 80114d4:	0801151d 	.word	0x0801151d
 80114d8:	08011561 	.word	0x08011561
 80114dc:	08011561 	.word	0x08011561
 80114e0:	08011561 	.word	0x08011561
 80114e4:	08011561 	.word	0x08011561
 80114e8:	08011561 	.word	0x08011561
 80114ec:	08011561 	.word	0x08011561
 80114f0:	08011561 	.word	0x08011561
 80114f4:	08011561 	.word	0x08011561
 80114f8:	08011561 	.word	0x08011561
 80114fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80114fe:	d809      	bhi.n	8011514 <_scanf_float+0x138>
 8011500:	2b60      	cmp	r3, #96	@ 0x60
 8011502:	d8b1      	bhi.n	8011468 <_scanf_float+0x8c>
 8011504:	2b54      	cmp	r3, #84	@ 0x54
 8011506:	d07b      	beq.n	8011600 <_scanf_float+0x224>
 8011508:	2b59      	cmp	r3, #89	@ 0x59
 801150a:	d19a      	bne.n	8011442 <_scanf_float+0x66>
 801150c:	2d07      	cmp	r5, #7
 801150e:	d198      	bne.n	8011442 <_scanf_float+0x66>
 8011510:	2508      	movs	r5, #8
 8011512:	e02f      	b.n	8011574 <_scanf_float+0x198>
 8011514:	2b74      	cmp	r3, #116	@ 0x74
 8011516:	d073      	beq.n	8011600 <_scanf_float+0x224>
 8011518:	2b79      	cmp	r3, #121	@ 0x79
 801151a:	e7f6      	b.n	801150a <_scanf_float+0x12e>
 801151c:	6821      	ldr	r1, [r4, #0]
 801151e:	05c8      	lsls	r0, r1, #23
 8011520:	d51e      	bpl.n	8011560 <_scanf_float+0x184>
 8011522:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011526:	6021      	str	r1, [r4, #0]
 8011528:	3701      	adds	r7, #1
 801152a:	f1bb 0f00 	cmp.w	fp, #0
 801152e:	d003      	beq.n	8011538 <_scanf_float+0x15c>
 8011530:	3201      	adds	r2, #1
 8011532:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8011536:	60a2      	str	r2, [r4, #8]
 8011538:	68a3      	ldr	r3, [r4, #8]
 801153a:	3b01      	subs	r3, #1
 801153c:	60a3      	str	r3, [r4, #8]
 801153e:	6923      	ldr	r3, [r4, #16]
 8011540:	3301      	adds	r3, #1
 8011542:	6123      	str	r3, [r4, #16]
 8011544:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011548:	3b01      	subs	r3, #1
 801154a:	2b00      	cmp	r3, #0
 801154c:	f8c9 3004 	str.w	r3, [r9, #4]
 8011550:	f340 8082 	ble.w	8011658 <_scanf_float+0x27c>
 8011554:	f8d9 3000 	ldr.w	r3, [r9]
 8011558:	3301      	adds	r3, #1
 801155a:	f8c9 3000 	str.w	r3, [r9]
 801155e:	e762      	b.n	8011426 <_scanf_float+0x4a>
 8011560:	eb1a 0105 	adds.w	r1, sl, r5
 8011564:	f47f af6d 	bne.w	8011442 <_scanf_float+0x66>
 8011568:	6822      	ldr	r2, [r4, #0]
 801156a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801156e:	6022      	str	r2, [r4, #0]
 8011570:	460d      	mov	r5, r1
 8011572:	468a      	mov	sl, r1
 8011574:	f806 3b01 	strb.w	r3, [r6], #1
 8011578:	e7de      	b.n	8011538 <_scanf_float+0x15c>
 801157a:	6822      	ldr	r2, [r4, #0]
 801157c:	0610      	lsls	r0, r2, #24
 801157e:	f57f af60 	bpl.w	8011442 <_scanf_float+0x66>
 8011582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011586:	6022      	str	r2, [r4, #0]
 8011588:	e7f4      	b.n	8011574 <_scanf_float+0x198>
 801158a:	f1ba 0f00 	cmp.w	sl, #0
 801158e:	d10c      	bne.n	80115aa <_scanf_float+0x1ce>
 8011590:	b977      	cbnz	r7, 80115b0 <_scanf_float+0x1d4>
 8011592:	6822      	ldr	r2, [r4, #0]
 8011594:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011598:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801159c:	d108      	bne.n	80115b0 <_scanf_float+0x1d4>
 801159e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80115a2:	6022      	str	r2, [r4, #0]
 80115a4:	f04f 0a01 	mov.w	sl, #1
 80115a8:	e7e4      	b.n	8011574 <_scanf_float+0x198>
 80115aa:	f1ba 0f02 	cmp.w	sl, #2
 80115ae:	d050      	beq.n	8011652 <_scanf_float+0x276>
 80115b0:	2d01      	cmp	r5, #1
 80115b2:	d002      	beq.n	80115ba <_scanf_float+0x1de>
 80115b4:	2d04      	cmp	r5, #4
 80115b6:	f47f af44 	bne.w	8011442 <_scanf_float+0x66>
 80115ba:	3501      	adds	r5, #1
 80115bc:	b2ed      	uxtb	r5, r5
 80115be:	e7d9      	b.n	8011574 <_scanf_float+0x198>
 80115c0:	f1ba 0f01 	cmp.w	sl, #1
 80115c4:	f47f af3d 	bne.w	8011442 <_scanf_float+0x66>
 80115c8:	f04f 0a02 	mov.w	sl, #2
 80115cc:	e7d2      	b.n	8011574 <_scanf_float+0x198>
 80115ce:	b975      	cbnz	r5, 80115ee <_scanf_float+0x212>
 80115d0:	2f00      	cmp	r7, #0
 80115d2:	f47f af37 	bne.w	8011444 <_scanf_float+0x68>
 80115d6:	6822      	ldr	r2, [r4, #0]
 80115d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80115dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80115e0:	f040 80fc 	bne.w	80117dc <_scanf_float+0x400>
 80115e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80115e8:	6022      	str	r2, [r4, #0]
 80115ea:	2501      	movs	r5, #1
 80115ec:	e7c2      	b.n	8011574 <_scanf_float+0x198>
 80115ee:	2d03      	cmp	r5, #3
 80115f0:	d0e3      	beq.n	80115ba <_scanf_float+0x1de>
 80115f2:	2d05      	cmp	r5, #5
 80115f4:	e7df      	b.n	80115b6 <_scanf_float+0x1da>
 80115f6:	2d02      	cmp	r5, #2
 80115f8:	f47f af23 	bne.w	8011442 <_scanf_float+0x66>
 80115fc:	2503      	movs	r5, #3
 80115fe:	e7b9      	b.n	8011574 <_scanf_float+0x198>
 8011600:	2d06      	cmp	r5, #6
 8011602:	f47f af1e 	bne.w	8011442 <_scanf_float+0x66>
 8011606:	2507      	movs	r5, #7
 8011608:	e7b4      	b.n	8011574 <_scanf_float+0x198>
 801160a:	6822      	ldr	r2, [r4, #0]
 801160c:	0591      	lsls	r1, r2, #22
 801160e:	f57f af18 	bpl.w	8011442 <_scanf_float+0x66>
 8011612:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011616:	6022      	str	r2, [r4, #0]
 8011618:	9702      	str	r7, [sp, #8]
 801161a:	e7ab      	b.n	8011574 <_scanf_float+0x198>
 801161c:	6822      	ldr	r2, [r4, #0]
 801161e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011622:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011626:	d005      	beq.n	8011634 <_scanf_float+0x258>
 8011628:	0550      	lsls	r0, r2, #21
 801162a:	f57f af0a 	bpl.w	8011442 <_scanf_float+0x66>
 801162e:	2f00      	cmp	r7, #0
 8011630:	f000 80d4 	beq.w	80117dc <_scanf_float+0x400>
 8011634:	0591      	lsls	r1, r2, #22
 8011636:	bf58      	it	pl
 8011638:	9902      	ldrpl	r1, [sp, #8]
 801163a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801163e:	bf58      	it	pl
 8011640:	1a79      	subpl	r1, r7, r1
 8011642:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011646:	bf58      	it	pl
 8011648:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801164c:	6022      	str	r2, [r4, #0]
 801164e:	2700      	movs	r7, #0
 8011650:	e790      	b.n	8011574 <_scanf_float+0x198>
 8011652:	f04f 0a03 	mov.w	sl, #3
 8011656:	e78d      	b.n	8011574 <_scanf_float+0x198>
 8011658:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801165c:	4649      	mov	r1, r9
 801165e:	4640      	mov	r0, r8
 8011660:	4798      	blx	r3
 8011662:	2800      	cmp	r0, #0
 8011664:	f43f aedf 	beq.w	8011426 <_scanf_float+0x4a>
 8011668:	e6eb      	b.n	8011442 <_scanf_float+0x66>
 801166a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801166e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011672:	464a      	mov	r2, r9
 8011674:	4640      	mov	r0, r8
 8011676:	4798      	blx	r3
 8011678:	6923      	ldr	r3, [r4, #16]
 801167a:	3b01      	subs	r3, #1
 801167c:	6123      	str	r3, [r4, #16]
 801167e:	e6eb      	b.n	8011458 <_scanf_float+0x7c>
 8011680:	1e6b      	subs	r3, r5, #1
 8011682:	2b06      	cmp	r3, #6
 8011684:	d824      	bhi.n	80116d0 <_scanf_float+0x2f4>
 8011686:	2d02      	cmp	r5, #2
 8011688:	d836      	bhi.n	80116f8 <_scanf_float+0x31c>
 801168a:	9b01      	ldr	r3, [sp, #4]
 801168c:	429e      	cmp	r6, r3
 801168e:	f67f aee7 	bls.w	8011460 <_scanf_float+0x84>
 8011692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801169a:	464a      	mov	r2, r9
 801169c:	4640      	mov	r0, r8
 801169e:	4798      	blx	r3
 80116a0:	6923      	ldr	r3, [r4, #16]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	6123      	str	r3, [r4, #16]
 80116a6:	e7f0      	b.n	801168a <_scanf_float+0x2ae>
 80116a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80116b0:	464a      	mov	r2, r9
 80116b2:	4640      	mov	r0, r8
 80116b4:	4798      	blx	r3
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	6123      	str	r3, [r4, #16]
 80116bc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80116c0:	fa5f fa8a 	uxtb.w	sl, sl
 80116c4:	f1ba 0f02 	cmp.w	sl, #2
 80116c8:	d1ee      	bne.n	80116a8 <_scanf_float+0x2cc>
 80116ca:	3d03      	subs	r5, #3
 80116cc:	b2ed      	uxtb	r5, r5
 80116ce:	1b76      	subs	r6, r6, r5
 80116d0:	6823      	ldr	r3, [r4, #0]
 80116d2:	05da      	lsls	r2, r3, #23
 80116d4:	d530      	bpl.n	8011738 <_scanf_float+0x35c>
 80116d6:	055b      	lsls	r3, r3, #21
 80116d8:	d511      	bpl.n	80116fe <_scanf_float+0x322>
 80116da:	9b01      	ldr	r3, [sp, #4]
 80116dc:	429e      	cmp	r6, r3
 80116de:	f67f aebf 	bls.w	8011460 <_scanf_float+0x84>
 80116e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80116ea:	464a      	mov	r2, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	4798      	blx	r3
 80116f0:	6923      	ldr	r3, [r4, #16]
 80116f2:	3b01      	subs	r3, #1
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	e7f0      	b.n	80116da <_scanf_float+0x2fe>
 80116f8:	46aa      	mov	sl, r5
 80116fa:	46b3      	mov	fp, r6
 80116fc:	e7de      	b.n	80116bc <_scanf_float+0x2e0>
 80116fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011702:	6923      	ldr	r3, [r4, #16]
 8011704:	2965      	cmp	r1, #101	@ 0x65
 8011706:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801170a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801170e:	6123      	str	r3, [r4, #16]
 8011710:	d00c      	beq.n	801172c <_scanf_float+0x350>
 8011712:	2945      	cmp	r1, #69	@ 0x45
 8011714:	d00a      	beq.n	801172c <_scanf_float+0x350>
 8011716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801171a:	464a      	mov	r2, r9
 801171c:	4640      	mov	r0, r8
 801171e:	4798      	blx	r3
 8011720:	6923      	ldr	r3, [r4, #16]
 8011722:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011726:	3b01      	subs	r3, #1
 8011728:	1eb5      	subs	r5, r6, #2
 801172a:	6123      	str	r3, [r4, #16]
 801172c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011730:	464a      	mov	r2, r9
 8011732:	4640      	mov	r0, r8
 8011734:	4798      	blx	r3
 8011736:	462e      	mov	r6, r5
 8011738:	6822      	ldr	r2, [r4, #0]
 801173a:	f012 0210 	ands.w	r2, r2, #16
 801173e:	d001      	beq.n	8011744 <_scanf_float+0x368>
 8011740:	2000      	movs	r0, #0
 8011742:	e68e      	b.n	8011462 <_scanf_float+0x86>
 8011744:	7032      	strb	r2, [r6, #0]
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011750:	d123      	bne.n	801179a <_scanf_float+0x3be>
 8011752:	9b02      	ldr	r3, [sp, #8]
 8011754:	429f      	cmp	r7, r3
 8011756:	d00a      	beq.n	801176e <_scanf_float+0x392>
 8011758:	1bda      	subs	r2, r3, r7
 801175a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801175e:	429e      	cmp	r6, r3
 8011760:	bf28      	it	cs
 8011762:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011766:	491e      	ldr	r1, [pc, #120]	@ (80117e0 <_scanf_float+0x404>)
 8011768:	4630      	mov	r0, r6
 801176a:	f000 fa23 	bl	8011bb4 <siprintf>
 801176e:	9901      	ldr	r1, [sp, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	4640      	mov	r0, r8
 8011774:	f002 fd7a 	bl	801426c <_strtod_r>
 8011778:	9b03      	ldr	r3, [sp, #12]
 801177a:	6821      	ldr	r1, [r4, #0]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f011 0f02 	tst.w	r1, #2
 8011782:	f103 0204 	add.w	r2, r3, #4
 8011786:	d015      	beq.n	80117b4 <_scanf_float+0x3d8>
 8011788:	9903      	ldr	r1, [sp, #12]
 801178a:	600a      	str	r2, [r1, #0]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	ed83 0b00 	vstr	d0, [r3]
 8011792:	68e3      	ldr	r3, [r4, #12]
 8011794:	3301      	adds	r3, #1
 8011796:	60e3      	str	r3, [r4, #12]
 8011798:	e7d2      	b.n	8011740 <_scanf_float+0x364>
 801179a:	9b04      	ldr	r3, [sp, #16]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d0e6      	beq.n	801176e <_scanf_float+0x392>
 80117a0:	9905      	ldr	r1, [sp, #20]
 80117a2:	230a      	movs	r3, #10
 80117a4:	3101      	adds	r1, #1
 80117a6:	4640      	mov	r0, r8
 80117a8:	f002 fde0 	bl	801436c <_strtol_r>
 80117ac:	9b04      	ldr	r3, [sp, #16]
 80117ae:	9e05      	ldr	r6, [sp, #20]
 80117b0:	1ac2      	subs	r2, r0, r3
 80117b2:	e7d2      	b.n	801175a <_scanf_float+0x37e>
 80117b4:	f011 0f04 	tst.w	r1, #4
 80117b8:	9903      	ldr	r1, [sp, #12]
 80117ba:	600a      	str	r2, [r1, #0]
 80117bc:	d1e6      	bne.n	801178c <_scanf_float+0x3b0>
 80117be:	eeb4 0b40 	vcmp.f64	d0, d0
 80117c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c6:	681d      	ldr	r5, [r3, #0]
 80117c8:	d705      	bvc.n	80117d6 <_scanf_float+0x3fa>
 80117ca:	4806      	ldr	r0, [pc, #24]	@ (80117e4 <_scanf_float+0x408>)
 80117cc:	f000 fc06 	bl	8011fdc <nanf>
 80117d0:	ed85 0a00 	vstr	s0, [r5]
 80117d4:	e7dd      	b.n	8011792 <_scanf_float+0x3b6>
 80117d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80117da:	e7f9      	b.n	80117d0 <_scanf_float+0x3f4>
 80117dc:	2700      	movs	r7, #0
 80117de:	e635      	b.n	801144c <_scanf_float+0x70>
 80117e0:	0801719e 	.word	0x0801719e
 80117e4:	080172fa 	.word	0x080172fa

080117e8 <std>:
 80117e8:	2300      	movs	r3, #0
 80117ea:	b510      	push	{r4, lr}
 80117ec:	4604      	mov	r4, r0
 80117ee:	e9c0 3300 	strd	r3, r3, [r0]
 80117f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117f6:	6083      	str	r3, [r0, #8]
 80117f8:	8181      	strh	r1, [r0, #12]
 80117fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80117fc:	81c2      	strh	r2, [r0, #14]
 80117fe:	6183      	str	r3, [r0, #24]
 8011800:	4619      	mov	r1, r3
 8011802:	2208      	movs	r2, #8
 8011804:	305c      	adds	r0, #92	@ 0x5c
 8011806:	f000 fafd 	bl	8011e04 <memset>
 801180a:	4b0d      	ldr	r3, [pc, #52]	@ (8011840 <std+0x58>)
 801180c:	6263      	str	r3, [r4, #36]	@ 0x24
 801180e:	4b0d      	ldr	r3, [pc, #52]	@ (8011844 <std+0x5c>)
 8011810:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011812:	4b0d      	ldr	r3, [pc, #52]	@ (8011848 <std+0x60>)
 8011814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011816:	4b0d      	ldr	r3, [pc, #52]	@ (801184c <std+0x64>)
 8011818:	6323      	str	r3, [r4, #48]	@ 0x30
 801181a:	4b0d      	ldr	r3, [pc, #52]	@ (8011850 <std+0x68>)
 801181c:	6224      	str	r4, [r4, #32]
 801181e:	429c      	cmp	r4, r3
 8011820:	d006      	beq.n	8011830 <std+0x48>
 8011822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011826:	4294      	cmp	r4, r2
 8011828:	d002      	beq.n	8011830 <std+0x48>
 801182a:	33d0      	adds	r3, #208	@ 0xd0
 801182c:	429c      	cmp	r4, r3
 801182e:	d105      	bne.n	801183c <std+0x54>
 8011830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011838:	f000 bbbe 	b.w	8011fb8 <__retarget_lock_init_recursive>
 801183c:	bd10      	pop	{r4, pc}
 801183e:	bf00      	nop
 8011840:	08011c51 	.word	0x08011c51
 8011844:	08011c77 	.word	0x08011c77
 8011848:	08011caf 	.word	0x08011caf
 801184c:	08011cd3 	.word	0x08011cd3
 8011850:	2400510c 	.word	0x2400510c

08011854 <stdio_exit_handler>:
 8011854:	4a02      	ldr	r2, [pc, #8]	@ (8011860 <stdio_exit_handler+0xc>)
 8011856:	4903      	ldr	r1, [pc, #12]	@ (8011864 <stdio_exit_handler+0x10>)
 8011858:	4803      	ldr	r0, [pc, #12]	@ (8011868 <stdio_exit_handler+0x14>)
 801185a:	f000 b869 	b.w	8011930 <_fwalk_sglue>
 801185e:	bf00      	nop
 8011860:	24000020 	.word	0x24000020
 8011864:	08014fe9 	.word	0x08014fe9
 8011868:	24000030 	.word	0x24000030

0801186c <cleanup_stdio>:
 801186c:	6841      	ldr	r1, [r0, #4]
 801186e:	4b0c      	ldr	r3, [pc, #48]	@ (80118a0 <cleanup_stdio+0x34>)
 8011870:	4299      	cmp	r1, r3
 8011872:	b510      	push	{r4, lr}
 8011874:	4604      	mov	r4, r0
 8011876:	d001      	beq.n	801187c <cleanup_stdio+0x10>
 8011878:	f003 fbb6 	bl	8014fe8 <_fflush_r>
 801187c:	68a1      	ldr	r1, [r4, #8]
 801187e:	4b09      	ldr	r3, [pc, #36]	@ (80118a4 <cleanup_stdio+0x38>)
 8011880:	4299      	cmp	r1, r3
 8011882:	d002      	beq.n	801188a <cleanup_stdio+0x1e>
 8011884:	4620      	mov	r0, r4
 8011886:	f003 fbaf 	bl	8014fe8 <_fflush_r>
 801188a:	68e1      	ldr	r1, [r4, #12]
 801188c:	4b06      	ldr	r3, [pc, #24]	@ (80118a8 <cleanup_stdio+0x3c>)
 801188e:	4299      	cmp	r1, r3
 8011890:	d004      	beq.n	801189c <cleanup_stdio+0x30>
 8011892:	4620      	mov	r0, r4
 8011894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011898:	f003 bba6 	b.w	8014fe8 <_fflush_r>
 801189c:	bd10      	pop	{r4, pc}
 801189e:	bf00      	nop
 80118a0:	2400510c 	.word	0x2400510c
 80118a4:	24005174 	.word	0x24005174
 80118a8:	240051dc 	.word	0x240051dc

080118ac <global_stdio_init.part.0>:
 80118ac:	b510      	push	{r4, lr}
 80118ae:	4b0b      	ldr	r3, [pc, #44]	@ (80118dc <global_stdio_init.part.0+0x30>)
 80118b0:	4c0b      	ldr	r4, [pc, #44]	@ (80118e0 <global_stdio_init.part.0+0x34>)
 80118b2:	4a0c      	ldr	r2, [pc, #48]	@ (80118e4 <global_stdio_init.part.0+0x38>)
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	4620      	mov	r0, r4
 80118b8:	2200      	movs	r2, #0
 80118ba:	2104      	movs	r1, #4
 80118bc:	f7ff ff94 	bl	80117e8 <std>
 80118c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80118c4:	2201      	movs	r2, #1
 80118c6:	2109      	movs	r1, #9
 80118c8:	f7ff ff8e 	bl	80117e8 <std>
 80118cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80118d0:	2202      	movs	r2, #2
 80118d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118d6:	2112      	movs	r1, #18
 80118d8:	f7ff bf86 	b.w	80117e8 <std>
 80118dc:	24005244 	.word	0x24005244
 80118e0:	2400510c 	.word	0x2400510c
 80118e4:	08011855 	.word	0x08011855

080118e8 <__sfp_lock_acquire>:
 80118e8:	4801      	ldr	r0, [pc, #4]	@ (80118f0 <__sfp_lock_acquire+0x8>)
 80118ea:	f000 bb66 	b.w	8011fba <__retarget_lock_acquire_recursive>
 80118ee:	bf00      	nop
 80118f0:	2400524d 	.word	0x2400524d

080118f4 <__sfp_lock_release>:
 80118f4:	4801      	ldr	r0, [pc, #4]	@ (80118fc <__sfp_lock_release+0x8>)
 80118f6:	f000 bb61 	b.w	8011fbc <__retarget_lock_release_recursive>
 80118fa:	bf00      	nop
 80118fc:	2400524d 	.word	0x2400524d

08011900 <__sinit>:
 8011900:	b510      	push	{r4, lr}
 8011902:	4604      	mov	r4, r0
 8011904:	f7ff fff0 	bl	80118e8 <__sfp_lock_acquire>
 8011908:	6a23      	ldr	r3, [r4, #32]
 801190a:	b11b      	cbz	r3, 8011914 <__sinit+0x14>
 801190c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011910:	f7ff bff0 	b.w	80118f4 <__sfp_lock_release>
 8011914:	4b04      	ldr	r3, [pc, #16]	@ (8011928 <__sinit+0x28>)
 8011916:	6223      	str	r3, [r4, #32]
 8011918:	4b04      	ldr	r3, [pc, #16]	@ (801192c <__sinit+0x2c>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1f5      	bne.n	801190c <__sinit+0xc>
 8011920:	f7ff ffc4 	bl	80118ac <global_stdio_init.part.0>
 8011924:	e7f2      	b.n	801190c <__sinit+0xc>
 8011926:	bf00      	nop
 8011928:	0801186d 	.word	0x0801186d
 801192c:	24005244 	.word	0x24005244

08011930 <_fwalk_sglue>:
 8011930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011934:	4607      	mov	r7, r0
 8011936:	4688      	mov	r8, r1
 8011938:	4614      	mov	r4, r2
 801193a:	2600      	movs	r6, #0
 801193c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011940:	f1b9 0901 	subs.w	r9, r9, #1
 8011944:	d505      	bpl.n	8011952 <_fwalk_sglue+0x22>
 8011946:	6824      	ldr	r4, [r4, #0]
 8011948:	2c00      	cmp	r4, #0
 801194a:	d1f7      	bne.n	801193c <_fwalk_sglue+0xc>
 801194c:	4630      	mov	r0, r6
 801194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011952:	89ab      	ldrh	r3, [r5, #12]
 8011954:	2b01      	cmp	r3, #1
 8011956:	d907      	bls.n	8011968 <_fwalk_sglue+0x38>
 8011958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801195c:	3301      	adds	r3, #1
 801195e:	d003      	beq.n	8011968 <_fwalk_sglue+0x38>
 8011960:	4629      	mov	r1, r5
 8011962:	4638      	mov	r0, r7
 8011964:	47c0      	blx	r8
 8011966:	4306      	orrs	r6, r0
 8011968:	3568      	adds	r5, #104	@ 0x68
 801196a:	e7e9      	b.n	8011940 <_fwalk_sglue+0x10>

0801196c <iprintf>:
 801196c:	b40f      	push	{r0, r1, r2, r3}
 801196e:	b507      	push	{r0, r1, r2, lr}
 8011970:	4906      	ldr	r1, [pc, #24]	@ (801198c <iprintf+0x20>)
 8011972:	ab04      	add	r3, sp, #16
 8011974:	6808      	ldr	r0, [r1, #0]
 8011976:	f853 2b04 	ldr.w	r2, [r3], #4
 801197a:	6881      	ldr	r1, [r0, #8]
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	f003 f849 	bl	8014a14 <_vfiprintf_r>
 8011982:	b003      	add	sp, #12
 8011984:	f85d eb04 	ldr.w	lr, [sp], #4
 8011988:	b004      	add	sp, #16
 801198a:	4770      	bx	lr
 801198c:	2400002c 	.word	0x2400002c

08011990 <_puts_r>:
 8011990:	6a03      	ldr	r3, [r0, #32]
 8011992:	b570      	push	{r4, r5, r6, lr}
 8011994:	6884      	ldr	r4, [r0, #8]
 8011996:	4605      	mov	r5, r0
 8011998:	460e      	mov	r6, r1
 801199a:	b90b      	cbnz	r3, 80119a0 <_puts_r+0x10>
 801199c:	f7ff ffb0 	bl	8011900 <__sinit>
 80119a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119a2:	07db      	lsls	r3, r3, #31
 80119a4:	d405      	bmi.n	80119b2 <_puts_r+0x22>
 80119a6:	89a3      	ldrh	r3, [r4, #12]
 80119a8:	0598      	lsls	r0, r3, #22
 80119aa:	d402      	bmi.n	80119b2 <_puts_r+0x22>
 80119ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119ae:	f000 fb04 	bl	8011fba <__retarget_lock_acquire_recursive>
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	0719      	lsls	r1, r3, #28
 80119b6:	d502      	bpl.n	80119be <_puts_r+0x2e>
 80119b8:	6923      	ldr	r3, [r4, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d135      	bne.n	8011a2a <_puts_r+0x9a>
 80119be:	4621      	mov	r1, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f000 f9c9 	bl	8011d58 <__swsetup_r>
 80119c6:	b380      	cbz	r0, 8011a2a <_puts_r+0x9a>
 80119c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80119cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119ce:	07da      	lsls	r2, r3, #31
 80119d0:	d405      	bmi.n	80119de <_puts_r+0x4e>
 80119d2:	89a3      	ldrh	r3, [r4, #12]
 80119d4:	059b      	lsls	r3, r3, #22
 80119d6:	d402      	bmi.n	80119de <_puts_r+0x4e>
 80119d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119da:	f000 faef 	bl	8011fbc <__retarget_lock_release_recursive>
 80119de:	4628      	mov	r0, r5
 80119e0:	bd70      	pop	{r4, r5, r6, pc}
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	da04      	bge.n	80119f0 <_puts_r+0x60>
 80119e6:	69a2      	ldr	r2, [r4, #24]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	dc17      	bgt.n	8011a1c <_puts_r+0x8c>
 80119ec:	290a      	cmp	r1, #10
 80119ee:	d015      	beq.n	8011a1c <_puts_r+0x8c>
 80119f0:	6823      	ldr	r3, [r4, #0]
 80119f2:	1c5a      	adds	r2, r3, #1
 80119f4:	6022      	str	r2, [r4, #0]
 80119f6:	7019      	strb	r1, [r3, #0]
 80119f8:	68a3      	ldr	r3, [r4, #8]
 80119fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119fe:	3b01      	subs	r3, #1
 8011a00:	60a3      	str	r3, [r4, #8]
 8011a02:	2900      	cmp	r1, #0
 8011a04:	d1ed      	bne.n	80119e2 <_puts_r+0x52>
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	da11      	bge.n	8011a2e <_puts_r+0x9e>
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	210a      	movs	r1, #10
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f000 f963 	bl	8011cda <__swbuf_r>
 8011a14:	3001      	adds	r0, #1
 8011a16:	d0d7      	beq.n	80119c8 <_puts_r+0x38>
 8011a18:	250a      	movs	r5, #10
 8011a1a:	e7d7      	b.n	80119cc <_puts_r+0x3c>
 8011a1c:	4622      	mov	r2, r4
 8011a1e:	4628      	mov	r0, r5
 8011a20:	f000 f95b 	bl	8011cda <__swbuf_r>
 8011a24:	3001      	adds	r0, #1
 8011a26:	d1e7      	bne.n	80119f8 <_puts_r+0x68>
 8011a28:	e7ce      	b.n	80119c8 <_puts_r+0x38>
 8011a2a:	3e01      	subs	r6, #1
 8011a2c:	e7e4      	b.n	80119f8 <_puts_r+0x68>
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	6022      	str	r2, [r4, #0]
 8011a34:	220a      	movs	r2, #10
 8011a36:	701a      	strb	r2, [r3, #0]
 8011a38:	e7ee      	b.n	8011a18 <_puts_r+0x88>
	...

08011a3c <puts>:
 8011a3c:	4b02      	ldr	r3, [pc, #8]	@ (8011a48 <puts+0xc>)
 8011a3e:	4601      	mov	r1, r0
 8011a40:	6818      	ldr	r0, [r3, #0]
 8011a42:	f7ff bfa5 	b.w	8011990 <_puts_r>
 8011a46:	bf00      	nop
 8011a48:	2400002c 	.word	0x2400002c

08011a4c <setvbuf>:
 8011a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a50:	461d      	mov	r5, r3
 8011a52:	4b57      	ldr	r3, [pc, #348]	@ (8011bb0 <setvbuf+0x164>)
 8011a54:	681f      	ldr	r7, [r3, #0]
 8011a56:	4604      	mov	r4, r0
 8011a58:	460e      	mov	r6, r1
 8011a5a:	4690      	mov	r8, r2
 8011a5c:	b127      	cbz	r7, 8011a68 <setvbuf+0x1c>
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	b913      	cbnz	r3, 8011a68 <setvbuf+0x1c>
 8011a62:	4638      	mov	r0, r7
 8011a64:	f7ff ff4c 	bl	8011900 <__sinit>
 8011a68:	f1b8 0f02 	cmp.w	r8, #2
 8011a6c:	d006      	beq.n	8011a7c <setvbuf+0x30>
 8011a6e:	f1b8 0f01 	cmp.w	r8, #1
 8011a72:	f200 809a 	bhi.w	8011baa <setvbuf+0x15e>
 8011a76:	2d00      	cmp	r5, #0
 8011a78:	f2c0 8097 	blt.w	8011baa <setvbuf+0x15e>
 8011a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a7e:	07d9      	lsls	r1, r3, #31
 8011a80:	d405      	bmi.n	8011a8e <setvbuf+0x42>
 8011a82:	89a3      	ldrh	r3, [r4, #12]
 8011a84:	059a      	lsls	r2, r3, #22
 8011a86:	d402      	bmi.n	8011a8e <setvbuf+0x42>
 8011a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a8a:	f000 fa96 	bl	8011fba <__retarget_lock_acquire_recursive>
 8011a8e:	4621      	mov	r1, r4
 8011a90:	4638      	mov	r0, r7
 8011a92:	f003 faa9 	bl	8014fe8 <_fflush_r>
 8011a96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a98:	b141      	cbz	r1, 8011aac <setvbuf+0x60>
 8011a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a9e:	4299      	cmp	r1, r3
 8011aa0:	d002      	beq.n	8011aa8 <setvbuf+0x5c>
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	f001 f886 	bl	8012bb4 <_free_r>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8011aac:	2300      	movs	r3, #0
 8011aae:	61a3      	str	r3, [r4, #24]
 8011ab0:	6063      	str	r3, [r4, #4]
 8011ab2:	89a3      	ldrh	r3, [r4, #12]
 8011ab4:	061b      	lsls	r3, r3, #24
 8011ab6:	d503      	bpl.n	8011ac0 <setvbuf+0x74>
 8011ab8:	6921      	ldr	r1, [r4, #16]
 8011aba:	4638      	mov	r0, r7
 8011abc:	f001 f87a 	bl	8012bb4 <_free_r>
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8011ac6:	f023 0303 	bic.w	r3, r3, #3
 8011aca:	f1b8 0f02 	cmp.w	r8, #2
 8011ace:	81a3      	strh	r3, [r4, #12]
 8011ad0:	d061      	beq.n	8011b96 <setvbuf+0x14a>
 8011ad2:	ab01      	add	r3, sp, #4
 8011ad4:	466a      	mov	r2, sp
 8011ad6:	4621      	mov	r1, r4
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f003 faad 	bl	8015038 <__swhatbuf_r>
 8011ade:	89a3      	ldrh	r3, [r4, #12]
 8011ae0:	4318      	orrs	r0, r3
 8011ae2:	81a0      	strh	r0, [r4, #12]
 8011ae4:	bb2d      	cbnz	r5, 8011b32 <setvbuf+0xe6>
 8011ae6:	9d00      	ldr	r5, [sp, #0]
 8011ae8:	4628      	mov	r0, r5
 8011aea:	f001 f8ad 	bl	8012c48 <malloc>
 8011aee:	4606      	mov	r6, r0
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d152      	bne.n	8011b9a <setvbuf+0x14e>
 8011af4:	f8dd 9000 	ldr.w	r9, [sp]
 8011af8:	45a9      	cmp	r9, r5
 8011afa:	d140      	bne.n	8011b7e <setvbuf+0x132>
 8011afc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b04:	f043 0202 	orr.w	r2, r3, #2
 8011b08:	81a2      	strh	r2, [r4, #12]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	60a2      	str	r2, [r4, #8]
 8011b0e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8011b12:	6022      	str	r2, [r4, #0]
 8011b14:	6122      	str	r2, [r4, #16]
 8011b16:	2201      	movs	r2, #1
 8011b18:	6162      	str	r2, [r4, #20]
 8011b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b1c:	07d6      	lsls	r6, r2, #31
 8011b1e:	d404      	bmi.n	8011b2a <setvbuf+0xde>
 8011b20:	0598      	lsls	r0, r3, #22
 8011b22:	d402      	bmi.n	8011b2a <setvbuf+0xde>
 8011b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b26:	f000 fa49 	bl	8011fbc <__retarget_lock_release_recursive>
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	b003      	add	sp, #12
 8011b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b32:	2e00      	cmp	r6, #0
 8011b34:	d0d8      	beq.n	8011ae8 <setvbuf+0x9c>
 8011b36:	6a3b      	ldr	r3, [r7, #32]
 8011b38:	b913      	cbnz	r3, 8011b40 <setvbuf+0xf4>
 8011b3a:	4638      	mov	r0, r7
 8011b3c:	f7ff fee0 	bl	8011900 <__sinit>
 8011b40:	f1b8 0f01 	cmp.w	r8, #1
 8011b44:	bf08      	it	eq
 8011b46:	89a3      	ldrheq	r3, [r4, #12]
 8011b48:	6026      	str	r6, [r4, #0]
 8011b4a:	bf04      	itt	eq
 8011b4c:	f043 0301 	orreq.w	r3, r3, #1
 8011b50:	81a3      	strheq	r3, [r4, #12]
 8011b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b56:	f013 0208 	ands.w	r2, r3, #8
 8011b5a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011b5e:	d01e      	beq.n	8011b9e <setvbuf+0x152>
 8011b60:	07d9      	lsls	r1, r3, #31
 8011b62:	bf41      	itttt	mi
 8011b64:	2200      	movmi	r2, #0
 8011b66:	426d      	negmi	r5, r5
 8011b68:	60a2      	strmi	r2, [r4, #8]
 8011b6a:	61a5      	strmi	r5, [r4, #24]
 8011b6c:	bf58      	it	pl
 8011b6e:	60a5      	strpl	r5, [r4, #8]
 8011b70:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b72:	07d2      	lsls	r2, r2, #31
 8011b74:	d401      	bmi.n	8011b7a <setvbuf+0x12e>
 8011b76:	059b      	lsls	r3, r3, #22
 8011b78:	d513      	bpl.n	8011ba2 <setvbuf+0x156>
 8011b7a:	2500      	movs	r5, #0
 8011b7c:	e7d5      	b.n	8011b2a <setvbuf+0xde>
 8011b7e:	4648      	mov	r0, r9
 8011b80:	f001 f862 	bl	8012c48 <malloc>
 8011b84:	4606      	mov	r6, r0
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d0b8      	beq.n	8011afc <setvbuf+0xb0>
 8011b8a:	89a3      	ldrh	r3, [r4, #12]
 8011b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b90:	81a3      	strh	r3, [r4, #12]
 8011b92:	464d      	mov	r5, r9
 8011b94:	e7cf      	b.n	8011b36 <setvbuf+0xea>
 8011b96:	2500      	movs	r5, #0
 8011b98:	e7b2      	b.n	8011b00 <setvbuf+0xb4>
 8011b9a:	46a9      	mov	r9, r5
 8011b9c:	e7f5      	b.n	8011b8a <setvbuf+0x13e>
 8011b9e:	60a2      	str	r2, [r4, #8]
 8011ba0:	e7e6      	b.n	8011b70 <setvbuf+0x124>
 8011ba2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ba4:	f000 fa0a 	bl	8011fbc <__retarget_lock_release_recursive>
 8011ba8:	e7e7      	b.n	8011b7a <setvbuf+0x12e>
 8011baa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011bae:	e7bc      	b.n	8011b2a <setvbuf+0xde>
 8011bb0:	2400002c 	.word	0x2400002c

08011bb4 <siprintf>:
 8011bb4:	b40e      	push	{r1, r2, r3}
 8011bb6:	b510      	push	{r4, lr}
 8011bb8:	b09d      	sub	sp, #116	@ 0x74
 8011bba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011bbc:	9002      	str	r0, [sp, #8]
 8011bbe:	9006      	str	r0, [sp, #24]
 8011bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011bc4:	480a      	ldr	r0, [pc, #40]	@ (8011bf0 <siprintf+0x3c>)
 8011bc6:	9107      	str	r1, [sp, #28]
 8011bc8:	9104      	str	r1, [sp, #16]
 8011bca:	490a      	ldr	r1, [pc, #40]	@ (8011bf4 <siprintf+0x40>)
 8011bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd0:	9105      	str	r1, [sp, #20]
 8011bd2:	2400      	movs	r4, #0
 8011bd4:	a902      	add	r1, sp, #8
 8011bd6:	6800      	ldr	r0, [r0, #0]
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011bdc:	f002 fc24 	bl	8014428 <_svfiprintf_r>
 8011be0:	9b02      	ldr	r3, [sp, #8]
 8011be2:	701c      	strb	r4, [r3, #0]
 8011be4:	b01d      	add	sp, #116	@ 0x74
 8011be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bea:	b003      	add	sp, #12
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop
 8011bf0:	2400002c 	.word	0x2400002c
 8011bf4:	ffff0208 	.word	0xffff0208

08011bf8 <siscanf>:
 8011bf8:	b40e      	push	{r1, r2, r3}
 8011bfa:	b570      	push	{r4, r5, r6, lr}
 8011bfc:	b09d      	sub	sp, #116	@ 0x74
 8011bfe:	ac21      	add	r4, sp, #132	@ 0x84
 8011c00:	2500      	movs	r5, #0
 8011c02:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011c06:	f854 6b04 	ldr.w	r6, [r4], #4
 8011c0a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011c0e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011c10:	9002      	str	r0, [sp, #8]
 8011c12:	9006      	str	r0, [sp, #24]
 8011c14:	f7ee fbb4 	bl	8000380 <strlen>
 8011c18:	4b0b      	ldr	r3, [pc, #44]	@ (8011c48 <siscanf+0x50>)
 8011c1a:	9003      	str	r0, [sp, #12]
 8011c1c:	9007      	str	r0, [sp, #28]
 8011c1e:	480b      	ldr	r0, [pc, #44]	@ (8011c4c <siscanf+0x54>)
 8011c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	4623      	mov	r3, r4
 8011c2e:	a902      	add	r1, sp, #8
 8011c30:	6800      	ldr	r0, [r0, #0]
 8011c32:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011c34:	9514      	str	r5, [sp, #80]	@ 0x50
 8011c36:	9401      	str	r4, [sp, #4]
 8011c38:	f002 fd4c 	bl	80146d4 <__ssvfiscanf_r>
 8011c3c:	b01d      	add	sp, #116	@ 0x74
 8011c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c42:	b003      	add	sp, #12
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop
 8011c48:	08011c73 	.word	0x08011c73
 8011c4c:	2400002c 	.word	0x2400002c

08011c50 <__sread>:
 8011c50:	b510      	push	{r4, lr}
 8011c52:	460c      	mov	r4, r1
 8011c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c58:	f000 f960 	bl	8011f1c <_read_r>
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	bfab      	itete	ge
 8011c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011c62:	89a3      	ldrhlt	r3, [r4, #12]
 8011c64:	181b      	addge	r3, r3, r0
 8011c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011c6a:	bfac      	ite	ge
 8011c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011c6e:	81a3      	strhlt	r3, [r4, #12]
 8011c70:	bd10      	pop	{r4, pc}

08011c72 <__seofread>:
 8011c72:	2000      	movs	r0, #0
 8011c74:	4770      	bx	lr

08011c76 <__swrite>:
 8011c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7a:	461f      	mov	r7, r3
 8011c7c:	898b      	ldrh	r3, [r1, #12]
 8011c7e:	05db      	lsls	r3, r3, #23
 8011c80:	4605      	mov	r5, r0
 8011c82:	460c      	mov	r4, r1
 8011c84:	4616      	mov	r6, r2
 8011c86:	d505      	bpl.n	8011c94 <__swrite+0x1e>
 8011c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c8c:	2302      	movs	r3, #2
 8011c8e:	2200      	movs	r2, #0
 8011c90:	f000 f932 	bl	8011ef8 <_lseek_r>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	4632      	mov	r2, r6
 8011ca2:	463b      	mov	r3, r7
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011caa:	f000 b949 	b.w	8011f40 <_write_r>

08011cae <__sseek>:
 8011cae:	b510      	push	{r4, lr}
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb6:	f000 f91f 	bl	8011ef8 <_lseek_r>
 8011cba:	1c43      	adds	r3, r0, #1
 8011cbc:	89a3      	ldrh	r3, [r4, #12]
 8011cbe:	bf15      	itete	ne
 8011cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011cca:	81a3      	strheq	r3, [r4, #12]
 8011ccc:	bf18      	it	ne
 8011cce:	81a3      	strhne	r3, [r4, #12]
 8011cd0:	bd10      	pop	{r4, pc}

08011cd2 <__sclose>:
 8011cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd6:	f000 b8a1 	b.w	8011e1c <_close_r>

08011cda <__swbuf_r>:
 8011cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cdc:	460e      	mov	r6, r1
 8011cde:	4614      	mov	r4, r2
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	b118      	cbz	r0, 8011cec <__swbuf_r+0x12>
 8011ce4:	6a03      	ldr	r3, [r0, #32]
 8011ce6:	b90b      	cbnz	r3, 8011cec <__swbuf_r+0x12>
 8011ce8:	f7ff fe0a 	bl	8011900 <__sinit>
 8011cec:	69a3      	ldr	r3, [r4, #24]
 8011cee:	60a3      	str	r3, [r4, #8]
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	071a      	lsls	r2, r3, #28
 8011cf4:	d501      	bpl.n	8011cfa <__swbuf_r+0x20>
 8011cf6:	6923      	ldr	r3, [r4, #16]
 8011cf8:	b943      	cbnz	r3, 8011d0c <__swbuf_r+0x32>
 8011cfa:	4621      	mov	r1, r4
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f000 f82b 	bl	8011d58 <__swsetup_r>
 8011d02:	b118      	cbz	r0, 8011d0c <__swbuf_r+0x32>
 8011d04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011d08:	4638      	mov	r0, r7
 8011d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	6922      	ldr	r2, [r4, #16]
 8011d10:	1a98      	subs	r0, r3, r2
 8011d12:	6963      	ldr	r3, [r4, #20]
 8011d14:	b2f6      	uxtb	r6, r6
 8011d16:	4283      	cmp	r3, r0
 8011d18:	4637      	mov	r7, r6
 8011d1a:	dc05      	bgt.n	8011d28 <__swbuf_r+0x4e>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f003 f962 	bl	8014fe8 <_fflush_r>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d1ed      	bne.n	8011d04 <__swbuf_r+0x2a>
 8011d28:	68a3      	ldr	r3, [r4, #8]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	60a3      	str	r3, [r4, #8]
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	6022      	str	r2, [r4, #0]
 8011d34:	701e      	strb	r6, [r3, #0]
 8011d36:	6962      	ldr	r2, [r4, #20]
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d004      	beq.n	8011d48 <__swbuf_r+0x6e>
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	07db      	lsls	r3, r3, #31
 8011d42:	d5e1      	bpl.n	8011d08 <__swbuf_r+0x2e>
 8011d44:	2e0a      	cmp	r6, #10
 8011d46:	d1df      	bne.n	8011d08 <__swbuf_r+0x2e>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f003 f94c 	bl	8014fe8 <_fflush_r>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d0d9      	beq.n	8011d08 <__swbuf_r+0x2e>
 8011d54:	e7d6      	b.n	8011d04 <__swbuf_r+0x2a>
	...

08011d58 <__swsetup_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4b29      	ldr	r3, [pc, #164]	@ (8011e00 <__swsetup_r+0xa8>)
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	6818      	ldr	r0, [r3, #0]
 8011d60:	460c      	mov	r4, r1
 8011d62:	b118      	cbz	r0, 8011d6c <__swsetup_r+0x14>
 8011d64:	6a03      	ldr	r3, [r0, #32]
 8011d66:	b90b      	cbnz	r3, 8011d6c <__swsetup_r+0x14>
 8011d68:	f7ff fdca 	bl	8011900 <__sinit>
 8011d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d70:	0719      	lsls	r1, r3, #28
 8011d72:	d422      	bmi.n	8011dba <__swsetup_r+0x62>
 8011d74:	06da      	lsls	r2, r3, #27
 8011d76:	d407      	bmi.n	8011d88 <__swsetup_r+0x30>
 8011d78:	2209      	movs	r2, #9
 8011d7a:	602a      	str	r2, [r5, #0]
 8011d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d80:	81a3      	strh	r3, [r4, #12]
 8011d82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d86:	e033      	b.n	8011df0 <__swsetup_r+0x98>
 8011d88:	0758      	lsls	r0, r3, #29
 8011d8a:	d512      	bpl.n	8011db2 <__swsetup_r+0x5a>
 8011d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d8e:	b141      	cbz	r1, 8011da2 <__swsetup_r+0x4a>
 8011d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d94:	4299      	cmp	r1, r3
 8011d96:	d002      	beq.n	8011d9e <__swsetup_r+0x46>
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f000 ff0b 	bl	8012bb4 <_free_r>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011da8:	81a3      	strh	r3, [r4, #12]
 8011daa:	2300      	movs	r3, #0
 8011dac:	6063      	str	r3, [r4, #4]
 8011dae:	6923      	ldr	r3, [r4, #16]
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f043 0308 	orr.w	r3, r3, #8
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	6923      	ldr	r3, [r4, #16]
 8011dbc:	b94b      	cbnz	r3, 8011dd2 <__swsetup_r+0x7a>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dc8:	d003      	beq.n	8011dd2 <__swsetup_r+0x7a>
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f003 f959 	bl	8015084 <__smakebuf_r>
 8011dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dd6:	f013 0201 	ands.w	r2, r3, #1
 8011dda:	d00a      	beq.n	8011df2 <__swsetup_r+0x9a>
 8011ddc:	2200      	movs	r2, #0
 8011dde:	60a2      	str	r2, [r4, #8]
 8011de0:	6962      	ldr	r2, [r4, #20]
 8011de2:	4252      	negs	r2, r2
 8011de4:	61a2      	str	r2, [r4, #24]
 8011de6:	6922      	ldr	r2, [r4, #16]
 8011de8:	b942      	cbnz	r2, 8011dfc <__swsetup_r+0xa4>
 8011dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dee:	d1c5      	bne.n	8011d7c <__swsetup_r+0x24>
 8011df0:	bd38      	pop	{r3, r4, r5, pc}
 8011df2:	0799      	lsls	r1, r3, #30
 8011df4:	bf58      	it	pl
 8011df6:	6962      	ldrpl	r2, [r4, #20]
 8011df8:	60a2      	str	r2, [r4, #8]
 8011dfa:	e7f4      	b.n	8011de6 <__swsetup_r+0x8e>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	e7f7      	b.n	8011df0 <__swsetup_r+0x98>
 8011e00:	2400002c 	.word	0x2400002c

08011e04 <memset>:
 8011e04:	4402      	add	r2, r0
 8011e06:	4603      	mov	r3, r0
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d100      	bne.n	8011e0e <memset+0xa>
 8011e0c:	4770      	bx	lr
 8011e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e12:	e7f9      	b.n	8011e08 <memset+0x4>

08011e14 <_localeconv_r>:
 8011e14:	4800      	ldr	r0, [pc, #0]	@ (8011e18 <_localeconv_r+0x4>)
 8011e16:	4770      	bx	lr
 8011e18:	2400016c 	.word	0x2400016c

08011e1c <_close_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d06      	ldr	r5, [pc, #24]	@ (8011e38 <_close_r+0x1c>)
 8011e20:	2300      	movs	r3, #0
 8011e22:	4604      	mov	r4, r0
 8011e24:	4608      	mov	r0, r1
 8011e26:	602b      	str	r3, [r5, #0]
 8011e28:	f7f2 fe04 	bl	8004a34 <_close>
 8011e2c:	1c43      	adds	r3, r0, #1
 8011e2e:	d102      	bne.n	8011e36 <_close_r+0x1a>
 8011e30:	682b      	ldr	r3, [r5, #0]
 8011e32:	b103      	cbz	r3, 8011e36 <_close_r+0x1a>
 8011e34:	6023      	str	r3, [r4, #0]
 8011e36:	bd38      	pop	{r3, r4, r5, pc}
 8011e38:	24005248 	.word	0x24005248

08011e3c <_reclaim_reent>:
 8011e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8011ef4 <_reclaim_reent+0xb8>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4283      	cmp	r3, r0
 8011e42:	b570      	push	{r4, r5, r6, lr}
 8011e44:	4604      	mov	r4, r0
 8011e46:	d053      	beq.n	8011ef0 <_reclaim_reent+0xb4>
 8011e48:	69c3      	ldr	r3, [r0, #28]
 8011e4a:	b31b      	cbz	r3, 8011e94 <_reclaim_reent+0x58>
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	b163      	cbz	r3, 8011e6a <_reclaim_reent+0x2e>
 8011e50:	2500      	movs	r5, #0
 8011e52:	69e3      	ldr	r3, [r4, #28]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	5959      	ldr	r1, [r3, r5]
 8011e58:	b9b1      	cbnz	r1, 8011e88 <_reclaim_reent+0x4c>
 8011e5a:	3504      	adds	r5, #4
 8011e5c:	2d80      	cmp	r5, #128	@ 0x80
 8011e5e:	d1f8      	bne.n	8011e52 <_reclaim_reent+0x16>
 8011e60:	69e3      	ldr	r3, [r4, #28]
 8011e62:	4620      	mov	r0, r4
 8011e64:	68d9      	ldr	r1, [r3, #12]
 8011e66:	f000 fea5 	bl	8012bb4 <_free_r>
 8011e6a:	69e3      	ldr	r3, [r4, #28]
 8011e6c:	6819      	ldr	r1, [r3, #0]
 8011e6e:	b111      	cbz	r1, 8011e76 <_reclaim_reent+0x3a>
 8011e70:	4620      	mov	r0, r4
 8011e72:	f000 fe9f 	bl	8012bb4 <_free_r>
 8011e76:	69e3      	ldr	r3, [r4, #28]
 8011e78:	689d      	ldr	r5, [r3, #8]
 8011e7a:	b15d      	cbz	r5, 8011e94 <_reclaim_reent+0x58>
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	4620      	mov	r0, r4
 8011e80:	682d      	ldr	r5, [r5, #0]
 8011e82:	f000 fe97 	bl	8012bb4 <_free_r>
 8011e86:	e7f8      	b.n	8011e7a <_reclaim_reent+0x3e>
 8011e88:	680e      	ldr	r6, [r1, #0]
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f000 fe92 	bl	8012bb4 <_free_r>
 8011e90:	4631      	mov	r1, r6
 8011e92:	e7e1      	b.n	8011e58 <_reclaim_reent+0x1c>
 8011e94:	6961      	ldr	r1, [r4, #20]
 8011e96:	b111      	cbz	r1, 8011e9e <_reclaim_reent+0x62>
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f000 fe8b 	bl	8012bb4 <_free_r>
 8011e9e:	69e1      	ldr	r1, [r4, #28]
 8011ea0:	b111      	cbz	r1, 8011ea8 <_reclaim_reent+0x6c>
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f000 fe86 	bl	8012bb4 <_free_r>
 8011ea8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011eaa:	b111      	cbz	r1, 8011eb2 <_reclaim_reent+0x76>
 8011eac:	4620      	mov	r0, r4
 8011eae:	f000 fe81 	bl	8012bb4 <_free_r>
 8011eb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011eb4:	b111      	cbz	r1, 8011ebc <_reclaim_reent+0x80>
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 fe7c 	bl	8012bb4 <_free_r>
 8011ebc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011ebe:	b111      	cbz	r1, 8011ec6 <_reclaim_reent+0x8a>
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f000 fe77 	bl	8012bb4 <_free_r>
 8011ec6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011ec8:	b111      	cbz	r1, 8011ed0 <_reclaim_reent+0x94>
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f000 fe72 	bl	8012bb4 <_free_r>
 8011ed0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011ed2:	b111      	cbz	r1, 8011eda <_reclaim_reent+0x9e>
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	f000 fe6d 	bl	8012bb4 <_free_r>
 8011eda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011edc:	b111      	cbz	r1, 8011ee4 <_reclaim_reent+0xa8>
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f000 fe68 	bl	8012bb4 <_free_r>
 8011ee4:	6a23      	ldr	r3, [r4, #32]
 8011ee6:	b11b      	cbz	r3, 8011ef0 <_reclaim_reent+0xb4>
 8011ee8:	4620      	mov	r0, r4
 8011eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011eee:	4718      	bx	r3
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
 8011ef2:	bf00      	nop
 8011ef4:	2400002c 	.word	0x2400002c

08011ef8 <_lseek_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d07      	ldr	r5, [pc, #28]	@ (8011f18 <_lseek_r+0x20>)
 8011efc:	4604      	mov	r4, r0
 8011efe:	4608      	mov	r0, r1
 8011f00:	4611      	mov	r1, r2
 8011f02:	2200      	movs	r2, #0
 8011f04:	602a      	str	r2, [r5, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	f7f2 fdbb 	bl	8004a82 <_lseek>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_lseek_r+0x1e>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_lseek_r+0x1e>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	24005248 	.word	0x24005248

08011f1c <_read_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d07      	ldr	r5, [pc, #28]	@ (8011f3c <_read_r+0x20>)
 8011f20:	4604      	mov	r4, r0
 8011f22:	4608      	mov	r0, r1
 8011f24:	4611      	mov	r1, r2
 8011f26:	2200      	movs	r2, #0
 8011f28:	602a      	str	r2, [r5, #0]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	f7f2 fd49 	bl	80049c2 <_read>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_read_r+0x1e>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_read_r+0x1e>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	24005248 	.word	0x24005248

08011f40 <_write_r>:
 8011f40:	b538      	push	{r3, r4, r5, lr}
 8011f42:	4d07      	ldr	r5, [pc, #28]	@ (8011f60 <_write_r+0x20>)
 8011f44:	4604      	mov	r4, r0
 8011f46:	4608      	mov	r0, r1
 8011f48:	4611      	mov	r1, r2
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	602a      	str	r2, [r5, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	f7f2 fd54 	bl	80049fc <_write>
 8011f54:	1c43      	adds	r3, r0, #1
 8011f56:	d102      	bne.n	8011f5e <_write_r+0x1e>
 8011f58:	682b      	ldr	r3, [r5, #0]
 8011f5a:	b103      	cbz	r3, 8011f5e <_write_r+0x1e>
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	bd38      	pop	{r3, r4, r5, pc}
 8011f60:	24005248 	.word	0x24005248

08011f64 <__errno>:
 8011f64:	4b01      	ldr	r3, [pc, #4]	@ (8011f6c <__errno+0x8>)
 8011f66:	6818      	ldr	r0, [r3, #0]
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	2400002c 	.word	0x2400002c

08011f70 <__libc_init_array>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	4d0d      	ldr	r5, [pc, #52]	@ (8011fa8 <__libc_init_array+0x38>)
 8011f74:	4c0d      	ldr	r4, [pc, #52]	@ (8011fac <__libc_init_array+0x3c>)
 8011f76:	1b64      	subs	r4, r4, r5
 8011f78:	10a4      	asrs	r4, r4, #2
 8011f7a:	2600      	movs	r6, #0
 8011f7c:	42a6      	cmp	r6, r4
 8011f7e:	d109      	bne.n	8011f94 <__libc_init_array+0x24>
 8011f80:	4d0b      	ldr	r5, [pc, #44]	@ (8011fb0 <__libc_init_array+0x40>)
 8011f82:	4c0c      	ldr	r4, [pc, #48]	@ (8011fb4 <__libc_init_array+0x44>)
 8011f84:	f004 fc30 	bl	80167e8 <_init>
 8011f88:	1b64      	subs	r4, r4, r5
 8011f8a:	10a4      	asrs	r4, r4, #2
 8011f8c:	2600      	movs	r6, #0
 8011f8e:	42a6      	cmp	r6, r4
 8011f90:	d105      	bne.n	8011f9e <__libc_init_array+0x2e>
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f98:	4798      	blx	r3
 8011f9a:	3601      	adds	r6, #1
 8011f9c:	e7ee      	b.n	8011f7c <__libc_init_array+0xc>
 8011f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fa2:	4798      	blx	r3
 8011fa4:	3601      	adds	r6, #1
 8011fa6:	e7f2      	b.n	8011f8e <__libc_init_array+0x1e>
 8011fa8:	08017790 	.word	0x08017790
 8011fac:	08017790 	.word	0x08017790
 8011fb0:	08017790 	.word	0x08017790
 8011fb4:	08017794 	.word	0x08017794

08011fb8 <__retarget_lock_init_recursive>:
 8011fb8:	4770      	bx	lr

08011fba <__retarget_lock_acquire_recursive>:
 8011fba:	4770      	bx	lr

08011fbc <__retarget_lock_release_recursive>:
 8011fbc:	4770      	bx	lr

08011fbe <memcpy>:
 8011fbe:	440a      	add	r2, r1
 8011fc0:	4291      	cmp	r1, r2
 8011fc2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011fc6:	d100      	bne.n	8011fca <memcpy+0xc>
 8011fc8:	4770      	bx	lr
 8011fca:	b510      	push	{r4, lr}
 8011fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fd4:	4291      	cmp	r1, r2
 8011fd6:	d1f9      	bne.n	8011fcc <memcpy+0xe>
 8011fd8:	bd10      	pop	{r4, pc}
	...

08011fdc <nanf>:
 8011fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fe4 <nanf+0x8>
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	7fc00000 	.word	0x7fc00000

08011fe8 <quorem>:
 8011fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fec:	6903      	ldr	r3, [r0, #16]
 8011fee:	690c      	ldr	r4, [r1, #16]
 8011ff0:	42a3      	cmp	r3, r4
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	db7e      	blt.n	80120f4 <quorem+0x10c>
 8011ff6:	3c01      	subs	r4, #1
 8011ff8:	f101 0814 	add.w	r8, r1, #20
 8011ffc:	00a3      	lsls	r3, r4, #2
 8011ffe:	f100 0514 	add.w	r5, r0, #20
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801200e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012012:	3301      	adds	r3, #1
 8012014:	429a      	cmp	r2, r3
 8012016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801201a:	fbb2 f6f3 	udiv	r6, r2, r3
 801201e:	d32e      	bcc.n	801207e <quorem+0x96>
 8012020:	f04f 0a00 	mov.w	sl, #0
 8012024:	46c4      	mov	ip, r8
 8012026:	46ae      	mov	lr, r5
 8012028:	46d3      	mov	fp, sl
 801202a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801202e:	b298      	uxth	r0, r3
 8012030:	fb06 a000 	mla	r0, r6, r0, sl
 8012034:	0c02      	lsrs	r2, r0, #16
 8012036:	0c1b      	lsrs	r3, r3, #16
 8012038:	fb06 2303 	mla	r3, r6, r3, r2
 801203c:	f8de 2000 	ldr.w	r2, [lr]
 8012040:	b280      	uxth	r0, r0
 8012042:	b292      	uxth	r2, r2
 8012044:	1a12      	subs	r2, r2, r0
 8012046:	445a      	add	r2, fp
 8012048:	f8de 0000 	ldr.w	r0, [lr]
 801204c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012050:	b29b      	uxth	r3, r3
 8012052:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012056:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801205a:	b292      	uxth	r2, r2
 801205c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012060:	45e1      	cmp	r9, ip
 8012062:	f84e 2b04 	str.w	r2, [lr], #4
 8012066:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801206a:	d2de      	bcs.n	801202a <quorem+0x42>
 801206c:	9b00      	ldr	r3, [sp, #0]
 801206e:	58eb      	ldr	r3, [r5, r3]
 8012070:	b92b      	cbnz	r3, 801207e <quorem+0x96>
 8012072:	9b01      	ldr	r3, [sp, #4]
 8012074:	3b04      	subs	r3, #4
 8012076:	429d      	cmp	r5, r3
 8012078:	461a      	mov	r2, r3
 801207a:	d32f      	bcc.n	80120dc <quorem+0xf4>
 801207c:	613c      	str	r4, [r7, #16]
 801207e:	4638      	mov	r0, r7
 8012080:	f001 f954 	bl	801332c <__mcmp>
 8012084:	2800      	cmp	r0, #0
 8012086:	db25      	blt.n	80120d4 <quorem+0xec>
 8012088:	4629      	mov	r1, r5
 801208a:	2000      	movs	r0, #0
 801208c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012090:	f8d1 c000 	ldr.w	ip, [r1]
 8012094:	fa1f fe82 	uxth.w	lr, r2
 8012098:	fa1f f38c 	uxth.w	r3, ip
 801209c:	eba3 030e 	sub.w	r3, r3, lr
 80120a0:	4403      	add	r3, r0
 80120a2:	0c12      	lsrs	r2, r2, #16
 80120a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80120a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120b2:	45c1      	cmp	r9, r8
 80120b4:	f841 3b04 	str.w	r3, [r1], #4
 80120b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80120bc:	d2e6      	bcs.n	801208c <quorem+0xa4>
 80120be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120c6:	b922      	cbnz	r2, 80120d2 <quorem+0xea>
 80120c8:	3b04      	subs	r3, #4
 80120ca:	429d      	cmp	r5, r3
 80120cc:	461a      	mov	r2, r3
 80120ce:	d30b      	bcc.n	80120e8 <quorem+0x100>
 80120d0:	613c      	str	r4, [r7, #16]
 80120d2:	3601      	adds	r6, #1
 80120d4:	4630      	mov	r0, r6
 80120d6:	b003      	add	sp, #12
 80120d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120dc:	6812      	ldr	r2, [r2, #0]
 80120de:	3b04      	subs	r3, #4
 80120e0:	2a00      	cmp	r2, #0
 80120e2:	d1cb      	bne.n	801207c <quorem+0x94>
 80120e4:	3c01      	subs	r4, #1
 80120e6:	e7c6      	b.n	8012076 <quorem+0x8e>
 80120e8:	6812      	ldr	r2, [r2, #0]
 80120ea:	3b04      	subs	r3, #4
 80120ec:	2a00      	cmp	r2, #0
 80120ee:	d1ef      	bne.n	80120d0 <quorem+0xe8>
 80120f0:	3c01      	subs	r4, #1
 80120f2:	e7ea      	b.n	80120ca <quorem+0xe2>
 80120f4:	2000      	movs	r0, #0
 80120f6:	e7ee      	b.n	80120d6 <quorem+0xee>

080120f8 <_dtoa_r>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	ed2d 8b02 	vpush	{d8}
 8012100:	69c7      	ldr	r7, [r0, #28]
 8012102:	b091      	sub	sp, #68	@ 0x44
 8012104:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012108:	ec55 4b10 	vmov	r4, r5, d0
 801210c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801210e:	9107      	str	r1, [sp, #28]
 8012110:	4681      	mov	r9, r0
 8012112:	9209      	str	r2, [sp, #36]	@ 0x24
 8012114:	930d      	str	r3, [sp, #52]	@ 0x34
 8012116:	b97f      	cbnz	r7, 8012138 <_dtoa_r+0x40>
 8012118:	2010      	movs	r0, #16
 801211a:	f000 fd95 	bl	8012c48 <malloc>
 801211e:	4602      	mov	r2, r0
 8012120:	f8c9 001c 	str.w	r0, [r9, #28]
 8012124:	b920      	cbnz	r0, 8012130 <_dtoa_r+0x38>
 8012126:	4ba0      	ldr	r3, [pc, #640]	@ (80123a8 <_dtoa_r+0x2b0>)
 8012128:	21ef      	movs	r1, #239	@ 0xef
 801212a:	48a0      	ldr	r0, [pc, #640]	@ (80123ac <_dtoa_r+0x2b4>)
 801212c:	f003 f8c0 	bl	80152b0 <__assert_func>
 8012130:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012134:	6007      	str	r7, [r0, #0]
 8012136:	60c7      	str	r7, [r0, #12]
 8012138:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801213c:	6819      	ldr	r1, [r3, #0]
 801213e:	b159      	cbz	r1, 8012158 <_dtoa_r+0x60>
 8012140:	685a      	ldr	r2, [r3, #4]
 8012142:	604a      	str	r2, [r1, #4]
 8012144:	2301      	movs	r3, #1
 8012146:	4093      	lsls	r3, r2
 8012148:	608b      	str	r3, [r1, #8]
 801214a:	4648      	mov	r0, r9
 801214c:	f000 fe72 	bl	8012e34 <_Bfree>
 8012150:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012154:	2200      	movs	r2, #0
 8012156:	601a      	str	r2, [r3, #0]
 8012158:	1e2b      	subs	r3, r5, #0
 801215a:	bfbb      	ittet	lt
 801215c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012160:	9303      	strlt	r3, [sp, #12]
 8012162:	2300      	movge	r3, #0
 8012164:	2201      	movlt	r2, #1
 8012166:	bfac      	ite	ge
 8012168:	6033      	strge	r3, [r6, #0]
 801216a:	6032      	strlt	r2, [r6, #0]
 801216c:	4b90      	ldr	r3, [pc, #576]	@ (80123b0 <_dtoa_r+0x2b8>)
 801216e:	9e03      	ldr	r6, [sp, #12]
 8012170:	43b3      	bics	r3, r6
 8012172:	d110      	bne.n	8012196 <_dtoa_r+0x9e>
 8012174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012176:	f242 730f 	movw	r3, #9999	@ 0x270f
 801217a:	6013      	str	r3, [r2, #0]
 801217c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012180:	4323      	orrs	r3, r4
 8012182:	f000 84e6 	beq.w	8012b52 <_dtoa_r+0xa5a>
 8012186:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012188:	4f8a      	ldr	r7, [pc, #552]	@ (80123b4 <_dtoa_r+0x2bc>)
 801218a:	2b00      	cmp	r3, #0
 801218c:	f000 84e8 	beq.w	8012b60 <_dtoa_r+0xa68>
 8012190:	1cfb      	adds	r3, r7, #3
 8012192:	f000 bce3 	b.w	8012b5c <_dtoa_r+0xa64>
 8012196:	ed9d 8b02 	vldr	d8, [sp, #8]
 801219a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a2:	d10a      	bne.n	80121ba <_dtoa_r+0xc2>
 80121a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80121a6:	2301      	movs	r3, #1
 80121a8:	6013      	str	r3, [r2, #0]
 80121aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80121ac:	b113      	cbz	r3, 80121b4 <_dtoa_r+0xbc>
 80121ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80121b0:	4b81      	ldr	r3, [pc, #516]	@ (80123b8 <_dtoa_r+0x2c0>)
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	4f81      	ldr	r7, [pc, #516]	@ (80123bc <_dtoa_r+0x2c4>)
 80121b6:	f000 bcd3 	b.w	8012b60 <_dtoa_r+0xa68>
 80121ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80121bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80121be:	4648      	mov	r0, r9
 80121c0:	eeb0 0b48 	vmov.f64	d0, d8
 80121c4:	f001 f9d2 	bl	801356c <__d2b>
 80121c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80121cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121ce:	9001      	str	r0, [sp, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d045      	beq.n	8012260 <_dtoa_r+0x168>
 80121d4:	eeb0 7b48 	vmov.f64	d7, d8
 80121d8:	ee18 1a90 	vmov	r1, s17
 80121dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80121e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80121e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80121e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80121ec:	2500      	movs	r5, #0
 80121ee:	ee07 1a90 	vmov	s15, r1
 80121f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80121f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012390 <_dtoa_r+0x298>
 80121fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012398 <_dtoa_r+0x2a0>
 8012202:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012206:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80123a0 <_dtoa_r+0x2a8>
 801220a:	ee07 3a90 	vmov	s15, r3
 801220e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012212:	eeb0 7b46 	vmov.f64	d7, d6
 8012216:	eea4 7b05 	vfma.f64	d7, d4, d5
 801221a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801221e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012226:	ee16 8a90 	vmov	r8, s13
 801222a:	d508      	bpl.n	801223e <_dtoa_r+0x146>
 801222c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012230:	eeb4 6b47 	vcmp.f64	d6, d7
 8012234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012238:	bf18      	it	ne
 801223a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 801223e:	f1b8 0f16 	cmp.w	r8, #22
 8012242:	d82b      	bhi.n	801229c <_dtoa_r+0x1a4>
 8012244:	495e      	ldr	r1, [pc, #376]	@ (80123c0 <_dtoa_r+0x2c8>)
 8012246:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801224a:	ed91 7b00 	vldr	d7, [r1]
 801224e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012256:	d501      	bpl.n	801225c <_dtoa_r+0x164>
 8012258:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801225c:	2100      	movs	r1, #0
 801225e:	e01e      	b.n	801229e <_dtoa_r+0x1a6>
 8012260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012262:	4413      	add	r3, r2
 8012264:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012268:	2920      	cmp	r1, #32
 801226a:	bfc1      	itttt	gt
 801226c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012270:	408e      	lslgt	r6, r1
 8012272:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012276:	fa24 f101 	lsrgt.w	r1, r4, r1
 801227a:	bfd6      	itet	le
 801227c:	f1c1 0120 	rsble	r1, r1, #32
 8012280:	4331      	orrgt	r1, r6
 8012282:	fa04 f101 	lslle.w	r1, r4, r1
 8012286:	ee07 1a90 	vmov	s15, r1
 801228a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801228e:	3b01      	subs	r3, #1
 8012290:	ee17 1a90 	vmov	r1, s15
 8012294:	2501      	movs	r5, #1
 8012296:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801229a:	e7a8      	b.n	80121ee <_dtoa_r+0xf6>
 801229c:	2101      	movs	r1, #1
 801229e:	1ad2      	subs	r2, r2, r3
 80122a0:	1e53      	subs	r3, r2, #1
 80122a2:	9306      	str	r3, [sp, #24]
 80122a4:	bf45      	ittet	mi
 80122a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80122aa:	9304      	strmi	r3, [sp, #16]
 80122ac:	2300      	movpl	r3, #0
 80122ae:	2300      	movmi	r3, #0
 80122b0:	bf4c      	ite	mi
 80122b2:	9306      	strmi	r3, [sp, #24]
 80122b4:	9304      	strpl	r3, [sp, #16]
 80122b6:	f1b8 0f00 	cmp.w	r8, #0
 80122ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80122bc:	db18      	blt.n	80122f0 <_dtoa_r+0x1f8>
 80122be:	9b06      	ldr	r3, [sp, #24]
 80122c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80122c4:	4443      	add	r3, r8
 80122c6:	9306      	str	r3, [sp, #24]
 80122c8:	2300      	movs	r3, #0
 80122ca:	9a07      	ldr	r2, [sp, #28]
 80122cc:	2a09      	cmp	r2, #9
 80122ce:	d845      	bhi.n	801235c <_dtoa_r+0x264>
 80122d0:	2a05      	cmp	r2, #5
 80122d2:	bfc4      	itt	gt
 80122d4:	3a04      	subgt	r2, #4
 80122d6:	9207      	strgt	r2, [sp, #28]
 80122d8:	9a07      	ldr	r2, [sp, #28]
 80122da:	f1a2 0202 	sub.w	r2, r2, #2
 80122de:	bfcc      	ite	gt
 80122e0:	2400      	movgt	r4, #0
 80122e2:	2401      	movle	r4, #1
 80122e4:	2a03      	cmp	r2, #3
 80122e6:	d844      	bhi.n	8012372 <_dtoa_r+0x27a>
 80122e8:	e8df f002 	tbb	[pc, r2]
 80122ec:	0b173634 	.word	0x0b173634
 80122f0:	9b04      	ldr	r3, [sp, #16]
 80122f2:	2200      	movs	r2, #0
 80122f4:	eba3 0308 	sub.w	r3, r3, r8
 80122f8:	9304      	str	r3, [sp, #16]
 80122fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80122fc:	f1c8 0300 	rsb	r3, r8, #0
 8012300:	e7e3      	b.n	80122ca <_dtoa_r+0x1d2>
 8012302:	2201      	movs	r2, #1
 8012304:	9208      	str	r2, [sp, #32]
 8012306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012308:	eb08 0b02 	add.w	fp, r8, r2
 801230c:	f10b 0a01 	add.w	sl, fp, #1
 8012310:	4652      	mov	r2, sl
 8012312:	2a01      	cmp	r2, #1
 8012314:	bfb8      	it	lt
 8012316:	2201      	movlt	r2, #1
 8012318:	e006      	b.n	8012328 <_dtoa_r+0x230>
 801231a:	2201      	movs	r2, #1
 801231c:	9208      	str	r2, [sp, #32]
 801231e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012320:	2a00      	cmp	r2, #0
 8012322:	dd29      	ble.n	8012378 <_dtoa_r+0x280>
 8012324:	4693      	mov	fp, r2
 8012326:	4692      	mov	sl, r2
 8012328:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801232c:	2100      	movs	r1, #0
 801232e:	2004      	movs	r0, #4
 8012330:	f100 0614 	add.w	r6, r0, #20
 8012334:	4296      	cmp	r6, r2
 8012336:	d926      	bls.n	8012386 <_dtoa_r+0x28e>
 8012338:	6079      	str	r1, [r7, #4]
 801233a:	4648      	mov	r0, r9
 801233c:	9305      	str	r3, [sp, #20]
 801233e:	f000 fd39 	bl	8012db4 <_Balloc>
 8012342:	9b05      	ldr	r3, [sp, #20]
 8012344:	4607      	mov	r7, r0
 8012346:	2800      	cmp	r0, #0
 8012348:	d13e      	bne.n	80123c8 <_dtoa_r+0x2d0>
 801234a:	4b1e      	ldr	r3, [pc, #120]	@ (80123c4 <_dtoa_r+0x2cc>)
 801234c:	4602      	mov	r2, r0
 801234e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012352:	e6ea      	b.n	801212a <_dtoa_r+0x32>
 8012354:	2200      	movs	r2, #0
 8012356:	e7e1      	b.n	801231c <_dtoa_r+0x224>
 8012358:	2200      	movs	r2, #0
 801235a:	e7d3      	b.n	8012304 <_dtoa_r+0x20c>
 801235c:	2401      	movs	r4, #1
 801235e:	2200      	movs	r2, #0
 8012360:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012364:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012368:	2100      	movs	r1, #0
 801236a:	46da      	mov	sl, fp
 801236c:	2212      	movs	r2, #18
 801236e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012370:	e7da      	b.n	8012328 <_dtoa_r+0x230>
 8012372:	2201      	movs	r2, #1
 8012374:	9208      	str	r2, [sp, #32]
 8012376:	e7f5      	b.n	8012364 <_dtoa_r+0x26c>
 8012378:	f04f 0b01 	mov.w	fp, #1
 801237c:	46da      	mov	sl, fp
 801237e:	465a      	mov	r2, fp
 8012380:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012384:	e7d0      	b.n	8012328 <_dtoa_r+0x230>
 8012386:	3101      	adds	r1, #1
 8012388:	0040      	lsls	r0, r0, #1
 801238a:	e7d1      	b.n	8012330 <_dtoa_r+0x238>
 801238c:	f3af 8000 	nop.w
 8012390:	636f4361 	.word	0x636f4361
 8012394:	3fd287a7 	.word	0x3fd287a7
 8012398:	8b60c8b3 	.word	0x8b60c8b3
 801239c:	3fc68a28 	.word	0x3fc68a28
 80123a0:	509f79fb 	.word	0x509f79fb
 80123a4:	3fd34413 	.word	0x3fd34413
 80123a8:	080171b0 	.word	0x080171b0
 80123ac:	080171c7 	.word	0x080171c7
 80123b0:	7ff00000 	.word	0x7ff00000
 80123b4:	080171ac 	.word	0x080171ac
 80123b8:	080172b3 	.word	0x080172b3
 80123bc:	080172b2 	.word	0x080172b2
 80123c0:	08017390 	.word	0x08017390
 80123c4:	0801721f 	.word	0x0801721f
 80123c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80123cc:	f1ba 0f0e 	cmp.w	sl, #14
 80123d0:	6010      	str	r0, [r2, #0]
 80123d2:	d86e      	bhi.n	80124b2 <_dtoa_r+0x3ba>
 80123d4:	2c00      	cmp	r4, #0
 80123d6:	d06c      	beq.n	80124b2 <_dtoa_r+0x3ba>
 80123d8:	f1b8 0f00 	cmp.w	r8, #0
 80123dc:	f340 80b4 	ble.w	8012548 <_dtoa_r+0x450>
 80123e0:	4ac8      	ldr	r2, [pc, #800]	@ (8012704 <_dtoa_r+0x60c>)
 80123e2:	f008 010f 	and.w	r1, r8, #15
 80123e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80123ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80123ee:	ed92 7b00 	vldr	d7, [r2]
 80123f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80123f6:	f000 809b 	beq.w	8012530 <_dtoa_r+0x438>
 80123fa:	4ac3      	ldr	r2, [pc, #780]	@ (8012708 <_dtoa_r+0x610>)
 80123fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8012400:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012404:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012408:	f001 010f 	and.w	r1, r1, #15
 801240c:	2203      	movs	r2, #3
 801240e:	48be      	ldr	r0, [pc, #760]	@ (8012708 <_dtoa_r+0x610>)
 8012410:	2900      	cmp	r1, #0
 8012412:	f040 808f 	bne.w	8012534 <_dtoa_r+0x43c>
 8012416:	ed9d 6b02 	vldr	d6, [sp, #8]
 801241a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801241e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012422:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012424:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012428:	2900      	cmp	r1, #0
 801242a:	f000 80b3 	beq.w	8012594 <_dtoa_r+0x49c>
 801242e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012432:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243a:	f140 80ab 	bpl.w	8012594 <_dtoa_r+0x49c>
 801243e:	f1ba 0f00 	cmp.w	sl, #0
 8012442:	f000 80a7 	beq.w	8012594 <_dtoa_r+0x49c>
 8012446:	f1bb 0f00 	cmp.w	fp, #0
 801244a:	dd30      	ble.n	80124ae <_dtoa_r+0x3b6>
 801244c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012458:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801245c:	9105      	str	r1, [sp, #20]
 801245e:	3201      	adds	r2, #1
 8012460:	465c      	mov	r4, fp
 8012462:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012466:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801246a:	ee07 2a90 	vmov	s15, r2
 801246e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012472:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012476:	ee15 2a90 	vmov	r2, s11
 801247a:	ec51 0b15 	vmov	r0, r1, d5
 801247e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012482:	2c00      	cmp	r4, #0
 8012484:	f040 808a 	bne.w	801259c <_dtoa_r+0x4a4>
 8012488:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801248c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012490:	ec41 0b17 	vmov	d7, r0, r1
 8012494:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249c:	f300 826a 	bgt.w	8012974 <_dtoa_r+0x87c>
 80124a0:	eeb1 7b47 	vneg.f64	d7, d7
 80124a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	d423      	bmi.n	80124f6 <_dtoa_r+0x3fe>
 80124ae:	ed8d 8b02 	vstr	d8, [sp, #8]
 80124b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80124b4:	2a00      	cmp	r2, #0
 80124b6:	f2c0 8129 	blt.w	801270c <_dtoa_r+0x614>
 80124ba:	f1b8 0f0e 	cmp.w	r8, #14
 80124be:	f300 8125 	bgt.w	801270c <_dtoa_r+0x614>
 80124c2:	4b90      	ldr	r3, [pc, #576]	@ (8012704 <_dtoa_r+0x60c>)
 80124c4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80124c8:	ed93 6b00 	vldr	d6, [r3]
 80124cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f280 80c8 	bge.w	8012664 <_dtoa_r+0x56c>
 80124d4:	f1ba 0f00 	cmp.w	sl, #0
 80124d8:	f300 80c4 	bgt.w	8012664 <_dtoa_r+0x56c>
 80124dc:	d10b      	bne.n	80124f6 <_dtoa_r+0x3fe>
 80124de:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80124e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80124e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f2:	f2c0 823c 	blt.w	801296e <_dtoa_r+0x876>
 80124f6:	2400      	movs	r4, #0
 80124f8:	4625      	mov	r5, r4
 80124fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124fc:	43db      	mvns	r3, r3
 80124fe:	9305      	str	r3, [sp, #20]
 8012500:	463e      	mov	r6, r7
 8012502:	f04f 0800 	mov.w	r8, #0
 8012506:	4621      	mov	r1, r4
 8012508:	4648      	mov	r0, r9
 801250a:	f000 fc93 	bl	8012e34 <_Bfree>
 801250e:	2d00      	cmp	r5, #0
 8012510:	f000 80a2 	beq.w	8012658 <_dtoa_r+0x560>
 8012514:	f1b8 0f00 	cmp.w	r8, #0
 8012518:	d005      	beq.n	8012526 <_dtoa_r+0x42e>
 801251a:	45a8      	cmp	r8, r5
 801251c:	d003      	beq.n	8012526 <_dtoa_r+0x42e>
 801251e:	4641      	mov	r1, r8
 8012520:	4648      	mov	r0, r9
 8012522:	f000 fc87 	bl	8012e34 <_Bfree>
 8012526:	4629      	mov	r1, r5
 8012528:	4648      	mov	r0, r9
 801252a:	f000 fc83 	bl	8012e34 <_Bfree>
 801252e:	e093      	b.n	8012658 <_dtoa_r+0x560>
 8012530:	2202      	movs	r2, #2
 8012532:	e76c      	b.n	801240e <_dtoa_r+0x316>
 8012534:	07cc      	lsls	r4, r1, #31
 8012536:	d504      	bpl.n	8012542 <_dtoa_r+0x44a>
 8012538:	ed90 6b00 	vldr	d6, [r0]
 801253c:	3201      	adds	r2, #1
 801253e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012542:	1049      	asrs	r1, r1, #1
 8012544:	3008      	adds	r0, #8
 8012546:	e763      	b.n	8012410 <_dtoa_r+0x318>
 8012548:	d022      	beq.n	8012590 <_dtoa_r+0x498>
 801254a:	f1c8 0100 	rsb	r1, r8, #0
 801254e:	4a6d      	ldr	r2, [pc, #436]	@ (8012704 <_dtoa_r+0x60c>)
 8012550:	f001 000f 	and.w	r0, r1, #15
 8012554:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012558:	ed92 7b00 	vldr	d7, [r2]
 801255c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012564:	4868      	ldr	r0, [pc, #416]	@ (8012708 <_dtoa_r+0x610>)
 8012566:	1109      	asrs	r1, r1, #4
 8012568:	2400      	movs	r4, #0
 801256a:	2202      	movs	r2, #2
 801256c:	b929      	cbnz	r1, 801257a <_dtoa_r+0x482>
 801256e:	2c00      	cmp	r4, #0
 8012570:	f43f af57 	beq.w	8012422 <_dtoa_r+0x32a>
 8012574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012578:	e753      	b.n	8012422 <_dtoa_r+0x32a>
 801257a:	07ce      	lsls	r6, r1, #31
 801257c:	d505      	bpl.n	801258a <_dtoa_r+0x492>
 801257e:	ed90 6b00 	vldr	d6, [r0]
 8012582:	3201      	adds	r2, #1
 8012584:	2401      	movs	r4, #1
 8012586:	ee27 7b06 	vmul.f64	d7, d7, d6
 801258a:	1049      	asrs	r1, r1, #1
 801258c:	3008      	adds	r0, #8
 801258e:	e7ed      	b.n	801256c <_dtoa_r+0x474>
 8012590:	2202      	movs	r2, #2
 8012592:	e746      	b.n	8012422 <_dtoa_r+0x32a>
 8012594:	f8cd 8014 	str.w	r8, [sp, #20]
 8012598:	4654      	mov	r4, sl
 801259a:	e762      	b.n	8012462 <_dtoa_r+0x36a>
 801259c:	4a59      	ldr	r2, [pc, #356]	@ (8012704 <_dtoa_r+0x60c>)
 801259e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80125a2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80125a6:	9a08      	ldr	r2, [sp, #32]
 80125a8:	ec41 0b17 	vmov	d7, r0, r1
 80125ac:	443c      	add	r4, r7
 80125ae:	b34a      	cbz	r2, 8012604 <_dtoa_r+0x50c>
 80125b0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80125b4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80125b8:	463e      	mov	r6, r7
 80125ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80125be:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80125c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80125c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80125ca:	ee14 2a90 	vmov	r2, s9
 80125ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80125d2:	3230      	adds	r2, #48	@ 0x30
 80125d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80125d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e0:	f806 2b01 	strb.w	r2, [r6], #1
 80125e4:	d438      	bmi.n	8012658 <_dtoa_r+0x560>
 80125e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80125ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80125ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f2:	d46e      	bmi.n	80126d2 <_dtoa_r+0x5da>
 80125f4:	42a6      	cmp	r6, r4
 80125f6:	f43f af5a 	beq.w	80124ae <_dtoa_r+0x3b6>
 80125fa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80125fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012602:	e7e0      	b.n	80125c6 <_dtoa_r+0x4ce>
 8012604:	4621      	mov	r1, r4
 8012606:	463e      	mov	r6, r7
 8012608:	ee27 7b04 	vmul.f64	d7, d7, d4
 801260c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012610:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012614:	ee14 2a90 	vmov	r2, s9
 8012618:	3230      	adds	r2, #48	@ 0x30
 801261a:	f806 2b01 	strb.w	r2, [r6], #1
 801261e:	42a6      	cmp	r6, r4
 8012620:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012624:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012628:	d119      	bne.n	801265e <_dtoa_r+0x566>
 801262a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801262e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012632:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263a:	dc4a      	bgt.n	80126d2 <_dtoa_r+0x5da>
 801263c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012640:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012648:	f57f af31 	bpl.w	80124ae <_dtoa_r+0x3b6>
 801264c:	460e      	mov	r6, r1
 801264e:	3901      	subs	r1, #1
 8012650:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012654:	2b30      	cmp	r3, #48	@ 0x30
 8012656:	d0f9      	beq.n	801264c <_dtoa_r+0x554>
 8012658:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801265c:	e027      	b.n	80126ae <_dtoa_r+0x5b6>
 801265e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012662:	e7d5      	b.n	8012610 <_dtoa_r+0x518>
 8012664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012668:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801266c:	463e      	mov	r6, r7
 801266e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012672:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012676:	ee15 3a10 	vmov	r3, s10
 801267a:	3330      	adds	r3, #48	@ 0x30
 801267c:	f806 3b01 	strb.w	r3, [r6], #1
 8012680:	1bf3      	subs	r3, r6, r7
 8012682:	459a      	cmp	sl, r3
 8012684:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012688:	eea3 7b46 	vfms.f64	d7, d3, d6
 801268c:	d132      	bne.n	80126f4 <_dtoa_r+0x5fc>
 801268e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	dc18      	bgt.n	80126ce <_dtoa_r+0x5d6>
 801269c:	eeb4 7b46 	vcmp.f64	d7, d6
 80126a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a4:	d103      	bne.n	80126ae <_dtoa_r+0x5b6>
 80126a6:	ee15 3a10 	vmov	r3, s10
 80126aa:	07db      	lsls	r3, r3, #31
 80126ac:	d40f      	bmi.n	80126ce <_dtoa_r+0x5d6>
 80126ae:	9901      	ldr	r1, [sp, #4]
 80126b0:	4648      	mov	r0, r9
 80126b2:	f000 fbbf 	bl	8012e34 <_Bfree>
 80126b6:	2300      	movs	r3, #0
 80126b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80126ba:	7033      	strb	r3, [r6, #0]
 80126bc:	f108 0301 	add.w	r3, r8, #1
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f000 824b 	beq.w	8012b60 <_dtoa_r+0xa68>
 80126ca:	601e      	str	r6, [r3, #0]
 80126cc:	e248      	b.n	8012b60 <_dtoa_r+0xa68>
 80126ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80126d2:	4633      	mov	r3, r6
 80126d4:	461e      	mov	r6, r3
 80126d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126da:	2a39      	cmp	r2, #57	@ 0x39
 80126dc:	d106      	bne.n	80126ec <_dtoa_r+0x5f4>
 80126de:	429f      	cmp	r7, r3
 80126e0:	d1f8      	bne.n	80126d4 <_dtoa_r+0x5dc>
 80126e2:	9a05      	ldr	r2, [sp, #20]
 80126e4:	3201      	adds	r2, #1
 80126e6:	9205      	str	r2, [sp, #20]
 80126e8:	2230      	movs	r2, #48	@ 0x30
 80126ea:	703a      	strb	r2, [r7, #0]
 80126ec:	781a      	ldrb	r2, [r3, #0]
 80126ee:	3201      	adds	r2, #1
 80126f0:	701a      	strb	r2, [r3, #0]
 80126f2:	e7b1      	b.n	8012658 <_dtoa_r+0x560>
 80126f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80126f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012700:	d1b5      	bne.n	801266e <_dtoa_r+0x576>
 8012702:	e7d4      	b.n	80126ae <_dtoa_r+0x5b6>
 8012704:	08017390 	.word	0x08017390
 8012708:	08017368 	.word	0x08017368
 801270c:	9908      	ldr	r1, [sp, #32]
 801270e:	2900      	cmp	r1, #0
 8012710:	f000 80e9 	beq.w	80128e6 <_dtoa_r+0x7ee>
 8012714:	9907      	ldr	r1, [sp, #28]
 8012716:	2901      	cmp	r1, #1
 8012718:	f300 80cb 	bgt.w	80128b2 <_dtoa_r+0x7ba>
 801271c:	2d00      	cmp	r5, #0
 801271e:	f000 80c4 	beq.w	80128aa <_dtoa_r+0x7b2>
 8012722:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012726:	9e04      	ldr	r6, [sp, #16]
 8012728:	461c      	mov	r4, r3
 801272a:	9305      	str	r3, [sp, #20]
 801272c:	9b04      	ldr	r3, [sp, #16]
 801272e:	4413      	add	r3, r2
 8012730:	9304      	str	r3, [sp, #16]
 8012732:	9b06      	ldr	r3, [sp, #24]
 8012734:	2101      	movs	r1, #1
 8012736:	4413      	add	r3, r2
 8012738:	4648      	mov	r0, r9
 801273a:	9306      	str	r3, [sp, #24]
 801273c:	f000 fc78 	bl	8013030 <__i2b>
 8012740:	9b05      	ldr	r3, [sp, #20]
 8012742:	4605      	mov	r5, r0
 8012744:	b166      	cbz	r6, 8012760 <_dtoa_r+0x668>
 8012746:	9a06      	ldr	r2, [sp, #24]
 8012748:	2a00      	cmp	r2, #0
 801274a:	dd09      	ble.n	8012760 <_dtoa_r+0x668>
 801274c:	42b2      	cmp	r2, r6
 801274e:	9904      	ldr	r1, [sp, #16]
 8012750:	bfa8      	it	ge
 8012752:	4632      	movge	r2, r6
 8012754:	1a89      	subs	r1, r1, r2
 8012756:	9104      	str	r1, [sp, #16]
 8012758:	9906      	ldr	r1, [sp, #24]
 801275a:	1ab6      	subs	r6, r6, r2
 801275c:	1a8a      	subs	r2, r1, r2
 801275e:	9206      	str	r2, [sp, #24]
 8012760:	b30b      	cbz	r3, 80127a6 <_dtoa_r+0x6ae>
 8012762:	9a08      	ldr	r2, [sp, #32]
 8012764:	2a00      	cmp	r2, #0
 8012766:	f000 80c5 	beq.w	80128f4 <_dtoa_r+0x7fc>
 801276a:	2c00      	cmp	r4, #0
 801276c:	f000 80bf 	beq.w	80128ee <_dtoa_r+0x7f6>
 8012770:	4629      	mov	r1, r5
 8012772:	4622      	mov	r2, r4
 8012774:	4648      	mov	r0, r9
 8012776:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012778:	f000 fd12 	bl	80131a0 <__pow5mult>
 801277c:	9a01      	ldr	r2, [sp, #4]
 801277e:	4601      	mov	r1, r0
 8012780:	4605      	mov	r5, r0
 8012782:	4648      	mov	r0, r9
 8012784:	f000 fc6a 	bl	801305c <__multiply>
 8012788:	9901      	ldr	r1, [sp, #4]
 801278a:	9005      	str	r0, [sp, #20]
 801278c:	4648      	mov	r0, r9
 801278e:	f000 fb51 	bl	8012e34 <_Bfree>
 8012792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012794:	1b1b      	subs	r3, r3, r4
 8012796:	f000 80b0 	beq.w	80128fa <_dtoa_r+0x802>
 801279a:	9905      	ldr	r1, [sp, #20]
 801279c:	461a      	mov	r2, r3
 801279e:	4648      	mov	r0, r9
 80127a0:	f000 fcfe 	bl	80131a0 <__pow5mult>
 80127a4:	9001      	str	r0, [sp, #4]
 80127a6:	2101      	movs	r1, #1
 80127a8:	4648      	mov	r0, r9
 80127aa:	f000 fc41 	bl	8013030 <__i2b>
 80127ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127b0:	4604      	mov	r4, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f000 81da 	beq.w	8012b6c <_dtoa_r+0xa74>
 80127b8:	461a      	mov	r2, r3
 80127ba:	4601      	mov	r1, r0
 80127bc:	4648      	mov	r0, r9
 80127be:	f000 fcef 	bl	80131a0 <__pow5mult>
 80127c2:	9b07      	ldr	r3, [sp, #28]
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	4604      	mov	r4, r0
 80127c8:	f300 80a0 	bgt.w	801290c <_dtoa_r+0x814>
 80127cc:	9b02      	ldr	r3, [sp, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f040 8096 	bne.w	8012900 <_dtoa_r+0x808>
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80127da:	2a00      	cmp	r2, #0
 80127dc:	f040 8092 	bne.w	8012904 <_dtoa_r+0x80c>
 80127e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80127e4:	0d12      	lsrs	r2, r2, #20
 80127e6:	0512      	lsls	r2, r2, #20
 80127e8:	2a00      	cmp	r2, #0
 80127ea:	f000 808d 	beq.w	8012908 <_dtoa_r+0x810>
 80127ee:	9b04      	ldr	r3, [sp, #16]
 80127f0:	3301      	adds	r3, #1
 80127f2:	9304      	str	r3, [sp, #16]
 80127f4:	9b06      	ldr	r3, [sp, #24]
 80127f6:	3301      	adds	r3, #1
 80127f8:	9306      	str	r3, [sp, #24]
 80127fa:	2301      	movs	r3, #1
 80127fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012800:	2b00      	cmp	r3, #0
 8012802:	f000 81b9 	beq.w	8012b78 <_dtoa_r+0xa80>
 8012806:	6922      	ldr	r2, [r4, #16]
 8012808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801280c:	6910      	ldr	r0, [r2, #16]
 801280e:	f000 fbc3 	bl	8012f98 <__hi0bits>
 8012812:	f1c0 0020 	rsb	r0, r0, #32
 8012816:	9b06      	ldr	r3, [sp, #24]
 8012818:	4418      	add	r0, r3
 801281a:	f010 001f 	ands.w	r0, r0, #31
 801281e:	f000 8081 	beq.w	8012924 <_dtoa_r+0x82c>
 8012822:	f1c0 0220 	rsb	r2, r0, #32
 8012826:	2a04      	cmp	r2, #4
 8012828:	dd73      	ble.n	8012912 <_dtoa_r+0x81a>
 801282a:	9b04      	ldr	r3, [sp, #16]
 801282c:	f1c0 001c 	rsb	r0, r0, #28
 8012830:	4403      	add	r3, r0
 8012832:	9304      	str	r3, [sp, #16]
 8012834:	9b06      	ldr	r3, [sp, #24]
 8012836:	4406      	add	r6, r0
 8012838:	4403      	add	r3, r0
 801283a:	9306      	str	r3, [sp, #24]
 801283c:	9b04      	ldr	r3, [sp, #16]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dd05      	ble.n	801284e <_dtoa_r+0x756>
 8012842:	9901      	ldr	r1, [sp, #4]
 8012844:	461a      	mov	r2, r3
 8012846:	4648      	mov	r0, r9
 8012848:	f000 fd04 	bl	8013254 <__lshift>
 801284c:	9001      	str	r0, [sp, #4]
 801284e:	9b06      	ldr	r3, [sp, #24]
 8012850:	2b00      	cmp	r3, #0
 8012852:	dd05      	ble.n	8012860 <_dtoa_r+0x768>
 8012854:	4621      	mov	r1, r4
 8012856:	461a      	mov	r2, r3
 8012858:	4648      	mov	r0, r9
 801285a:	f000 fcfb 	bl	8013254 <__lshift>
 801285e:	4604      	mov	r4, r0
 8012860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012862:	2b00      	cmp	r3, #0
 8012864:	d060      	beq.n	8012928 <_dtoa_r+0x830>
 8012866:	9801      	ldr	r0, [sp, #4]
 8012868:	4621      	mov	r1, r4
 801286a:	f000 fd5f 	bl	801332c <__mcmp>
 801286e:	2800      	cmp	r0, #0
 8012870:	da5a      	bge.n	8012928 <_dtoa_r+0x830>
 8012872:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012876:	9305      	str	r3, [sp, #20]
 8012878:	9901      	ldr	r1, [sp, #4]
 801287a:	2300      	movs	r3, #0
 801287c:	220a      	movs	r2, #10
 801287e:	4648      	mov	r0, r9
 8012880:	f000 fafa 	bl	8012e78 <__multadd>
 8012884:	9b08      	ldr	r3, [sp, #32]
 8012886:	9001      	str	r0, [sp, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	f000 8177 	beq.w	8012b7c <_dtoa_r+0xa84>
 801288e:	4629      	mov	r1, r5
 8012890:	2300      	movs	r3, #0
 8012892:	220a      	movs	r2, #10
 8012894:	4648      	mov	r0, r9
 8012896:	f000 faef 	bl	8012e78 <__multadd>
 801289a:	f1bb 0f00 	cmp.w	fp, #0
 801289e:	4605      	mov	r5, r0
 80128a0:	dc6e      	bgt.n	8012980 <_dtoa_r+0x888>
 80128a2:	9b07      	ldr	r3, [sp, #28]
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	dc48      	bgt.n	801293a <_dtoa_r+0x842>
 80128a8:	e06a      	b.n	8012980 <_dtoa_r+0x888>
 80128aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80128b0:	e739      	b.n	8012726 <_dtoa_r+0x62e>
 80128b2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80128b6:	42a3      	cmp	r3, r4
 80128b8:	db07      	blt.n	80128ca <_dtoa_r+0x7d2>
 80128ba:	f1ba 0f00 	cmp.w	sl, #0
 80128be:	eba3 0404 	sub.w	r4, r3, r4
 80128c2:	db0b      	blt.n	80128dc <_dtoa_r+0x7e4>
 80128c4:	9e04      	ldr	r6, [sp, #16]
 80128c6:	4652      	mov	r2, sl
 80128c8:	e72f      	b.n	801272a <_dtoa_r+0x632>
 80128ca:	1ae2      	subs	r2, r4, r3
 80128cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ce:	9e04      	ldr	r6, [sp, #16]
 80128d0:	4413      	add	r3, r2
 80128d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80128d4:	4652      	mov	r2, sl
 80128d6:	4623      	mov	r3, r4
 80128d8:	2400      	movs	r4, #0
 80128da:	e726      	b.n	801272a <_dtoa_r+0x632>
 80128dc:	9a04      	ldr	r2, [sp, #16]
 80128de:	eba2 060a 	sub.w	r6, r2, sl
 80128e2:	2200      	movs	r2, #0
 80128e4:	e721      	b.n	801272a <_dtoa_r+0x632>
 80128e6:	9e04      	ldr	r6, [sp, #16]
 80128e8:	9d08      	ldr	r5, [sp, #32]
 80128ea:	461c      	mov	r4, r3
 80128ec:	e72a      	b.n	8012744 <_dtoa_r+0x64c>
 80128ee:	9a01      	ldr	r2, [sp, #4]
 80128f0:	9205      	str	r2, [sp, #20]
 80128f2:	e752      	b.n	801279a <_dtoa_r+0x6a2>
 80128f4:	9901      	ldr	r1, [sp, #4]
 80128f6:	461a      	mov	r2, r3
 80128f8:	e751      	b.n	801279e <_dtoa_r+0x6a6>
 80128fa:	9b05      	ldr	r3, [sp, #20]
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	e752      	b.n	80127a6 <_dtoa_r+0x6ae>
 8012900:	2300      	movs	r3, #0
 8012902:	e77b      	b.n	80127fc <_dtoa_r+0x704>
 8012904:	9b02      	ldr	r3, [sp, #8]
 8012906:	e779      	b.n	80127fc <_dtoa_r+0x704>
 8012908:	920b      	str	r2, [sp, #44]	@ 0x2c
 801290a:	e778      	b.n	80127fe <_dtoa_r+0x706>
 801290c:	2300      	movs	r3, #0
 801290e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012910:	e779      	b.n	8012806 <_dtoa_r+0x70e>
 8012912:	d093      	beq.n	801283c <_dtoa_r+0x744>
 8012914:	9b04      	ldr	r3, [sp, #16]
 8012916:	321c      	adds	r2, #28
 8012918:	4413      	add	r3, r2
 801291a:	9304      	str	r3, [sp, #16]
 801291c:	9b06      	ldr	r3, [sp, #24]
 801291e:	4416      	add	r6, r2
 8012920:	4413      	add	r3, r2
 8012922:	e78a      	b.n	801283a <_dtoa_r+0x742>
 8012924:	4602      	mov	r2, r0
 8012926:	e7f5      	b.n	8012914 <_dtoa_r+0x81c>
 8012928:	f1ba 0f00 	cmp.w	sl, #0
 801292c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012930:	46d3      	mov	fp, sl
 8012932:	dc21      	bgt.n	8012978 <_dtoa_r+0x880>
 8012934:	9b07      	ldr	r3, [sp, #28]
 8012936:	2b02      	cmp	r3, #2
 8012938:	dd1e      	ble.n	8012978 <_dtoa_r+0x880>
 801293a:	f1bb 0f00 	cmp.w	fp, #0
 801293e:	f47f addc 	bne.w	80124fa <_dtoa_r+0x402>
 8012942:	4621      	mov	r1, r4
 8012944:	465b      	mov	r3, fp
 8012946:	2205      	movs	r2, #5
 8012948:	4648      	mov	r0, r9
 801294a:	f000 fa95 	bl	8012e78 <__multadd>
 801294e:	4601      	mov	r1, r0
 8012950:	4604      	mov	r4, r0
 8012952:	9801      	ldr	r0, [sp, #4]
 8012954:	f000 fcea 	bl	801332c <__mcmp>
 8012958:	2800      	cmp	r0, #0
 801295a:	f77f adce 	ble.w	80124fa <_dtoa_r+0x402>
 801295e:	463e      	mov	r6, r7
 8012960:	2331      	movs	r3, #49	@ 0x31
 8012962:	f806 3b01 	strb.w	r3, [r6], #1
 8012966:	9b05      	ldr	r3, [sp, #20]
 8012968:	3301      	adds	r3, #1
 801296a:	9305      	str	r3, [sp, #20]
 801296c:	e5c9      	b.n	8012502 <_dtoa_r+0x40a>
 801296e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012972:	4654      	mov	r4, sl
 8012974:	4625      	mov	r5, r4
 8012976:	e7f2      	b.n	801295e <_dtoa_r+0x866>
 8012978:	9b08      	ldr	r3, [sp, #32]
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 8102 	beq.w	8012b84 <_dtoa_r+0xa8c>
 8012980:	2e00      	cmp	r6, #0
 8012982:	dd05      	ble.n	8012990 <_dtoa_r+0x898>
 8012984:	4629      	mov	r1, r5
 8012986:	4632      	mov	r2, r6
 8012988:	4648      	mov	r0, r9
 801298a:	f000 fc63 	bl	8013254 <__lshift>
 801298e:	4605      	mov	r5, r0
 8012990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012992:	2b00      	cmp	r3, #0
 8012994:	d058      	beq.n	8012a48 <_dtoa_r+0x950>
 8012996:	6869      	ldr	r1, [r5, #4]
 8012998:	4648      	mov	r0, r9
 801299a:	f000 fa0b 	bl	8012db4 <_Balloc>
 801299e:	4606      	mov	r6, r0
 80129a0:	b928      	cbnz	r0, 80129ae <_dtoa_r+0x8b6>
 80129a2:	4b82      	ldr	r3, [pc, #520]	@ (8012bac <_dtoa_r+0xab4>)
 80129a4:	4602      	mov	r2, r0
 80129a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80129aa:	f7ff bbbe 	b.w	801212a <_dtoa_r+0x32>
 80129ae:	692a      	ldr	r2, [r5, #16]
 80129b0:	3202      	adds	r2, #2
 80129b2:	0092      	lsls	r2, r2, #2
 80129b4:	f105 010c 	add.w	r1, r5, #12
 80129b8:	300c      	adds	r0, #12
 80129ba:	f7ff fb00 	bl	8011fbe <memcpy>
 80129be:	2201      	movs	r2, #1
 80129c0:	4631      	mov	r1, r6
 80129c2:	4648      	mov	r0, r9
 80129c4:	f000 fc46 	bl	8013254 <__lshift>
 80129c8:	1c7b      	adds	r3, r7, #1
 80129ca:	9304      	str	r3, [sp, #16]
 80129cc:	eb07 030b 	add.w	r3, r7, fp
 80129d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80129d2:	9b02      	ldr	r3, [sp, #8]
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	46a8      	mov	r8, r5
 80129da:	9308      	str	r3, [sp, #32]
 80129dc:	4605      	mov	r5, r0
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	9801      	ldr	r0, [sp, #4]
 80129e2:	4621      	mov	r1, r4
 80129e4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80129e8:	f7ff fafe 	bl	8011fe8 <quorem>
 80129ec:	4641      	mov	r1, r8
 80129ee:	9002      	str	r0, [sp, #8]
 80129f0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80129f4:	9801      	ldr	r0, [sp, #4]
 80129f6:	f000 fc99 	bl	801332c <__mcmp>
 80129fa:	462a      	mov	r2, r5
 80129fc:	9006      	str	r0, [sp, #24]
 80129fe:	4621      	mov	r1, r4
 8012a00:	4648      	mov	r0, r9
 8012a02:	f000 fcaf 	bl	8013364 <__mdiff>
 8012a06:	68c2      	ldr	r2, [r0, #12]
 8012a08:	4606      	mov	r6, r0
 8012a0a:	b9fa      	cbnz	r2, 8012a4c <_dtoa_r+0x954>
 8012a0c:	4601      	mov	r1, r0
 8012a0e:	9801      	ldr	r0, [sp, #4]
 8012a10:	f000 fc8c 	bl	801332c <__mcmp>
 8012a14:	4602      	mov	r2, r0
 8012a16:	4631      	mov	r1, r6
 8012a18:	4648      	mov	r0, r9
 8012a1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8012a1c:	f000 fa0a 	bl	8012e34 <_Bfree>
 8012a20:	9b07      	ldr	r3, [sp, #28]
 8012a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a24:	9e04      	ldr	r6, [sp, #16]
 8012a26:	ea42 0103 	orr.w	r1, r2, r3
 8012a2a:	9b08      	ldr	r3, [sp, #32]
 8012a2c:	4319      	orrs	r1, r3
 8012a2e:	d10f      	bne.n	8012a50 <_dtoa_r+0x958>
 8012a30:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a34:	d028      	beq.n	8012a88 <_dtoa_r+0x990>
 8012a36:	9b06      	ldr	r3, [sp, #24]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	dd02      	ble.n	8012a42 <_dtoa_r+0x94a>
 8012a3c:	9b02      	ldr	r3, [sp, #8]
 8012a3e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012a42:	f88b a000 	strb.w	sl, [fp]
 8012a46:	e55e      	b.n	8012506 <_dtoa_r+0x40e>
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e7bd      	b.n	80129c8 <_dtoa_r+0x8d0>
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	e7e2      	b.n	8012a16 <_dtoa_r+0x91e>
 8012a50:	9b06      	ldr	r3, [sp, #24]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	db04      	blt.n	8012a60 <_dtoa_r+0x968>
 8012a56:	9907      	ldr	r1, [sp, #28]
 8012a58:	430b      	orrs	r3, r1
 8012a5a:	9908      	ldr	r1, [sp, #32]
 8012a5c:	430b      	orrs	r3, r1
 8012a5e:	d120      	bne.n	8012aa2 <_dtoa_r+0x9aa>
 8012a60:	2a00      	cmp	r2, #0
 8012a62:	ddee      	ble.n	8012a42 <_dtoa_r+0x94a>
 8012a64:	9901      	ldr	r1, [sp, #4]
 8012a66:	2201      	movs	r2, #1
 8012a68:	4648      	mov	r0, r9
 8012a6a:	f000 fbf3 	bl	8013254 <__lshift>
 8012a6e:	4621      	mov	r1, r4
 8012a70:	9001      	str	r0, [sp, #4]
 8012a72:	f000 fc5b 	bl	801332c <__mcmp>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	dc03      	bgt.n	8012a82 <_dtoa_r+0x98a>
 8012a7a:	d1e2      	bne.n	8012a42 <_dtoa_r+0x94a>
 8012a7c:	f01a 0f01 	tst.w	sl, #1
 8012a80:	d0df      	beq.n	8012a42 <_dtoa_r+0x94a>
 8012a82:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a86:	d1d9      	bne.n	8012a3c <_dtoa_r+0x944>
 8012a88:	2339      	movs	r3, #57	@ 0x39
 8012a8a:	f88b 3000 	strb.w	r3, [fp]
 8012a8e:	4633      	mov	r3, r6
 8012a90:	461e      	mov	r6, r3
 8012a92:	3b01      	subs	r3, #1
 8012a94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a98:	2a39      	cmp	r2, #57	@ 0x39
 8012a9a:	d052      	beq.n	8012b42 <_dtoa_r+0xa4a>
 8012a9c:	3201      	adds	r2, #1
 8012a9e:	701a      	strb	r2, [r3, #0]
 8012aa0:	e531      	b.n	8012506 <_dtoa_r+0x40e>
 8012aa2:	2a00      	cmp	r2, #0
 8012aa4:	dd07      	ble.n	8012ab6 <_dtoa_r+0x9be>
 8012aa6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012aaa:	d0ed      	beq.n	8012a88 <_dtoa_r+0x990>
 8012aac:	f10a 0301 	add.w	r3, sl, #1
 8012ab0:	f88b 3000 	strb.w	r3, [fp]
 8012ab4:	e527      	b.n	8012506 <_dtoa_r+0x40e>
 8012ab6:	9b04      	ldr	r3, [sp, #16]
 8012ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012aba:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d029      	beq.n	8012b16 <_dtoa_r+0xa1e>
 8012ac2:	9901      	ldr	r1, [sp, #4]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	220a      	movs	r2, #10
 8012ac8:	4648      	mov	r0, r9
 8012aca:	f000 f9d5 	bl	8012e78 <__multadd>
 8012ace:	45a8      	cmp	r8, r5
 8012ad0:	9001      	str	r0, [sp, #4]
 8012ad2:	f04f 0300 	mov.w	r3, #0
 8012ad6:	f04f 020a 	mov.w	r2, #10
 8012ada:	4641      	mov	r1, r8
 8012adc:	4648      	mov	r0, r9
 8012ade:	d107      	bne.n	8012af0 <_dtoa_r+0x9f8>
 8012ae0:	f000 f9ca 	bl	8012e78 <__multadd>
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	9b04      	ldr	r3, [sp, #16]
 8012aea:	3301      	adds	r3, #1
 8012aec:	9304      	str	r3, [sp, #16]
 8012aee:	e776      	b.n	80129de <_dtoa_r+0x8e6>
 8012af0:	f000 f9c2 	bl	8012e78 <__multadd>
 8012af4:	4629      	mov	r1, r5
 8012af6:	4680      	mov	r8, r0
 8012af8:	2300      	movs	r3, #0
 8012afa:	220a      	movs	r2, #10
 8012afc:	4648      	mov	r0, r9
 8012afe:	f000 f9bb 	bl	8012e78 <__multadd>
 8012b02:	4605      	mov	r5, r0
 8012b04:	e7f0      	b.n	8012ae8 <_dtoa_r+0x9f0>
 8012b06:	f1bb 0f00 	cmp.w	fp, #0
 8012b0a:	bfcc      	ite	gt
 8012b0c:	465e      	movgt	r6, fp
 8012b0e:	2601      	movle	r6, #1
 8012b10:	443e      	add	r6, r7
 8012b12:	f04f 0800 	mov.w	r8, #0
 8012b16:	9901      	ldr	r1, [sp, #4]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	4648      	mov	r0, r9
 8012b1c:	f000 fb9a 	bl	8013254 <__lshift>
 8012b20:	4621      	mov	r1, r4
 8012b22:	9001      	str	r0, [sp, #4]
 8012b24:	f000 fc02 	bl	801332c <__mcmp>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	dcb0      	bgt.n	8012a8e <_dtoa_r+0x996>
 8012b2c:	d102      	bne.n	8012b34 <_dtoa_r+0xa3c>
 8012b2e:	f01a 0f01 	tst.w	sl, #1
 8012b32:	d1ac      	bne.n	8012a8e <_dtoa_r+0x996>
 8012b34:	4633      	mov	r3, r6
 8012b36:	461e      	mov	r6, r3
 8012b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b3c:	2a30      	cmp	r2, #48	@ 0x30
 8012b3e:	d0fa      	beq.n	8012b36 <_dtoa_r+0xa3e>
 8012b40:	e4e1      	b.n	8012506 <_dtoa_r+0x40e>
 8012b42:	429f      	cmp	r7, r3
 8012b44:	d1a4      	bne.n	8012a90 <_dtoa_r+0x998>
 8012b46:	9b05      	ldr	r3, [sp, #20]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	9305      	str	r3, [sp, #20]
 8012b4c:	2331      	movs	r3, #49	@ 0x31
 8012b4e:	703b      	strb	r3, [r7, #0]
 8012b50:	e4d9      	b.n	8012506 <_dtoa_r+0x40e>
 8012b52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b54:	4f16      	ldr	r7, [pc, #88]	@ (8012bb0 <_dtoa_r+0xab8>)
 8012b56:	b11b      	cbz	r3, 8012b60 <_dtoa_r+0xa68>
 8012b58:	f107 0308 	add.w	r3, r7, #8
 8012b5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012b5e:	6013      	str	r3, [r2, #0]
 8012b60:	4638      	mov	r0, r7
 8012b62:	b011      	add	sp, #68	@ 0x44
 8012b64:	ecbd 8b02 	vpop	{d8}
 8012b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6c:	9b07      	ldr	r3, [sp, #28]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	f77f ae2c 	ble.w	80127cc <_dtoa_r+0x6d4>
 8012b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b78:	2001      	movs	r0, #1
 8012b7a:	e64c      	b.n	8012816 <_dtoa_r+0x71e>
 8012b7c:	f1bb 0f00 	cmp.w	fp, #0
 8012b80:	f77f aed8 	ble.w	8012934 <_dtoa_r+0x83c>
 8012b84:	463e      	mov	r6, r7
 8012b86:	9801      	ldr	r0, [sp, #4]
 8012b88:	4621      	mov	r1, r4
 8012b8a:	f7ff fa2d 	bl	8011fe8 <quorem>
 8012b8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012b92:	f806 ab01 	strb.w	sl, [r6], #1
 8012b96:	1bf2      	subs	r2, r6, r7
 8012b98:	4593      	cmp	fp, r2
 8012b9a:	ddb4      	ble.n	8012b06 <_dtoa_r+0xa0e>
 8012b9c:	9901      	ldr	r1, [sp, #4]
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	220a      	movs	r2, #10
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	f000 f968 	bl	8012e78 <__multadd>
 8012ba8:	9001      	str	r0, [sp, #4]
 8012baa:	e7ec      	b.n	8012b86 <_dtoa_r+0xa8e>
 8012bac:	0801721f 	.word	0x0801721f
 8012bb0:	080171a3 	.word	0x080171a3

08012bb4 <_free_r>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	2900      	cmp	r1, #0
 8012bba:	d041      	beq.n	8012c40 <_free_r+0x8c>
 8012bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bc0:	1f0c      	subs	r4, r1, #4
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	bfb8      	it	lt
 8012bc6:	18e4      	addlt	r4, r4, r3
 8012bc8:	f000 f8e8 	bl	8012d9c <__malloc_lock>
 8012bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8012c44 <_free_r+0x90>)
 8012bce:	6813      	ldr	r3, [r2, #0]
 8012bd0:	b933      	cbnz	r3, 8012be0 <_free_r+0x2c>
 8012bd2:	6063      	str	r3, [r4, #4]
 8012bd4:	6014      	str	r4, [r2, #0]
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bdc:	f000 b8e4 	b.w	8012da8 <__malloc_unlock>
 8012be0:	42a3      	cmp	r3, r4
 8012be2:	d908      	bls.n	8012bf6 <_free_r+0x42>
 8012be4:	6820      	ldr	r0, [r4, #0]
 8012be6:	1821      	adds	r1, r4, r0
 8012be8:	428b      	cmp	r3, r1
 8012bea:	bf01      	itttt	eq
 8012bec:	6819      	ldreq	r1, [r3, #0]
 8012bee:	685b      	ldreq	r3, [r3, #4]
 8012bf0:	1809      	addeq	r1, r1, r0
 8012bf2:	6021      	streq	r1, [r4, #0]
 8012bf4:	e7ed      	b.n	8012bd2 <_free_r+0x1e>
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	b10b      	cbz	r3, 8012c00 <_free_r+0x4c>
 8012bfc:	42a3      	cmp	r3, r4
 8012bfe:	d9fa      	bls.n	8012bf6 <_free_r+0x42>
 8012c00:	6811      	ldr	r1, [r2, #0]
 8012c02:	1850      	adds	r0, r2, r1
 8012c04:	42a0      	cmp	r0, r4
 8012c06:	d10b      	bne.n	8012c20 <_free_r+0x6c>
 8012c08:	6820      	ldr	r0, [r4, #0]
 8012c0a:	4401      	add	r1, r0
 8012c0c:	1850      	adds	r0, r2, r1
 8012c0e:	4283      	cmp	r3, r0
 8012c10:	6011      	str	r1, [r2, #0]
 8012c12:	d1e0      	bne.n	8012bd6 <_free_r+0x22>
 8012c14:	6818      	ldr	r0, [r3, #0]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	6053      	str	r3, [r2, #4]
 8012c1a:	4408      	add	r0, r1
 8012c1c:	6010      	str	r0, [r2, #0]
 8012c1e:	e7da      	b.n	8012bd6 <_free_r+0x22>
 8012c20:	d902      	bls.n	8012c28 <_free_r+0x74>
 8012c22:	230c      	movs	r3, #12
 8012c24:	602b      	str	r3, [r5, #0]
 8012c26:	e7d6      	b.n	8012bd6 <_free_r+0x22>
 8012c28:	6820      	ldr	r0, [r4, #0]
 8012c2a:	1821      	adds	r1, r4, r0
 8012c2c:	428b      	cmp	r3, r1
 8012c2e:	bf04      	itt	eq
 8012c30:	6819      	ldreq	r1, [r3, #0]
 8012c32:	685b      	ldreq	r3, [r3, #4]
 8012c34:	6063      	str	r3, [r4, #4]
 8012c36:	bf04      	itt	eq
 8012c38:	1809      	addeq	r1, r1, r0
 8012c3a:	6021      	streq	r1, [r4, #0]
 8012c3c:	6054      	str	r4, [r2, #4]
 8012c3e:	e7ca      	b.n	8012bd6 <_free_r+0x22>
 8012c40:	bd38      	pop	{r3, r4, r5, pc}
 8012c42:	bf00      	nop
 8012c44:	24005254 	.word	0x24005254

08012c48 <malloc>:
 8012c48:	4b02      	ldr	r3, [pc, #8]	@ (8012c54 <malloc+0xc>)
 8012c4a:	4601      	mov	r1, r0
 8012c4c:	6818      	ldr	r0, [r3, #0]
 8012c4e:	f000 b825 	b.w	8012c9c <_malloc_r>
 8012c52:	bf00      	nop
 8012c54:	2400002c 	.word	0x2400002c

08012c58 <sbrk_aligned>:
 8012c58:	b570      	push	{r4, r5, r6, lr}
 8012c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8012c98 <sbrk_aligned+0x40>)
 8012c5c:	460c      	mov	r4, r1
 8012c5e:	6831      	ldr	r1, [r6, #0]
 8012c60:	4605      	mov	r5, r0
 8012c62:	b911      	cbnz	r1, 8012c6a <sbrk_aligned+0x12>
 8012c64:	f002 fb0c 	bl	8015280 <_sbrk_r>
 8012c68:	6030      	str	r0, [r6, #0]
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f002 fb07 	bl	8015280 <_sbrk_r>
 8012c72:	1c43      	adds	r3, r0, #1
 8012c74:	d103      	bne.n	8012c7e <sbrk_aligned+0x26>
 8012c76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	bd70      	pop	{r4, r5, r6, pc}
 8012c7e:	1cc4      	adds	r4, r0, #3
 8012c80:	f024 0403 	bic.w	r4, r4, #3
 8012c84:	42a0      	cmp	r0, r4
 8012c86:	d0f8      	beq.n	8012c7a <sbrk_aligned+0x22>
 8012c88:	1a21      	subs	r1, r4, r0
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f002 faf8 	bl	8015280 <_sbrk_r>
 8012c90:	3001      	adds	r0, #1
 8012c92:	d1f2      	bne.n	8012c7a <sbrk_aligned+0x22>
 8012c94:	e7ef      	b.n	8012c76 <sbrk_aligned+0x1e>
 8012c96:	bf00      	nop
 8012c98:	24005250 	.word	0x24005250

08012c9c <_malloc_r>:
 8012c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ca0:	1ccd      	adds	r5, r1, #3
 8012ca2:	f025 0503 	bic.w	r5, r5, #3
 8012ca6:	3508      	adds	r5, #8
 8012ca8:	2d0c      	cmp	r5, #12
 8012caa:	bf38      	it	cc
 8012cac:	250c      	movcc	r5, #12
 8012cae:	2d00      	cmp	r5, #0
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	db01      	blt.n	8012cb8 <_malloc_r+0x1c>
 8012cb4:	42a9      	cmp	r1, r5
 8012cb6:	d904      	bls.n	8012cc2 <_malloc_r+0x26>
 8012cb8:	230c      	movs	r3, #12
 8012cba:	6033      	str	r3, [r6, #0]
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d98 <_malloc_r+0xfc>
 8012cc6:	f000 f869 	bl	8012d9c <__malloc_lock>
 8012cca:	f8d8 3000 	ldr.w	r3, [r8]
 8012cce:	461c      	mov	r4, r3
 8012cd0:	bb44      	cbnz	r4, 8012d24 <_malloc_r+0x88>
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f7ff ffbf 	bl	8012c58 <sbrk_aligned>
 8012cda:	1c43      	adds	r3, r0, #1
 8012cdc:	4604      	mov	r4, r0
 8012cde:	d158      	bne.n	8012d92 <_malloc_r+0xf6>
 8012ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8012ce4:	4627      	mov	r7, r4
 8012ce6:	2f00      	cmp	r7, #0
 8012ce8:	d143      	bne.n	8012d72 <_malloc_r+0xd6>
 8012cea:	2c00      	cmp	r4, #0
 8012cec:	d04b      	beq.n	8012d86 <_malloc_r+0xea>
 8012cee:	6823      	ldr	r3, [r4, #0]
 8012cf0:	4639      	mov	r1, r7
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	eb04 0903 	add.w	r9, r4, r3
 8012cf8:	f002 fac2 	bl	8015280 <_sbrk_r>
 8012cfc:	4581      	cmp	r9, r0
 8012cfe:	d142      	bne.n	8012d86 <_malloc_r+0xea>
 8012d00:	6821      	ldr	r1, [r4, #0]
 8012d02:	1a6d      	subs	r5, r5, r1
 8012d04:	4629      	mov	r1, r5
 8012d06:	4630      	mov	r0, r6
 8012d08:	f7ff ffa6 	bl	8012c58 <sbrk_aligned>
 8012d0c:	3001      	adds	r0, #1
 8012d0e:	d03a      	beq.n	8012d86 <_malloc_r+0xea>
 8012d10:	6823      	ldr	r3, [r4, #0]
 8012d12:	442b      	add	r3, r5
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	f8d8 3000 	ldr.w	r3, [r8]
 8012d1a:	685a      	ldr	r2, [r3, #4]
 8012d1c:	bb62      	cbnz	r2, 8012d78 <_malloc_r+0xdc>
 8012d1e:	f8c8 7000 	str.w	r7, [r8]
 8012d22:	e00f      	b.n	8012d44 <_malloc_r+0xa8>
 8012d24:	6822      	ldr	r2, [r4, #0]
 8012d26:	1b52      	subs	r2, r2, r5
 8012d28:	d420      	bmi.n	8012d6c <_malloc_r+0xd0>
 8012d2a:	2a0b      	cmp	r2, #11
 8012d2c:	d917      	bls.n	8012d5e <_malloc_r+0xc2>
 8012d2e:	1961      	adds	r1, r4, r5
 8012d30:	42a3      	cmp	r3, r4
 8012d32:	6025      	str	r5, [r4, #0]
 8012d34:	bf18      	it	ne
 8012d36:	6059      	strne	r1, [r3, #4]
 8012d38:	6863      	ldr	r3, [r4, #4]
 8012d3a:	bf08      	it	eq
 8012d3c:	f8c8 1000 	streq.w	r1, [r8]
 8012d40:	5162      	str	r2, [r4, r5]
 8012d42:	604b      	str	r3, [r1, #4]
 8012d44:	4630      	mov	r0, r6
 8012d46:	f000 f82f 	bl	8012da8 <__malloc_unlock>
 8012d4a:	f104 000b 	add.w	r0, r4, #11
 8012d4e:	1d23      	adds	r3, r4, #4
 8012d50:	f020 0007 	bic.w	r0, r0, #7
 8012d54:	1ac2      	subs	r2, r0, r3
 8012d56:	bf1c      	itt	ne
 8012d58:	1a1b      	subne	r3, r3, r0
 8012d5a:	50a3      	strne	r3, [r4, r2]
 8012d5c:	e7af      	b.n	8012cbe <_malloc_r+0x22>
 8012d5e:	6862      	ldr	r2, [r4, #4]
 8012d60:	42a3      	cmp	r3, r4
 8012d62:	bf0c      	ite	eq
 8012d64:	f8c8 2000 	streq.w	r2, [r8]
 8012d68:	605a      	strne	r2, [r3, #4]
 8012d6a:	e7eb      	b.n	8012d44 <_malloc_r+0xa8>
 8012d6c:	4623      	mov	r3, r4
 8012d6e:	6864      	ldr	r4, [r4, #4]
 8012d70:	e7ae      	b.n	8012cd0 <_malloc_r+0x34>
 8012d72:	463c      	mov	r4, r7
 8012d74:	687f      	ldr	r7, [r7, #4]
 8012d76:	e7b6      	b.n	8012ce6 <_malloc_r+0x4a>
 8012d78:	461a      	mov	r2, r3
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	42a3      	cmp	r3, r4
 8012d7e:	d1fb      	bne.n	8012d78 <_malloc_r+0xdc>
 8012d80:	2300      	movs	r3, #0
 8012d82:	6053      	str	r3, [r2, #4]
 8012d84:	e7de      	b.n	8012d44 <_malloc_r+0xa8>
 8012d86:	230c      	movs	r3, #12
 8012d88:	6033      	str	r3, [r6, #0]
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f000 f80c 	bl	8012da8 <__malloc_unlock>
 8012d90:	e794      	b.n	8012cbc <_malloc_r+0x20>
 8012d92:	6005      	str	r5, [r0, #0]
 8012d94:	e7d6      	b.n	8012d44 <_malloc_r+0xa8>
 8012d96:	bf00      	nop
 8012d98:	24005254 	.word	0x24005254

08012d9c <__malloc_lock>:
 8012d9c:	4801      	ldr	r0, [pc, #4]	@ (8012da4 <__malloc_lock+0x8>)
 8012d9e:	f7ff b90c 	b.w	8011fba <__retarget_lock_acquire_recursive>
 8012da2:	bf00      	nop
 8012da4:	2400524c 	.word	0x2400524c

08012da8 <__malloc_unlock>:
 8012da8:	4801      	ldr	r0, [pc, #4]	@ (8012db0 <__malloc_unlock+0x8>)
 8012daa:	f7ff b907 	b.w	8011fbc <__retarget_lock_release_recursive>
 8012dae:	bf00      	nop
 8012db0:	2400524c 	.word	0x2400524c

08012db4 <_Balloc>:
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	69c6      	ldr	r6, [r0, #28]
 8012db8:	4604      	mov	r4, r0
 8012dba:	460d      	mov	r5, r1
 8012dbc:	b976      	cbnz	r6, 8012ddc <_Balloc+0x28>
 8012dbe:	2010      	movs	r0, #16
 8012dc0:	f7ff ff42 	bl	8012c48 <malloc>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	61e0      	str	r0, [r4, #28]
 8012dc8:	b920      	cbnz	r0, 8012dd4 <_Balloc+0x20>
 8012dca:	4b18      	ldr	r3, [pc, #96]	@ (8012e2c <_Balloc+0x78>)
 8012dcc:	4818      	ldr	r0, [pc, #96]	@ (8012e30 <_Balloc+0x7c>)
 8012dce:	216b      	movs	r1, #107	@ 0x6b
 8012dd0:	f002 fa6e 	bl	80152b0 <__assert_func>
 8012dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dd8:	6006      	str	r6, [r0, #0]
 8012dda:	60c6      	str	r6, [r0, #12]
 8012ddc:	69e6      	ldr	r6, [r4, #28]
 8012dde:	68f3      	ldr	r3, [r6, #12]
 8012de0:	b183      	cbz	r3, 8012e04 <_Balloc+0x50>
 8012de2:	69e3      	ldr	r3, [r4, #28]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012dea:	b9b8      	cbnz	r0, 8012e1c <_Balloc+0x68>
 8012dec:	2101      	movs	r1, #1
 8012dee:	fa01 f605 	lsl.w	r6, r1, r5
 8012df2:	1d72      	adds	r2, r6, #5
 8012df4:	0092      	lsls	r2, r2, #2
 8012df6:	4620      	mov	r0, r4
 8012df8:	f002 fa78 	bl	80152ec <_calloc_r>
 8012dfc:	b160      	cbz	r0, 8012e18 <_Balloc+0x64>
 8012dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e02:	e00e      	b.n	8012e22 <_Balloc+0x6e>
 8012e04:	2221      	movs	r2, #33	@ 0x21
 8012e06:	2104      	movs	r1, #4
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f002 fa6f 	bl	80152ec <_calloc_r>
 8012e0e:	69e3      	ldr	r3, [r4, #28]
 8012e10:	60f0      	str	r0, [r6, #12]
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d1e4      	bne.n	8012de2 <_Balloc+0x2e>
 8012e18:	2000      	movs	r0, #0
 8012e1a:	bd70      	pop	{r4, r5, r6, pc}
 8012e1c:	6802      	ldr	r2, [r0, #0]
 8012e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e22:	2300      	movs	r3, #0
 8012e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e28:	e7f7      	b.n	8012e1a <_Balloc+0x66>
 8012e2a:	bf00      	nop
 8012e2c:	080171b0 	.word	0x080171b0
 8012e30:	08017230 	.word	0x08017230

08012e34 <_Bfree>:
 8012e34:	b570      	push	{r4, r5, r6, lr}
 8012e36:	69c6      	ldr	r6, [r0, #28]
 8012e38:	4605      	mov	r5, r0
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	b976      	cbnz	r6, 8012e5c <_Bfree+0x28>
 8012e3e:	2010      	movs	r0, #16
 8012e40:	f7ff ff02 	bl	8012c48 <malloc>
 8012e44:	4602      	mov	r2, r0
 8012e46:	61e8      	str	r0, [r5, #28]
 8012e48:	b920      	cbnz	r0, 8012e54 <_Bfree+0x20>
 8012e4a:	4b09      	ldr	r3, [pc, #36]	@ (8012e70 <_Bfree+0x3c>)
 8012e4c:	4809      	ldr	r0, [pc, #36]	@ (8012e74 <_Bfree+0x40>)
 8012e4e:	218f      	movs	r1, #143	@ 0x8f
 8012e50:	f002 fa2e 	bl	80152b0 <__assert_func>
 8012e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e58:	6006      	str	r6, [r0, #0]
 8012e5a:	60c6      	str	r6, [r0, #12]
 8012e5c:	b13c      	cbz	r4, 8012e6e <_Bfree+0x3a>
 8012e5e:	69eb      	ldr	r3, [r5, #28]
 8012e60:	6862      	ldr	r2, [r4, #4]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e68:	6021      	str	r1, [r4, #0]
 8012e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}
 8012e70:	080171b0 	.word	0x080171b0
 8012e74:	08017230 	.word	0x08017230

08012e78 <__multadd>:
 8012e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7c:	690d      	ldr	r5, [r1, #16]
 8012e7e:	4607      	mov	r7, r0
 8012e80:	460c      	mov	r4, r1
 8012e82:	461e      	mov	r6, r3
 8012e84:	f101 0c14 	add.w	ip, r1, #20
 8012e88:	2000      	movs	r0, #0
 8012e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8012e8e:	b299      	uxth	r1, r3
 8012e90:	fb02 6101 	mla	r1, r2, r1, r6
 8012e94:	0c1e      	lsrs	r6, r3, #16
 8012e96:	0c0b      	lsrs	r3, r1, #16
 8012e98:	fb02 3306 	mla	r3, r2, r6, r3
 8012e9c:	b289      	uxth	r1, r1
 8012e9e:	3001      	adds	r0, #1
 8012ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ea4:	4285      	cmp	r5, r0
 8012ea6:	f84c 1b04 	str.w	r1, [ip], #4
 8012eaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012eae:	dcec      	bgt.n	8012e8a <__multadd+0x12>
 8012eb0:	b30e      	cbz	r6, 8012ef6 <__multadd+0x7e>
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	42ab      	cmp	r3, r5
 8012eb6:	dc19      	bgt.n	8012eec <__multadd+0x74>
 8012eb8:	6861      	ldr	r1, [r4, #4]
 8012eba:	4638      	mov	r0, r7
 8012ebc:	3101      	adds	r1, #1
 8012ebe:	f7ff ff79 	bl	8012db4 <_Balloc>
 8012ec2:	4680      	mov	r8, r0
 8012ec4:	b928      	cbnz	r0, 8012ed2 <__multadd+0x5a>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8012efc <__multadd+0x84>)
 8012eca:	480d      	ldr	r0, [pc, #52]	@ (8012f00 <__multadd+0x88>)
 8012ecc:	21ba      	movs	r1, #186	@ 0xba
 8012ece:	f002 f9ef 	bl	80152b0 <__assert_func>
 8012ed2:	6922      	ldr	r2, [r4, #16]
 8012ed4:	3202      	adds	r2, #2
 8012ed6:	f104 010c 	add.w	r1, r4, #12
 8012eda:	0092      	lsls	r2, r2, #2
 8012edc:	300c      	adds	r0, #12
 8012ede:	f7ff f86e 	bl	8011fbe <memcpy>
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	f7ff ffa5 	bl	8012e34 <_Bfree>
 8012eea:	4644      	mov	r4, r8
 8012eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ef0:	3501      	adds	r5, #1
 8012ef2:	615e      	str	r6, [r3, #20]
 8012ef4:	6125      	str	r5, [r4, #16]
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012efc:	0801721f 	.word	0x0801721f
 8012f00:	08017230 	.word	0x08017230

08012f04 <__s2b>:
 8012f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f08:	460c      	mov	r4, r1
 8012f0a:	4615      	mov	r5, r2
 8012f0c:	461f      	mov	r7, r3
 8012f0e:	2209      	movs	r2, #9
 8012f10:	3308      	adds	r3, #8
 8012f12:	4606      	mov	r6, r0
 8012f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f18:	2100      	movs	r1, #0
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	db09      	blt.n	8012f34 <__s2b+0x30>
 8012f20:	4630      	mov	r0, r6
 8012f22:	f7ff ff47 	bl	8012db4 <_Balloc>
 8012f26:	b940      	cbnz	r0, 8012f3a <__s2b+0x36>
 8012f28:	4602      	mov	r2, r0
 8012f2a:	4b19      	ldr	r3, [pc, #100]	@ (8012f90 <__s2b+0x8c>)
 8012f2c:	4819      	ldr	r0, [pc, #100]	@ (8012f94 <__s2b+0x90>)
 8012f2e:	21d3      	movs	r1, #211	@ 0xd3
 8012f30:	f002 f9be 	bl	80152b0 <__assert_func>
 8012f34:	0052      	lsls	r2, r2, #1
 8012f36:	3101      	adds	r1, #1
 8012f38:	e7f0      	b.n	8012f1c <__s2b+0x18>
 8012f3a:	9b08      	ldr	r3, [sp, #32]
 8012f3c:	6143      	str	r3, [r0, #20]
 8012f3e:	2d09      	cmp	r5, #9
 8012f40:	f04f 0301 	mov.w	r3, #1
 8012f44:	6103      	str	r3, [r0, #16]
 8012f46:	dd16      	ble.n	8012f76 <__s2b+0x72>
 8012f48:	f104 0909 	add.w	r9, r4, #9
 8012f4c:	46c8      	mov	r8, r9
 8012f4e:	442c      	add	r4, r5
 8012f50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f54:	4601      	mov	r1, r0
 8012f56:	3b30      	subs	r3, #48	@ 0x30
 8012f58:	220a      	movs	r2, #10
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f7ff ff8c 	bl	8012e78 <__multadd>
 8012f60:	45a0      	cmp	r8, r4
 8012f62:	d1f5      	bne.n	8012f50 <__s2b+0x4c>
 8012f64:	f1a5 0408 	sub.w	r4, r5, #8
 8012f68:	444c      	add	r4, r9
 8012f6a:	1b2d      	subs	r5, r5, r4
 8012f6c:	1963      	adds	r3, r4, r5
 8012f6e:	42bb      	cmp	r3, r7
 8012f70:	db04      	blt.n	8012f7c <__s2b+0x78>
 8012f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f76:	340a      	adds	r4, #10
 8012f78:	2509      	movs	r5, #9
 8012f7a:	e7f6      	b.n	8012f6a <__s2b+0x66>
 8012f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f80:	4601      	mov	r1, r0
 8012f82:	3b30      	subs	r3, #48	@ 0x30
 8012f84:	220a      	movs	r2, #10
 8012f86:	4630      	mov	r0, r6
 8012f88:	f7ff ff76 	bl	8012e78 <__multadd>
 8012f8c:	e7ee      	b.n	8012f6c <__s2b+0x68>
 8012f8e:	bf00      	nop
 8012f90:	0801721f 	.word	0x0801721f
 8012f94:	08017230 	.word	0x08017230

08012f98 <__hi0bits>:
 8012f98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	bf36      	itet	cc
 8012fa0:	0403      	lslcc	r3, r0, #16
 8012fa2:	2000      	movcs	r0, #0
 8012fa4:	2010      	movcc	r0, #16
 8012fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012faa:	bf3c      	itt	cc
 8012fac:	021b      	lslcc	r3, r3, #8
 8012fae:	3008      	addcc	r0, #8
 8012fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012fb4:	bf3c      	itt	cc
 8012fb6:	011b      	lslcc	r3, r3, #4
 8012fb8:	3004      	addcc	r0, #4
 8012fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fbe:	bf3c      	itt	cc
 8012fc0:	009b      	lslcc	r3, r3, #2
 8012fc2:	3002      	addcc	r0, #2
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	db05      	blt.n	8012fd4 <__hi0bits+0x3c>
 8012fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012fcc:	f100 0001 	add.w	r0, r0, #1
 8012fd0:	bf08      	it	eq
 8012fd2:	2020      	moveq	r0, #32
 8012fd4:	4770      	bx	lr

08012fd6 <__lo0bits>:
 8012fd6:	6803      	ldr	r3, [r0, #0]
 8012fd8:	4602      	mov	r2, r0
 8012fda:	f013 0007 	ands.w	r0, r3, #7
 8012fde:	d00b      	beq.n	8012ff8 <__lo0bits+0x22>
 8012fe0:	07d9      	lsls	r1, r3, #31
 8012fe2:	d421      	bmi.n	8013028 <__lo0bits+0x52>
 8012fe4:	0798      	lsls	r0, r3, #30
 8012fe6:	bf49      	itett	mi
 8012fe8:	085b      	lsrmi	r3, r3, #1
 8012fea:	089b      	lsrpl	r3, r3, #2
 8012fec:	2001      	movmi	r0, #1
 8012fee:	6013      	strmi	r3, [r2, #0]
 8012ff0:	bf5c      	itt	pl
 8012ff2:	6013      	strpl	r3, [r2, #0]
 8012ff4:	2002      	movpl	r0, #2
 8012ff6:	4770      	bx	lr
 8012ff8:	b299      	uxth	r1, r3
 8012ffa:	b909      	cbnz	r1, 8013000 <__lo0bits+0x2a>
 8012ffc:	0c1b      	lsrs	r3, r3, #16
 8012ffe:	2010      	movs	r0, #16
 8013000:	b2d9      	uxtb	r1, r3
 8013002:	b909      	cbnz	r1, 8013008 <__lo0bits+0x32>
 8013004:	3008      	adds	r0, #8
 8013006:	0a1b      	lsrs	r3, r3, #8
 8013008:	0719      	lsls	r1, r3, #28
 801300a:	bf04      	itt	eq
 801300c:	091b      	lsreq	r3, r3, #4
 801300e:	3004      	addeq	r0, #4
 8013010:	0799      	lsls	r1, r3, #30
 8013012:	bf04      	itt	eq
 8013014:	089b      	lsreq	r3, r3, #2
 8013016:	3002      	addeq	r0, #2
 8013018:	07d9      	lsls	r1, r3, #31
 801301a:	d403      	bmi.n	8013024 <__lo0bits+0x4e>
 801301c:	085b      	lsrs	r3, r3, #1
 801301e:	f100 0001 	add.w	r0, r0, #1
 8013022:	d003      	beq.n	801302c <__lo0bits+0x56>
 8013024:	6013      	str	r3, [r2, #0]
 8013026:	4770      	bx	lr
 8013028:	2000      	movs	r0, #0
 801302a:	4770      	bx	lr
 801302c:	2020      	movs	r0, #32
 801302e:	4770      	bx	lr

08013030 <__i2b>:
 8013030:	b510      	push	{r4, lr}
 8013032:	460c      	mov	r4, r1
 8013034:	2101      	movs	r1, #1
 8013036:	f7ff febd 	bl	8012db4 <_Balloc>
 801303a:	4602      	mov	r2, r0
 801303c:	b928      	cbnz	r0, 801304a <__i2b+0x1a>
 801303e:	4b05      	ldr	r3, [pc, #20]	@ (8013054 <__i2b+0x24>)
 8013040:	4805      	ldr	r0, [pc, #20]	@ (8013058 <__i2b+0x28>)
 8013042:	f240 1145 	movw	r1, #325	@ 0x145
 8013046:	f002 f933 	bl	80152b0 <__assert_func>
 801304a:	2301      	movs	r3, #1
 801304c:	6144      	str	r4, [r0, #20]
 801304e:	6103      	str	r3, [r0, #16]
 8013050:	bd10      	pop	{r4, pc}
 8013052:	bf00      	nop
 8013054:	0801721f 	.word	0x0801721f
 8013058:	08017230 	.word	0x08017230

0801305c <__multiply>:
 801305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013060:	4617      	mov	r7, r2
 8013062:	690a      	ldr	r2, [r1, #16]
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	429a      	cmp	r2, r3
 8013068:	bfa8      	it	ge
 801306a:	463b      	movge	r3, r7
 801306c:	4689      	mov	r9, r1
 801306e:	bfa4      	itt	ge
 8013070:	460f      	movge	r7, r1
 8013072:	4699      	movge	r9, r3
 8013074:	693d      	ldr	r5, [r7, #16]
 8013076:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	6879      	ldr	r1, [r7, #4]
 801307e:	eb05 060a 	add.w	r6, r5, sl
 8013082:	42b3      	cmp	r3, r6
 8013084:	b085      	sub	sp, #20
 8013086:	bfb8      	it	lt
 8013088:	3101      	addlt	r1, #1
 801308a:	f7ff fe93 	bl	8012db4 <_Balloc>
 801308e:	b930      	cbnz	r0, 801309e <__multiply+0x42>
 8013090:	4602      	mov	r2, r0
 8013092:	4b41      	ldr	r3, [pc, #260]	@ (8013198 <__multiply+0x13c>)
 8013094:	4841      	ldr	r0, [pc, #260]	@ (801319c <__multiply+0x140>)
 8013096:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801309a:	f002 f909 	bl	80152b0 <__assert_func>
 801309e:	f100 0414 	add.w	r4, r0, #20
 80130a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80130a6:	4623      	mov	r3, r4
 80130a8:	2200      	movs	r2, #0
 80130aa:	4573      	cmp	r3, lr
 80130ac:	d320      	bcc.n	80130f0 <__multiply+0x94>
 80130ae:	f107 0814 	add.w	r8, r7, #20
 80130b2:	f109 0114 	add.w	r1, r9, #20
 80130b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80130ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80130be:	9302      	str	r3, [sp, #8]
 80130c0:	1beb      	subs	r3, r5, r7
 80130c2:	3b15      	subs	r3, #21
 80130c4:	f023 0303 	bic.w	r3, r3, #3
 80130c8:	3304      	adds	r3, #4
 80130ca:	3715      	adds	r7, #21
 80130cc:	42bd      	cmp	r5, r7
 80130ce:	bf38      	it	cc
 80130d0:	2304      	movcc	r3, #4
 80130d2:	9301      	str	r3, [sp, #4]
 80130d4:	9b02      	ldr	r3, [sp, #8]
 80130d6:	9103      	str	r1, [sp, #12]
 80130d8:	428b      	cmp	r3, r1
 80130da:	d80c      	bhi.n	80130f6 <__multiply+0x9a>
 80130dc:	2e00      	cmp	r6, #0
 80130de:	dd03      	ble.n	80130e8 <__multiply+0x8c>
 80130e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d055      	beq.n	8013194 <__multiply+0x138>
 80130e8:	6106      	str	r6, [r0, #16]
 80130ea:	b005      	add	sp, #20
 80130ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f0:	f843 2b04 	str.w	r2, [r3], #4
 80130f4:	e7d9      	b.n	80130aa <__multiply+0x4e>
 80130f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80130fa:	f1ba 0f00 	cmp.w	sl, #0
 80130fe:	d01f      	beq.n	8013140 <__multiply+0xe4>
 8013100:	46c4      	mov	ip, r8
 8013102:	46a1      	mov	r9, r4
 8013104:	2700      	movs	r7, #0
 8013106:	f85c 2b04 	ldr.w	r2, [ip], #4
 801310a:	f8d9 3000 	ldr.w	r3, [r9]
 801310e:	fa1f fb82 	uxth.w	fp, r2
 8013112:	b29b      	uxth	r3, r3
 8013114:	fb0a 330b 	mla	r3, sl, fp, r3
 8013118:	443b      	add	r3, r7
 801311a:	f8d9 7000 	ldr.w	r7, [r9]
 801311e:	0c12      	lsrs	r2, r2, #16
 8013120:	0c3f      	lsrs	r7, r7, #16
 8013122:	fb0a 7202 	mla	r2, sl, r2, r7
 8013126:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801312a:	b29b      	uxth	r3, r3
 801312c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013130:	4565      	cmp	r5, ip
 8013132:	f849 3b04 	str.w	r3, [r9], #4
 8013136:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801313a:	d8e4      	bhi.n	8013106 <__multiply+0xaa>
 801313c:	9b01      	ldr	r3, [sp, #4]
 801313e:	50e7      	str	r7, [r4, r3]
 8013140:	9b03      	ldr	r3, [sp, #12]
 8013142:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013146:	3104      	adds	r1, #4
 8013148:	f1b9 0f00 	cmp.w	r9, #0
 801314c:	d020      	beq.n	8013190 <__multiply+0x134>
 801314e:	6823      	ldr	r3, [r4, #0]
 8013150:	4647      	mov	r7, r8
 8013152:	46a4      	mov	ip, r4
 8013154:	f04f 0a00 	mov.w	sl, #0
 8013158:	f8b7 b000 	ldrh.w	fp, [r7]
 801315c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013160:	fb09 220b 	mla	r2, r9, fp, r2
 8013164:	4452      	add	r2, sl
 8013166:	b29b      	uxth	r3, r3
 8013168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801316c:	f84c 3b04 	str.w	r3, [ip], #4
 8013170:	f857 3b04 	ldr.w	r3, [r7], #4
 8013174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013178:	f8bc 3000 	ldrh.w	r3, [ip]
 801317c:	fb09 330a 	mla	r3, r9, sl, r3
 8013180:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013184:	42bd      	cmp	r5, r7
 8013186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801318a:	d8e5      	bhi.n	8013158 <__multiply+0xfc>
 801318c:	9a01      	ldr	r2, [sp, #4]
 801318e:	50a3      	str	r3, [r4, r2]
 8013190:	3404      	adds	r4, #4
 8013192:	e79f      	b.n	80130d4 <__multiply+0x78>
 8013194:	3e01      	subs	r6, #1
 8013196:	e7a1      	b.n	80130dc <__multiply+0x80>
 8013198:	0801721f 	.word	0x0801721f
 801319c:	08017230 	.word	0x08017230

080131a0 <__pow5mult>:
 80131a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a4:	4615      	mov	r5, r2
 80131a6:	f012 0203 	ands.w	r2, r2, #3
 80131aa:	4607      	mov	r7, r0
 80131ac:	460e      	mov	r6, r1
 80131ae:	d007      	beq.n	80131c0 <__pow5mult+0x20>
 80131b0:	4c25      	ldr	r4, [pc, #148]	@ (8013248 <__pow5mult+0xa8>)
 80131b2:	3a01      	subs	r2, #1
 80131b4:	2300      	movs	r3, #0
 80131b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131ba:	f7ff fe5d 	bl	8012e78 <__multadd>
 80131be:	4606      	mov	r6, r0
 80131c0:	10ad      	asrs	r5, r5, #2
 80131c2:	d03d      	beq.n	8013240 <__pow5mult+0xa0>
 80131c4:	69fc      	ldr	r4, [r7, #28]
 80131c6:	b97c      	cbnz	r4, 80131e8 <__pow5mult+0x48>
 80131c8:	2010      	movs	r0, #16
 80131ca:	f7ff fd3d 	bl	8012c48 <malloc>
 80131ce:	4602      	mov	r2, r0
 80131d0:	61f8      	str	r0, [r7, #28]
 80131d2:	b928      	cbnz	r0, 80131e0 <__pow5mult+0x40>
 80131d4:	4b1d      	ldr	r3, [pc, #116]	@ (801324c <__pow5mult+0xac>)
 80131d6:	481e      	ldr	r0, [pc, #120]	@ (8013250 <__pow5mult+0xb0>)
 80131d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80131dc:	f002 f868 	bl	80152b0 <__assert_func>
 80131e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131e4:	6004      	str	r4, [r0, #0]
 80131e6:	60c4      	str	r4, [r0, #12]
 80131e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80131ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131f0:	b94c      	cbnz	r4, 8013206 <__pow5mult+0x66>
 80131f2:	f240 2171 	movw	r1, #625	@ 0x271
 80131f6:	4638      	mov	r0, r7
 80131f8:	f7ff ff1a 	bl	8013030 <__i2b>
 80131fc:	2300      	movs	r3, #0
 80131fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8013202:	4604      	mov	r4, r0
 8013204:	6003      	str	r3, [r0, #0]
 8013206:	f04f 0900 	mov.w	r9, #0
 801320a:	07eb      	lsls	r3, r5, #31
 801320c:	d50a      	bpl.n	8013224 <__pow5mult+0x84>
 801320e:	4631      	mov	r1, r6
 8013210:	4622      	mov	r2, r4
 8013212:	4638      	mov	r0, r7
 8013214:	f7ff ff22 	bl	801305c <__multiply>
 8013218:	4631      	mov	r1, r6
 801321a:	4680      	mov	r8, r0
 801321c:	4638      	mov	r0, r7
 801321e:	f7ff fe09 	bl	8012e34 <_Bfree>
 8013222:	4646      	mov	r6, r8
 8013224:	106d      	asrs	r5, r5, #1
 8013226:	d00b      	beq.n	8013240 <__pow5mult+0xa0>
 8013228:	6820      	ldr	r0, [r4, #0]
 801322a:	b938      	cbnz	r0, 801323c <__pow5mult+0x9c>
 801322c:	4622      	mov	r2, r4
 801322e:	4621      	mov	r1, r4
 8013230:	4638      	mov	r0, r7
 8013232:	f7ff ff13 	bl	801305c <__multiply>
 8013236:	6020      	str	r0, [r4, #0]
 8013238:	f8c0 9000 	str.w	r9, [r0]
 801323c:	4604      	mov	r4, r0
 801323e:	e7e4      	b.n	801320a <__pow5mult+0x6a>
 8013240:	4630      	mov	r0, r6
 8013242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013246:	bf00      	nop
 8013248:	0801735c 	.word	0x0801735c
 801324c:	080171b0 	.word	0x080171b0
 8013250:	08017230 	.word	0x08017230

08013254 <__lshift>:
 8013254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013258:	460c      	mov	r4, r1
 801325a:	6849      	ldr	r1, [r1, #4]
 801325c:	6923      	ldr	r3, [r4, #16]
 801325e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013262:	68a3      	ldr	r3, [r4, #8]
 8013264:	4607      	mov	r7, r0
 8013266:	4691      	mov	r9, r2
 8013268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801326c:	f108 0601 	add.w	r6, r8, #1
 8013270:	42b3      	cmp	r3, r6
 8013272:	db0b      	blt.n	801328c <__lshift+0x38>
 8013274:	4638      	mov	r0, r7
 8013276:	f7ff fd9d 	bl	8012db4 <_Balloc>
 801327a:	4605      	mov	r5, r0
 801327c:	b948      	cbnz	r0, 8013292 <__lshift+0x3e>
 801327e:	4602      	mov	r2, r0
 8013280:	4b28      	ldr	r3, [pc, #160]	@ (8013324 <__lshift+0xd0>)
 8013282:	4829      	ldr	r0, [pc, #164]	@ (8013328 <__lshift+0xd4>)
 8013284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013288:	f002 f812 	bl	80152b0 <__assert_func>
 801328c:	3101      	adds	r1, #1
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	e7ee      	b.n	8013270 <__lshift+0x1c>
 8013292:	2300      	movs	r3, #0
 8013294:	f100 0114 	add.w	r1, r0, #20
 8013298:	f100 0210 	add.w	r2, r0, #16
 801329c:	4618      	mov	r0, r3
 801329e:	4553      	cmp	r3, sl
 80132a0:	db33      	blt.n	801330a <__lshift+0xb6>
 80132a2:	6920      	ldr	r0, [r4, #16]
 80132a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132a8:	f104 0314 	add.w	r3, r4, #20
 80132ac:	f019 091f 	ands.w	r9, r9, #31
 80132b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132b8:	d02b      	beq.n	8013312 <__lshift+0xbe>
 80132ba:	f1c9 0e20 	rsb	lr, r9, #32
 80132be:	468a      	mov	sl, r1
 80132c0:	2200      	movs	r2, #0
 80132c2:	6818      	ldr	r0, [r3, #0]
 80132c4:	fa00 f009 	lsl.w	r0, r0, r9
 80132c8:	4310      	orrs	r0, r2
 80132ca:	f84a 0b04 	str.w	r0, [sl], #4
 80132ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80132d2:	459c      	cmp	ip, r3
 80132d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80132d8:	d8f3      	bhi.n	80132c2 <__lshift+0x6e>
 80132da:	ebac 0304 	sub.w	r3, ip, r4
 80132de:	3b15      	subs	r3, #21
 80132e0:	f023 0303 	bic.w	r3, r3, #3
 80132e4:	3304      	adds	r3, #4
 80132e6:	f104 0015 	add.w	r0, r4, #21
 80132ea:	4560      	cmp	r0, ip
 80132ec:	bf88      	it	hi
 80132ee:	2304      	movhi	r3, #4
 80132f0:	50ca      	str	r2, [r1, r3]
 80132f2:	b10a      	cbz	r2, 80132f8 <__lshift+0xa4>
 80132f4:	f108 0602 	add.w	r6, r8, #2
 80132f8:	3e01      	subs	r6, #1
 80132fa:	4638      	mov	r0, r7
 80132fc:	612e      	str	r6, [r5, #16]
 80132fe:	4621      	mov	r1, r4
 8013300:	f7ff fd98 	bl	8012e34 <_Bfree>
 8013304:	4628      	mov	r0, r5
 8013306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801330a:	f842 0f04 	str.w	r0, [r2, #4]!
 801330e:	3301      	adds	r3, #1
 8013310:	e7c5      	b.n	801329e <__lshift+0x4a>
 8013312:	3904      	subs	r1, #4
 8013314:	f853 2b04 	ldr.w	r2, [r3], #4
 8013318:	f841 2f04 	str.w	r2, [r1, #4]!
 801331c:	459c      	cmp	ip, r3
 801331e:	d8f9      	bhi.n	8013314 <__lshift+0xc0>
 8013320:	e7ea      	b.n	80132f8 <__lshift+0xa4>
 8013322:	bf00      	nop
 8013324:	0801721f 	.word	0x0801721f
 8013328:	08017230 	.word	0x08017230

0801332c <__mcmp>:
 801332c:	690a      	ldr	r2, [r1, #16]
 801332e:	4603      	mov	r3, r0
 8013330:	6900      	ldr	r0, [r0, #16]
 8013332:	1a80      	subs	r0, r0, r2
 8013334:	b530      	push	{r4, r5, lr}
 8013336:	d10e      	bne.n	8013356 <__mcmp+0x2a>
 8013338:	3314      	adds	r3, #20
 801333a:	3114      	adds	r1, #20
 801333c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801334c:	4295      	cmp	r5, r2
 801334e:	d003      	beq.n	8013358 <__mcmp+0x2c>
 8013350:	d205      	bcs.n	801335e <__mcmp+0x32>
 8013352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013356:	bd30      	pop	{r4, r5, pc}
 8013358:	42a3      	cmp	r3, r4
 801335a:	d3f3      	bcc.n	8013344 <__mcmp+0x18>
 801335c:	e7fb      	b.n	8013356 <__mcmp+0x2a>
 801335e:	2001      	movs	r0, #1
 8013360:	e7f9      	b.n	8013356 <__mcmp+0x2a>
	...

08013364 <__mdiff>:
 8013364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013368:	4689      	mov	r9, r1
 801336a:	4606      	mov	r6, r0
 801336c:	4611      	mov	r1, r2
 801336e:	4648      	mov	r0, r9
 8013370:	4614      	mov	r4, r2
 8013372:	f7ff ffdb 	bl	801332c <__mcmp>
 8013376:	1e05      	subs	r5, r0, #0
 8013378:	d112      	bne.n	80133a0 <__mdiff+0x3c>
 801337a:	4629      	mov	r1, r5
 801337c:	4630      	mov	r0, r6
 801337e:	f7ff fd19 	bl	8012db4 <_Balloc>
 8013382:	4602      	mov	r2, r0
 8013384:	b928      	cbnz	r0, 8013392 <__mdiff+0x2e>
 8013386:	4b3f      	ldr	r3, [pc, #252]	@ (8013484 <__mdiff+0x120>)
 8013388:	f240 2137 	movw	r1, #567	@ 0x237
 801338c:	483e      	ldr	r0, [pc, #248]	@ (8013488 <__mdiff+0x124>)
 801338e:	f001 ff8f 	bl	80152b0 <__assert_func>
 8013392:	2301      	movs	r3, #1
 8013394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013398:	4610      	mov	r0, r2
 801339a:	b003      	add	sp, #12
 801339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a0:	bfbc      	itt	lt
 80133a2:	464b      	movlt	r3, r9
 80133a4:	46a1      	movlt	r9, r4
 80133a6:	4630      	mov	r0, r6
 80133a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80133ac:	bfba      	itte	lt
 80133ae:	461c      	movlt	r4, r3
 80133b0:	2501      	movlt	r5, #1
 80133b2:	2500      	movge	r5, #0
 80133b4:	f7ff fcfe 	bl	8012db4 <_Balloc>
 80133b8:	4602      	mov	r2, r0
 80133ba:	b918      	cbnz	r0, 80133c4 <__mdiff+0x60>
 80133bc:	4b31      	ldr	r3, [pc, #196]	@ (8013484 <__mdiff+0x120>)
 80133be:	f240 2145 	movw	r1, #581	@ 0x245
 80133c2:	e7e3      	b.n	801338c <__mdiff+0x28>
 80133c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80133c8:	6926      	ldr	r6, [r4, #16]
 80133ca:	60c5      	str	r5, [r0, #12]
 80133cc:	f109 0310 	add.w	r3, r9, #16
 80133d0:	f109 0514 	add.w	r5, r9, #20
 80133d4:	f104 0e14 	add.w	lr, r4, #20
 80133d8:	f100 0b14 	add.w	fp, r0, #20
 80133dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80133e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80133e4:	9301      	str	r3, [sp, #4]
 80133e6:	46d9      	mov	r9, fp
 80133e8:	f04f 0c00 	mov.w	ip, #0
 80133ec:	9b01      	ldr	r3, [sp, #4]
 80133ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80133f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	fa1f f38a 	uxth.w	r3, sl
 80133fc:	4619      	mov	r1, r3
 80133fe:	b283      	uxth	r3, r0
 8013400:	1acb      	subs	r3, r1, r3
 8013402:	0c00      	lsrs	r0, r0, #16
 8013404:	4463      	add	r3, ip
 8013406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801340a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801340e:	b29b      	uxth	r3, r3
 8013410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013414:	4576      	cmp	r6, lr
 8013416:	f849 3b04 	str.w	r3, [r9], #4
 801341a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801341e:	d8e5      	bhi.n	80133ec <__mdiff+0x88>
 8013420:	1b33      	subs	r3, r6, r4
 8013422:	3b15      	subs	r3, #21
 8013424:	f023 0303 	bic.w	r3, r3, #3
 8013428:	3415      	adds	r4, #21
 801342a:	3304      	adds	r3, #4
 801342c:	42a6      	cmp	r6, r4
 801342e:	bf38      	it	cc
 8013430:	2304      	movcc	r3, #4
 8013432:	441d      	add	r5, r3
 8013434:	445b      	add	r3, fp
 8013436:	461e      	mov	r6, r3
 8013438:	462c      	mov	r4, r5
 801343a:	4544      	cmp	r4, r8
 801343c:	d30e      	bcc.n	801345c <__mdiff+0xf8>
 801343e:	f108 0103 	add.w	r1, r8, #3
 8013442:	1b49      	subs	r1, r1, r5
 8013444:	f021 0103 	bic.w	r1, r1, #3
 8013448:	3d03      	subs	r5, #3
 801344a:	45a8      	cmp	r8, r5
 801344c:	bf38      	it	cc
 801344e:	2100      	movcc	r1, #0
 8013450:	440b      	add	r3, r1
 8013452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013456:	b191      	cbz	r1, 801347e <__mdiff+0x11a>
 8013458:	6117      	str	r7, [r2, #16]
 801345a:	e79d      	b.n	8013398 <__mdiff+0x34>
 801345c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013460:	46e6      	mov	lr, ip
 8013462:	0c08      	lsrs	r0, r1, #16
 8013464:	fa1c fc81 	uxtah	ip, ip, r1
 8013468:	4471      	add	r1, lr
 801346a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801346e:	b289      	uxth	r1, r1
 8013470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013474:	f846 1b04 	str.w	r1, [r6], #4
 8013478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801347c:	e7dd      	b.n	801343a <__mdiff+0xd6>
 801347e:	3f01      	subs	r7, #1
 8013480:	e7e7      	b.n	8013452 <__mdiff+0xee>
 8013482:	bf00      	nop
 8013484:	0801721f 	.word	0x0801721f
 8013488:	08017230 	.word	0x08017230

0801348c <__ulp>:
 801348c:	b082      	sub	sp, #8
 801348e:	ed8d 0b00 	vstr	d0, [sp]
 8013492:	9a01      	ldr	r2, [sp, #4]
 8013494:	4b0f      	ldr	r3, [pc, #60]	@ (80134d4 <__ulp+0x48>)
 8013496:	4013      	ands	r3, r2
 8013498:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801349c:	2b00      	cmp	r3, #0
 801349e:	dc08      	bgt.n	80134b2 <__ulp+0x26>
 80134a0:	425b      	negs	r3, r3
 80134a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80134a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80134aa:	da04      	bge.n	80134b6 <__ulp+0x2a>
 80134ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80134b0:	4113      	asrs	r3, r2
 80134b2:	2200      	movs	r2, #0
 80134b4:	e008      	b.n	80134c8 <__ulp+0x3c>
 80134b6:	f1a2 0314 	sub.w	r3, r2, #20
 80134ba:	2b1e      	cmp	r3, #30
 80134bc:	bfda      	itte	le
 80134be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80134c2:	40da      	lsrle	r2, r3
 80134c4:	2201      	movgt	r2, #1
 80134c6:	2300      	movs	r3, #0
 80134c8:	4619      	mov	r1, r3
 80134ca:	4610      	mov	r0, r2
 80134cc:	ec41 0b10 	vmov	d0, r0, r1
 80134d0:	b002      	add	sp, #8
 80134d2:	4770      	bx	lr
 80134d4:	7ff00000 	.word	0x7ff00000

080134d8 <__b2d>:
 80134d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134dc:	6906      	ldr	r6, [r0, #16]
 80134de:	f100 0814 	add.w	r8, r0, #20
 80134e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80134e6:	1f37      	subs	r7, r6, #4
 80134e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80134ec:	4610      	mov	r0, r2
 80134ee:	f7ff fd53 	bl	8012f98 <__hi0bits>
 80134f2:	f1c0 0320 	rsb	r3, r0, #32
 80134f6:	280a      	cmp	r0, #10
 80134f8:	600b      	str	r3, [r1, #0]
 80134fa:	491b      	ldr	r1, [pc, #108]	@ (8013568 <__b2d+0x90>)
 80134fc:	dc15      	bgt.n	801352a <__b2d+0x52>
 80134fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8013502:	fa22 f30c 	lsr.w	r3, r2, ip
 8013506:	45b8      	cmp	r8, r7
 8013508:	ea43 0501 	orr.w	r5, r3, r1
 801350c:	bf34      	ite	cc
 801350e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013512:	2300      	movcs	r3, #0
 8013514:	3015      	adds	r0, #21
 8013516:	fa02 f000 	lsl.w	r0, r2, r0
 801351a:	fa23 f30c 	lsr.w	r3, r3, ip
 801351e:	4303      	orrs	r3, r0
 8013520:	461c      	mov	r4, r3
 8013522:	ec45 4b10 	vmov	d0, r4, r5
 8013526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801352a:	45b8      	cmp	r8, r7
 801352c:	bf3a      	itte	cc
 801352e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013532:	f1a6 0708 	subcc.w	r7, r6, #8
 8013536:	2300      	movcs	r3, #0
 8013538:	380b      	subs	r0, #11
 801353a:	d012      	beq.n	8013562 <__b2d+0x8a>
 801353c:	f1c0 0120 	rsb	r1, r0, #32
 8013540:	fa23 f401 	lsr.w	r4, r3, r1
 8013544:	4082      	lsls	r2, r0
 8013546:	4322      	orrs	r2, r4
 8013548:	4547      	cmp	r7, r8
 801354a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801354e:	bf8c      	ite	hi
 8013550:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013554:	2200      	movls	r2, #0
 8013556:	4083      	lsls	r3, r0
 8013558:	40ca      	lsrs	r2, r1
 801355a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801355e:	4313      	orrs	r3, r2
 8013560:	e7de      	b.n	8013520 <__b2d+0x48>
 8013562:	ea42 0501 	orr.w	r5, r2, r1
 8013566:	e7db      	b.n	8013520 <__b2d+0x48>
 8013568:	3ff00000 	.word	0x3ff00000

0801356c <__d2b>:
 801356c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013570:	460f      	mov	r7, r1
 8013572:	2101      	movs	r1, #1
 8013574:	ec59 8b10 	vmov	r8, r9, d0
 8013578:	4616      	mov	r6, r2
 801357a:	f7ff fc1b 	bl	8012db4 <_Balloc>
 801357e:	4604      	mov	r4, r0
 8013580:	b930      	cbnz	r0, 8013590 <__d2b+0x24>
 8013582:	4602      	mov	r2, r0
 8013584:	4b23      	ldr	r3, [pc, #140]	@ (8013614 <__d2b+0xa8>)
 8013586:	4824      	ldr	r0, [pc, #144]	@ (8013618 <__d2b+0xac>)
 8013588:	f240 310f 	movw	r1, #783	@ 0x30f
 801358c:	f001 fe90 	bl	80152b0 <__assert_func>
 8013590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013598:	b10d      	cbz	r5, 801359e <__d2b+0x32>
 801359a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	f1b8 0300 	subs.w	r3, r8, #0
 80135a4:	d023      	beq.n	80135ee <__d2b+0x82>
 80135a6:	4668      	mov	r0, sp
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	f7ff fd14 	bl	8012fd6 <__lo0bits>
 80135ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80135b2:	b1d0      	cbz	r0, 80135ea <__d2b+0x7e>
 80135b4:	f1c0 0320 	rsb	r3, r0, #32
 80135b8:	fa02 f303 	lsl.w	r3, r2, r3
 80135bc:	430b      	orrs	r3, r1
 80135be:	40c2      	lsrs	r2, r0
 80135c0:	6163      	str	r3, [r4, #20]
 80135c2:	9201      	str	r2, [sp, #4]
 80135c4:	9b01      	ldr	r3, [sp, #4]
 80135c6:	61a3      	str	r3, [r4, #24]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	bf0c      	ite	eq
 80135cc:	2201      	moveq	r2, #1
 80135ce:	2202      	movne	r2, #2
 80135d0:	6122      	str	r2, [r4, #16]
 80135d2:	b1a5      	cbz	r5, 80135fe <__d2b+0x92>
 80135d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80135d8:	4405      	add	r5, r0
 80135da:	603d      	str	r5, [r7, #0]
 80135dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80135e0:	6030      	str	r0, [r6, #0]
 80135e2:	4620      	mov	r0, r4
 80135e4:	b003      	add	sp, #12
 80135e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ea:	6161      	str	r1, [r4, #20]
 80135ec:	e7ea      	b.n	80135c4 <__d2b+0x58>
 80135ee:	a801      	add	r0, sp, #4
 80135f0:	f7ff fcf1 	bl	8012fd6 <__lo0bits>
 80135f4:	9b01      	ldr	r3, [sp, #4]
 80135f6:	6163      	str	r3, [r4, #20]
 80135f8:	3020      	adds	r0, #32
 80135fa:	2201      	movs	r2, #1
 80135fc:	e7e8      	b.n	80135d0 <__d2b+0x64>
 80135fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013602:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013606:	6038      	str	r0, [r7, #0]
 8013608:	6918      	ldr	r0, [r3, #16]
 801360a:	f7ff fcc5 	bl	8012f98 <__hi0bits>
 801360e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013612:	e7e5      	b.n	80135e0 <__d2b+0x74>
 8013614:	0801721f 	.word	0x0801721f
 8013618:	08017230 	.word	0x08017230

0801361c <__ratio>:
 801361c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013620:	4688      	mov	r8, r1
 8013622:	4669      	mov	r1, sp
 8013624:	4681      	mov	r9, r0
 8013626:	f7ff ff57 	bl	80134d8 <__b2d>
 801362a:	a901      	add	r1, sp, #4
 801362c:	4640      	mov	r0, r8
 801362e:	ec55 4b10 	vmov	r4, r5, d0
 8013632:	f7ff ff51 	bl	80134d8 <__b2d>
 8013636:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801363a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801363e:	1ad2      	subs	r2, r2, r3
 8013640:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013644:	1a5b      	subs	r3, r3, r1
 8013646:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801364a:	ec57 6b10 	vmov	r6, r7, d0
 801364e:	2b00      	cmp	r3, #0
 8013650:	bfd6      	itet	le
 8013652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013656:	462a      	movgt	r2, r5
 8013658:	463a      	movle	r2, r7
 801365a:	46ab      	mov	fp, r5
 801365c:	46a2      	mov	sl, r4
 801365e:	bfce      	itee	gt
 8013660:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013664:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013668:	ee00 3a90 	vmovle	s1, r3
 801366c:	ec4b ab17 	vmov	d7, sl, fp
 8013670:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013674:	b003      	add	sp, #12
 8013676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801367a <__copybits>:
 801367a:	3901      	subs	r1, #1
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	1149      	asrs	r1, r1, #5
 8013680:	6914      	ldr	r4, [r2, #16]
 8013682:	3101      	adds	r1, #1
 8013684:	f102 0314 	add.w	r3, r2, #20
 8013688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801368c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013690:	1f05      	subs	r5, r0, #4
 8013692:	42a3      	cmp	r3, r4
 8013694:	d30c      	bcc.n	80136b0 <__copybits+0x36>
 8013696:	1aa3      	subs	r3, r4, r2
 8013698:	3b11      	subs	r3, #17
 801369a:	f023 0303 	bic.w	r3, r3, #3
 801369e:	3211      	adds	r2, #17
 80136a0:	42a2      	cmp	r2, r4
 80136a2:	bf88      	it	hi
 80136a4:	2300      	movhi	r3, #0
 80136a6:	4418      	add	r0, r3
 80136a8:	2300      	movs	r3, #0
 80136aa:	4288      	cmp	r0, r1
 80136ac:	d305      	bcc.n	80136ba <__copybits+0x40>
 80136ae:	bd70      	pop	{r4, r5, r6, pc}
 80136b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80136b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80136b8:	e7eb      	b.n	8013692 <__copybits+0x18>
 80136ba:	f840 3b04 	str.w	r3, [r0], #4
 80136be:	e7f4      	b.n	80136aa <__copybits+0x30>

080136c0 <__any_on>:
 80136c0:	f100 0214 	add.w	r2, r0, #20
 80136c4:	6900      	ldr	r0, [r0, #16]
 80136c6:	114b      	asrs	r3, r1, #5
 80136c8:	4298      	cmp	r0, r3
 80136ca:	b510      	push	{r4, lr}
 80136cc:	db11      	blt.n	80136f2 <__any_on+0x32>
 80136ce:	dd0a      	ble.n	80136e6 <__any_on+0x26>
 80136d0:	f011 011f 	ands.w	r1, r1, #31
 80136d4:	d007      	beq.n	80136e6 <__any_on+0x26>
 80136d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80136da:	fa24 f001 	lsr.w	r0, r4, r1
 80136de:	fa00 f101 	lsl.w	r1, r0, r1
 80136e2:	428c      	cmp	r4, r1
 80136e4:	d10b      	bne.n	80136fe <__any_on+0x3e>
 80136e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d803      	bhi.n	80136f6 <__any_on+0x36>
 80136ee:	2000      	movs	r0, #0
 80136f0:	bd10      	pop	{r4, pc}
 80136f2:	4603      	mov	r3, r0
 80136f4:	e7f7      	b.n	80136e6 <__any_on+0x26>
 80136f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136fa:	2900      	cmp	r1, #0
 80136fc:	d0f5      	beq.n	80136ea <__any_on+0x2a>
 80136fe:	2001      	movs	r0, #1
 8013700:	e7f6      	b.n	80136f0 <__any_on+0x30>

08013702 <sulp>:
 8013702:	b570      	push	{r4, r5, r6, lr}
 8013704:	4604      	mov	r4, r0
 8013706:	460d      	mov	r5, r1
 8013708:	4616      	mov	r6, r2
 801370a:	ec45 4b10 	vmov	d0, r4, r5
 801370e:	f7ff febd 	bl	801348c <__ulp>
 8013712:	b17e      	cbz	r6, 8013734 <sulp+0x32>
 8013714:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013718:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801371c:	2b00      	cmp	r3, #0
 801371e:	dd09      	ble.n	8013734 <sulp+0x32>
 8013720:	051b      	lsls	r3, r3, #20
 8013722:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013726:	2000      	movs	r0, #0
 8013728:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801372c:	ec41 0b17 	vmov	d7, r0, r1
 8013730:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013734:	bd70      	pop	{r4, r5, r6, pc}
	...

08013738 <_strtod_l>:
 8013738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373c:	ed2d 8b0a 	vpush	{d8-d12}
 8013740:	b097      	sub	sp, #92	@ 0x5c
 8013742:	4688      	mov	r8, r1
 8013744:	920e      	str	r2, [sp, #56]	@ 0x38
 8013746:	2200      	movs	r2, #0
 8013748:	9212      	str	r2, [sp, #72]	@ 0x48
 801374a:	9005      	str	r0, [sp, #20]
 801374c:	f04f 0a00 	mov.w	sl, #0
 8013750:	f04f 0b00 	mov.w	fp, #0
 8013754:	460a      	mov	r2, r1
 8013756:	9211      	str	r2, [sp, #68]	@ 0x44
 8013758:	7811      	ldrb	r1, [r2, #0]
 801375a:	292b      	cmp	r1, #43	@ 0x2b
 801375c:	d04c      	beq.n	80137f8 <_strtod_l+0xc0>
 801375e:	d839      	bhi.n	80137d4 <_strtod_l+0x9c>
 8013760:	290d      	cmp	r1, #13
 8013762:	d833      	bhi.n	80137cc <_strtod_l+0x94>
 8013764:	2908      	cmp	r1, #8
 8013766:	d833      	bhi.n	80137d0 <_strtod_l+0x98>
 8013768:	2900      	cmp	r1, #0
 801376a:	d03c      	beq.n	80137e6 <_strtod_l+0xae>
 801376c:	2200      	movs	r2, #0
 801376e:	9208      	str	r2, [sp, #32]
 8013770:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013772:	782a      	ldrb	r2, [r5, #0]
 8013774:	2a30      	cmp	r2, #48	@ 0x30
 8013776:	f040 80b7 	bne.w	80138e8 <_strtod_l+0x1b0>
 801377a:	786a      	ldrb	r2, [r5, #1]
 801377c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013780:	2a58      	cmp	r2, #88	@ 0x58
 8013782:	d170      	bne.n	8013866 <_strtod_l+0x12e>
 8013784:	9302      	str	r3, [sp, #8]
 8013786:	9b08      	ldr	r3, [sp, #32]
 8013788:	9301      	str	r3, [sp, #4]
 801378a:	ab12      	add	r3, sp, #72	@ 0x48
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	4a90      	ldr	r2, [pc, #576]	@ (80139d0 <_strtod_l+0x298>)
 8013790:	9805      	ldr	r0, [sp, #20]
 8013792:	ab13      	add	r3, sp, #76	@ 0x4c
 8013794:	a911      	add	r1, sp, #68	@ 0x44
 8013796:	f001 fe25 	bl	80153e4 <__gethex>
 801379a:	f010 060f 	ands.w	r6, r0, #15
 801379e:	4604      	mov	r4, r0
 80137a0:	d005      	beq.n	80137ae <_strtod_l+0x76>
 80137a2:	2e06      	cmp	r6, #6
 80137a4:	d12a      	bne.n	80137fc <_strtod_l+0xc4>
 80137a6:	3501      	adds	r5, #1
 80137a8:	2300      	movs	r3, #0
 80137aa:	9511      	str	r5, [sp, #68]	@ 0x44
 80137ac:	9308      	str	r3, [sp, #32]
 80137ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	f040 8537 	bne.w	8014224 <_strtod_l+0xaec>
 80137b6:	9b08      	ldr	r3, [sp, #32]
 80137b8:	ec4b ab10 	vmov	d0, sl, fp
 80137bc:	b1cb      	cbz	r3, 80137f2 <_strtod_l+0xba>
 80137be:	eeb1 0b40 	vneg.f64	d0, d0
 80137c2:	b017      	add	sp, #92	@ 0x5c
 80137c4:	ecbd 8b0a 	vpop	{d8-d12}
 80137c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137cc:	2920      	cmp	r1, #32
 80137ce:	d1cd      	bne.n	801376c <_strtod_l+0x34>
 80137d0:	3201      	adds	r2, #1
 80137d2:	e7c0      	b.n	8013756 <_strtod_l+0x1e>
 80137d4:	292d      	cmp	r1, #45	@ 0x2d
 80137d6:	d1c9      	bne.n	801376c <_strtod_l+0x34>
 80137d8:	2101      	movs	r1, #1
 80137da:	9108      	str	r1, [sp, #32]
 80137dc:	1c51      	adds	r1, r2, #1
 80137de:	9111      	str	r1, [sp, #68]	@ 0x44
 80137e0:	7852      	ldrb	r2, [r2, #1]
 80137e2:	2a00      	cmp	r2, #0
 80137e4:	d1c4      	bne.n	8013770 <_strtod_l+0x38>
 80137e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f040 8517 	bne.w	8014220 <_strtod_l+0xae8>
 80137f2:	ec4b ab10 	vmov	d0, sl, fp
 80137f6:	e7e4      	b.n	80137c2 <_strtod_l+0x8a>
 80137f8:	2100      	movs	r1, #0
 80137fa:	e7ee      	b.n	80137da <_strtod_l+0xa2>
 80137fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80137fe:	b13a      	cbz	r2, 8013810 <_strtod_l+0xd8>
 8013800:	2135      	movs	r1, #53	@ 0x35
 8013802:	a814      	add	r0, sp, #80	@ 0x50
 8013804:	f7ff ff39 	bl	801367a <__copybits>
 8013808:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801380a:	9805      	ldr	r0, [sp, #20]
 801380c:	f7ff fb12 	bl	8012e34 <_Bfree>
 8013810:	1e73      	subs	r3, r6, #1
 8013812:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013814:	2b04      	cmp	r3, #4
 8013816:	d806      	bhi.n	8013826 <_strtod_l+0xee>
 8013818:	e8df f003 	tbb	[pc, r3]
 801381c:	201d0314 	.word	0x201d0314
 8013820:	14          	.byte	0x14
 8013821:	00          	.byte	0x00
 8013822:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013826:	05e3      	lsls	r3, r4, #23
 8013828:	bf48      	it	mi
 801382a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801382e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013832:	0d1b      	lsrs	r3, r3, #20
 8013834:	051b      	lsls	r3, r3, #20
 8013836:	2b00      	cmp	r3, #0
 8013838:	d1b9      	bne.n	80137ae <_strtod_l+0x76>
 801383a:	f7fe fb93 	bl	8011f64 <__errno>
 801383e:	2322      	movs	r3, #34	@ 0x22
 8013840:	6003      	str	r3, [r0, #0]
 8013842:	e7b4      	b.n	80137ae <_strtod_l+0x76>
 8013844:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013848:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801384c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013850:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013854:	e7e7      	b.n	8013826 <_strtod_l+0xee>
 8013856:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80139d8 <_strtod_l+0x2a0>
 801385a:	e7e4      	b.n	8013826 <_strtod_l+0xee>
 801385c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013860:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013864:	e7df      	b.n	8013826 <_strtod_l+0xee>
 8013866:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013868:	1c5a      	adds	r2, r3, #1
 801386a:	9211      	str	r2, [sp, #68]	@ 0x44
 801386c:	785b      	ldrb	r3, [r3, #1]
 801386e:	2b30      	cmp	r3, #48	@ 0x30
 8013870:	d0f9      	beq.n	8013866 <_strtod_l+0x12e>
 8013872:	2b00      	cmp	r3, #0
 8013874:	d09b      	beq.n	80137ae <_strtod_l+0x76>
 8013876:	2301      	movs	r3, #1
 8013878:	9307      	str	r3, [sp, #28]
 801387a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801387c:	930a      	str	r3, [sp, #40]	@ 0x28
 801387e:	2300      	movs	r3, #0
 8013880:	9306      	str	r3, [sp, #24]
 8013882:	4699      	mov	r9, r3
 8013884:	461d      	mov	r5, r3
 8013886:	220a      	movs	r2, #10
 8013888:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801388a:	7804      	ldrb	r4, [r0, #0]
 801388c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013890:	b2d9      	uxtb	r1, r3
 8013892:	2909      	cmp	r1, #9
 8013894:	d92a      	bls.n	80138ec <_strtod_l+0x1b4>
 8013896:	494f      	ldr	r1, [pc, #316]	@ (80139d4 <_strtod_l+0x29c>)
 8013898:	2201      	movs	r2, #1
 801389a:	f001 fcbc 	bl	8015216 <strncmp>
 801389e:	b398      	cbz	r0, 8013908 <_strtod_l+0x1d0>
 80138a0:	2000      	movs	r0, #0
 80138a2:	4622      	mov	r2, r4
 80138a4:	462b      	mov	r3, r5
 80138a6:	4607      	mov	r7, r0
 80138a8:	4601      	mov	r1, r0
 80138aa:	2a65      	cmp	r2, #101	@ 0x65
 80138ac:	d001      	beq.n	80138b2 <_strtod_l+0x17a>
 80138ae:	2a45      	cmp	r2, #69	@ 0x45
 80138b0:	d118      	bne.n	80138e4 <_strtod_l+0x1ac>
 80138b2:	b91b      	cbnz	r3, 80138bc <_strtod_l+0x184>
 80138b4:	9b07      	ldr	r3, [sp, #28]
 80138b6:	4303      	orrs	r3, r0
 80138b8:	d095      	beq.n	80137e6 <_strtod_l+0xae>
 80138ba:	2300      	movs	r3, #0
 80138bc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80138c0:	f108 0201 	add.w	r2, r8, #1
 80138c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80138c6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80138ca:	2a2b      	cmp	r2, #43	@ 0x2b
 80138cc:	d074      	beq.n	80139b8 <_strtod_l+0x280>
 80138ce:	2a2d      	cmp	r2, #45	@ 0x2d
 80138d0:	d07a      	beq.n	80139c8 <_strtod_l+0x290>
 80138d2:	f04f 0e00 	mov.w	lr, #0
 80138d6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80138da:	2c09      	cmp	r4, #9
 80138dc:	f240 8082 	bls.w	80139e4 <_strtod_l+0x2ac>
 80138e0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80138e4:	2400      	movs	r4, #0
 80138e6:	e09d      	b.n	8013a24 <_strtod_l+0x2ec>
 80138e8:	2300      	movs	r3, #0
 80138ea:	e7c5      	b.n	8013878 <_strtod_l+0x140>
 80138ec:	2d08      	cmp	r5, #8
 80138ee:	bfc8      	it	gt
 80138f0:	9906      	ldrgt	r1, [sp, #24]
 80138f2:	f100 0001 	add.w	r0, r0, #1
 80138f6:	bfca      	itet	gt
 80138f8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80138fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8013900:	9306      	strgt	r3, [sp, #24]
 8013902:	3501      	adds	r5, #1
 8013904:	9011      	str	r0, [sp, #68]	@ 0x44
 8013906:	e7bf      	b.n	8013888 <_strtod_l+0x150>
 8013908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801390a:	1c5a      	adds	r2, r3, #1
 801390c:	9211      	str	r2, [sp, #68]	@ 0x44
 801390e:	785a      	ldrb	r2, [r3, #1]
 8013910:	b3bd      	cbz	r5, 8013982 <_strtod_l+0x24a>
 8013912:	4607      	mov	r7, r0
 8013914:	462b      	mov	r3, r5
 8013916:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801391a:	2909      	cmp	r1, #9
 801391c:	d912      	bls.n	8013944 <_strtod_l+0x20c>
 801391e:	2101      	movs	r1, #1
 8013920:	e7c3      	b.n	80138aa <_strtod_l+0x172>
 8013922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013924:	1c5a      	adds	r2, r3, #1
 8013926:	9211      	str	r2, [sp, #68]	@ 0x44
 8013928:	785a      	ldrb	r2, [r3, #1]
 801392a:	3001      	adds	r0, #1
 801392c:	2a30      	cmp	r2, #48	@ 0x30
 801392e:	d0f8      	beq.n	8013922 <_strtod_l+0x1ea>
 8013930:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013934:	2b08      	cmp	r3, #8
 8013936:	f200 847a 	bhi.w	801422e <_strtod_l+0xaf6>
 801393a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801393c:	930a      	str	r3, [sp, #40]	@ 0x28
 801393e:	4607      	mov	r7, r0
 8013940:	2000      	movs	r0, #0
 8013942:	4603      	mov	r3, r0
 8013944:	3a30      	subs	r2, #48	@ 0x30
 8013946:	f100 0101 	add.w	r1, r0, #1
 801394a:	d014      	beq.n	8013976 <_strtod_l+0x23e>
 801394c:	440f      	add	r7, r1
 801394e:	469c      	mov	ip, r3
 8013950:	f04f 0e0a 	mov.w	lr, #10
 8013954:	f10c 0401 	add.w	r4, ip, #1
 8013958:	1ae6      	subs	r6, r4, r3
 801395a:	42b1      	cmp	r1, r6
 801395c:	dc13      	bgt.n	8013986 <_strtod_l+0x24e>
 801395e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013962:	1819      	adds	r1, r3, r0
 8013964:	2908      	cmp	r1, #8
 8013966:	f103 0301 	add.w	r3, r3, #1
 801396a:	4403      	add	r3, r0
 801396c:	dc19      	bgt.n	80139a2 <_strtod_l+0x26a>
 801396e:	210a      	movs	r1, #10
 8013970:	fb01 2909 	mla	r9, r1, r9, r2
 8013974:	2100      	movs	r1, #0
 8013976:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013978:	1c50      	adds	r0, r2, #1
 801397a:	9011      	str	r0, [sp, #68]	@ 0x44
 801397c:	7852      	ldrb	r2, [r2, #1]
 801397e:	4608      	mov	r0, r1
 8013980:	e7c9      	b.n	8013916 <_strtod_l+0x1de>
 8013982:	4628      	mov	r0, r5
 8013984:	e7d2      	b.n	801392c <_strtod_l+0x1f4>
 8013986:	f1bc 0f08 	cmp.w	ip, #8
 801398a:	dc03      	bgt.n	8013994 <_strtod_l+0x25c>
 801398c:	fb0e f909 	mul.w	r9, lr, r9
 8013990:	46a4      	mov	ip, r4
 8013992:	e7df      	b.n	8013954 <_strtod_l+0x21c>
 8013994:	2c10      	cmp	r4, #16
 8013996:	bfde      	ittt	le
 8013998:	9e06      	ldrle	r6, [sp, #24]
 801399a:	fb0e f606 	mulle.w	r6, lr, r6
 801399e:	9606      	strle	r6, [sp, #24]
 80139a0:	e7f6      	b.n	8013990 <_strtod_l+0x258>
 80139a2:	290f      	cmp	r1, #15
 80139a4:	bfdf      	itttt	le
 80139a6:	9806      	ldrle	r0, [sp, #24]
 80139a8:	210a      	movle	r1, #10
 80139aa:	fb01 2200 	mlale	r2, r1, r0, r2
 80139ae:	9206      	strle	r2, [sp, #24]
 80139b0:	e7e0      	b.n	8013974 <_strtod_l+0x23c>
 80139b2:	2700      	movs	r7, #0
 80139b4:	2101      	movs	r1, #1
 80139b6:	e77d      	b.n	80138b4 <_strtod_l+0x17c>
 80139b8:	f04f 0e00 	mov.w	lr, #0
 80139bc:	f108 0202 	add.w	r2, r8, #2
 80139c0:	9211      	str	r2, [sp, #68]	@ 0x44
 80139c2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80139c6:	e786      	b.n	80138d6 <_strtod_l+0x19e>
 80139c8:	f04f 0e01 	mov.w	lr, #1
 80139cc:	e7f6      	b.n	80139bc <_strtod_l+0x284>
 80139ce:	bf00      	nop
 80139d0:	0801746c 	.word	0x0801746c
 80139d4:	08017289 	.word	0x08017289
 80139d8:	7ff00000 	.word	0x7ff00000
 80139dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139de:	1c54      	adds	r4, r2, #1
 80139e0:	9411      	str	r4, [sp, #68]	@ 0x44
 80139e2:	7852      	ldrb	r2, [r2, #1]
 80139e4:	2a30      	cmp	r2, #48	@ 0x30
 80139e6:	d0f9      	beq.n	80139dc <_strtod_l+0x2a4>
 80139e8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80139ec:	2c08      	cmp	r4, #8
 80139ee:	f63f af79 	bhi.w	80138e4 <_strtod_l+0x1ac>
 80139f2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80139f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80139fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139fc:	1c54      	adds	r4, r2, #1
 80139fe:	9411      	str	r4, [sp, #68]	@ 0x44
 8013a00:	7852      	ldrb	r2, [r2, #1]
 8013a02:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013a06:	2e09      	cmp	r6, #9
 8013a08:	d937      	bls.n	8013a7a <_strtod_l+0x342>
 8013a0a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013a0c:	1ba4      	subs	r4, r4, r6
 8013a0e:	2c08      	cmp	r4, #8
 8013a10:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013a14:	dc02      	bgt.n	8013a1c <_strtod_l+0x2e4>
 8013a16:	4564      	cmp	r4, ip
 8013a18:	bfa8      	it	ge
 8013a1a:	4664      	movge	r4, ip
 8013a1c:	f1be 0f00 	cmp.w	lr, #0
 8013a20:	d000      	beq.n	8013a24 <_strtod_l+0x2ec>
 8013a22:	4264      	negs	r4, r4
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d14d      	bne.n	8013ac4 <_strtod_l+0x38c>
 8013a28:	9b07      	ldr	r3, [sp, #28]
 8013a2a:	4318      	orrs	r0, r3
 8013a2c:	f47f aebf 	bne.w	80137ae <_strtod_l+0x76>
 8013a30:	2900      	cmp	r1, #0
 8013a32:	f47f aed8 	bne.w	80137e6 <_strtod_l+0xae>
 8013a36:	2a69      	cmp	r2, #105	@ 0x69
 8013a38:	d027      	beq.n	8013a8a <_strtod_l+0x352>
 8013a3a:	dc24      	bgt.n	8013a86 <_strtod_l+0x34e>
 8013a3c:	2a49      	cmp	r2, #73	@ 0x49
 8013a3e:	d024      	beq.n	8013a8a <_strtod_l+0x352>
 8013a40:	2a4e      	cmp	r2, #78	@ 0x4e
 8013a42:	f47f aed0 	bne.w	80137e6 <_strtod_l+0xae>
 8013a46:	4997      	ldr	r1, [pc, #604]	@ (8013ca4 <_strtod_l+0x56c>)
 8013a48:	a811      	add	r0, sp, #68	@ 0x44
 8013a4a:	f001 feed 	bl	8015828 <__match>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	f43f aec9 	beq.w	80137e6 <_strtod_l+0xae>
 8013a54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	2b28      	cmp	r3, #40	@ 0x28
 8013a5a:	d12d      	bne.n	8013ab8 <_strtod_l+0x380>
 8013a5c:	4992      	ldr	r1, [pc, #584]	@ (8013ca8 <_strtod_l+0x570>)
 8013a5e:	aa14      	add	r2, sp, #80	@ 0x50
 8013a60:	a811      	add	r0, sp, #68	@ 0x44
 8013a62:	f001 fef5 	bl	8015850 <__hexnan>
 8013a66:	2805      	cmp	r0, #5
 8013a68:	d126      	bne.n	8013ab8 <_strtod_l+0x380>
 8013a6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a6c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013a70:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013a74:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013a78:	e699      	b.n	80137ae <_strtod_l+0x76>
 8013a7a:	240a      	movs	r4, #10
 8013a7c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013a80:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013a84:	e7b9      	b.n	80139fa <_strtod_l+0x2c2>
 8013a86:	2a6e      	cmp	r2, #110	@ 0x6e
 8013a88:	e7db      	b.n	8013a42 <_strtod_l+0x30a>
 8013a8a:	4988      	ldr	r1, [pc, #544]	@ (8013cac <_strtod_l+0x574>)
 8013a8c:	a811      	add	r0, sp, #68	@ 0x44
 8013a8e:	f001 fecb 	bl	8015828 <__match>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	f43f aea7 	beq.w	80137e6 <_strtod_l+0xae>
 8013a98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a9a:	4985      	ldr	r1, [pc, #532]	@ (8013cb0 <_strtod_l+0x578>)
 8013a9c:	3b01      	subs	r3, #1
 8013a9e:	a811      	add	r0, sp, #68	@ 0x44
 8013aa0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013aa2:	f001 fec1 	bl	8015828 <__match>
 8013aa6:	b910      	cbnz	r0, 8013aae <_strtod_l+0x376>
 8013aa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013aaa:	3301      	adds	r3, #1
 8013aac:	9311      	str	r3, [sp, #68]	@ 0x44
 8013aae:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013cc4 <_strtod_l+0x58c>
 8013ab2:	f04f 0a00 	mov.w	sl, #0
 8013ab6:	e67a      	b.n	80137ae <_strtod_l+0x76>
 8013ab8:	487e      	ldr	r0, [pc, #504]	@ (8013cb4 <_strtod_l+0x57c>)
 8013aba:	f001 fbf1 	bl	80152a0 <nan>
 8013abe:	ec5b ab10 	vmov	sl, fp, d0
 8013ac2:	e674      	b.n	80137ae <_strtod_l+0x76>
 8013ac4:	ee07 9a90 	vmov	s15, r9
 8013ac8:	1be2      	subs	r2, r4, r7
 8013aca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013ace:	2d00      	cmp	r5, #0
 8013ad0:	bf08      	it	eq
 8013ad2:	461d      	moveq	r5, r3
 8013ad4:	2b10      	cmp	r3, #16
 8013ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ad8:	461a      	mov	r2, r3
 8013ada:	bfa8      	it	ge
 8013adc:	2210      	movge	r2, #16
 8013ade:	2b09      	cmp	r3, #9
 8013ae0:	ec5b ab17 	vmov	sl, fp, d7
 8013ae4:	dc15      	bgt.n	8013b12 <_strtod_l+0x3da>
 8013ae6:	1be1      	subs	r1, r4, r7
 8013ae8:	2900      	cmp	r1, #0
 8013aea:	f43f ae60 	beq.w	80137ae <_strtod_l+0x76>
 8013aee:	eba4 0107 	sub.w	r1, r4, r7
 8013af2:	dd72      	ble.n	8013bda <_strtod_l+0x4a2>
 8013af4:	2916      	cmp	r1, #22
 8013af6:	dc59      	bgt.n	8013bac <_strtod_l+0x474>
 8013af8:	4b6f      	ldr	r3, [pc, #444]	@ (8013cb8 <_strtod_l+0x580>)
 8013afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b00:	ed93 7b00 	vldr	d7, [r3]
 8013b04:	ec4b ab16 	vmov	d6, sl, fp
 8013b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b0c:	ec5b ab17 	vmov	sl, fp, d7
 8013b10:	e64d      	b.n	80137ae <_strtod_l+0x76>
 8013b12:	4969      	ldr	r1, [pc, #420]	@ (8013cb8 <_strtod_l+0x580>)
 8013b14:	eddd 6a06 	vldr	s13, [sp, #24]
 8013b18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013b1c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013b20:	2b0f      	cmp	r3, #15
 8013b22:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013b26:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013b2a:	ec5b ab16 	vmov	sl, fp, d6
 8013b2e:	ddda      	ble.n	8013ae6 <_strtod_l+0x3ae>
 8013b30:	1a9a      	subs	r2, r3, r2
 8013b32:	1be1      	subs	r1, r4, r7
 8013b34:	440a      	add	r2, r1
 8013b36:	2a00      	cmp	r2, #0
 8013b38:	f340 8094 	ble.w	8013c64 <_strtod_l+0x52c>
 8013b3c:	f012 000f 	ands.w	r0, r2, #15
 8013b40:	d00a      	beq.n	8013b58 <_strtod_l+0x420>
 8013b42:	495d      	ldr	r1, [pc, #372]	@ (8013cb8 <_strtod_l+0x580>)
 8013b44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013b48:	ed91 7b00 	vldr	d7, [r1]
 8013b4c:	ec4b ab16 	vmov	d6, sl, fp
 8013b50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b54:	ec5b ab17 	vmov	sl, fp, d7
 8013b58:	f032 020f 	bics.w	r2, r2, #15
 8013b5c:	d073      	beq.n	8013c46 <_strtod_l+0x50e>
 8013b5e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013b62:	dd47      	ble.n	8013bf4 <_strtod_l+0x4bc>
 8013b64:	2400      	movs	r4, #0
 8013b66:	4625      	mov	r5, r4
 8013b68:	9407      	str	r4, [sp, #28]
 8013b6a:	4626      	mov	r6, r4
 8013b6c:	9a05      	ldr	r2, [sp, #20]
 8013b6e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013cc4 <_strtod_l+0x58c>
 8013b72:	2322      	movs	r3, #34	@ 0x22
 8013b74:	6013      	str	r3, [r2, #0]
 8013b76:	f04f 0a00 	mov.w	sl, #0
 8013b7a:	9b07      	ldr	r3, [sp, #28]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f43f ae16 	beq.w	80137ae <_strtod_l+0x76>
 8013b82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013b84:	9805      	ldr	r0, [sp, #20]
 8013b86:	f7ff f955 	bl	8012e34 <_Bfree>
 8013b8a:	9805      	ldr	r0, [sp, #20]
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	f7ff f951 	bl	8012e34 <_Bfree>
 8013b92:	9805      	ldr	r0, [sp, #20]
 8013b94:	4629      	mov	r1, r5
 8013b96:	f7ff f94d 	bl	8012e34 <_Bfree>
 8013b9a:	9907      	ldr	r1, [sp, #28]
 8013b9c:	9805      	ldr	r0, [sp, #20]
 8013b9e:	f7ff f949 	bl	8012e34 <_Bfree>
 8013ba2:	9805      	ldr	r0, [sp, #20]
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	f7ff f945 	bl	8012e34 <_Bfree>
 8013baa:	e600      	b.n	80137ae <_strtod_l+0x76>
 8013bac:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013bb0:	1be0      	subs	r0, r4, r7
 8013bb2:	4281      	cmp	r1, r0
 8013bb4:	dbbc      	blt.n	8013b30 <_strtod_l+0x3f8>
 8013bb6:	4a40      	ldr	r2, [pc, #256]	@ (8013cb8 <_strtod_l+0x580>)
 8013bb8:	f1c3 030f 	rsb	r3, r3, #15
 8013bbc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013bc0:	ed91 7b00 	vldr	d7, [r1]
 8013bc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013bc6:	ec4b ab16 	vmov	d6, sl, fp
 8013bca:	1acb      	subs	r3, r1, r3
 8013bcc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013bd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013bd4:	ed92 6b00 	vldr	d6, [r2]
 8013bd8:	e796      	b.n	8013b08 <_strtod_l+0x3d0>
 8013bda:	3116      	adds	r1, #22
 8013bdc:	dba8      	blt.n	8013b30 <_strtod_l+0x3f8>
 8013bde:	4b36      	ldr	r3, [pc, #216]	@ (8013cb8 <_strtod_l+0x580>)
 8013be0:	1b3c      	subs	r4, r7, r4
 8013be2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013be6:	ed94 7b00 	vldr	d7, [r4]
 8013bea:	ec4b ab16 	vmov	d6, sl, fp
 8013bee:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013bf2:	e78b      	b.n	8013b0c <_strtod_l+0x3d4>
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	ec4b ab17 	vmov	d7, sl, fp
 8013bfa:	4e30      	ldr	r6, [pc, #192]	@ (8013cbc <_strtod_l+0x584>)
 8013bfc:	1112      	asrs	r2, r2, #4
 8013bfe:	4601      	mov	r1, r0
 8013c00:	2a01      	cmp	r2, #1
 8013c02:	dc23      	bgt.n	8013c4c <_strtod_l+0x514>
 8013c04:	b108      	cbz	r0, 8013c0a <_strtod_l+0x4d2>
 8013c06:	ec5b ab17 	vmov	sl, fp, d7
 8013c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8013cbc <_strtod_l+0x584>)
 8013c0c:	482c      	ldr	r0, [pc, #176]	@ (8013cc0 <_strtod_l+0x588>)
 8013c0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013c12:	ed92 7b00 	vldr	d7, [r2]
 8013c16:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013c1a:	ec4b ab16 	vmov	d6, sl, fp
 8013c1e:	4a29      	ldr	r2, [pc, #164]	@ (8013cc4 <_strtod_l+0x58c>)
 8013c20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c24:	ee17 1a90 	vmov	r1, s15
 8013c28:	400a      	ands	r2, r1
 8013c2a:	4282      	cmp	r2, r0
 8013c2c:	ec5b ab17 	vmov	sl, fp, d7
 8013c30:	d898      	bhi.n	8013b64 <_strtod_l+0x42c>
 8013c32:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013c36:	4282      	cmp	r2, r0
 8013c38:	bf86      	itte	hi
 8013c3a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013cc8 <_strtod_l+0x590>
 8013c3e:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013c42:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013c46:	2200      	movs	r2, #0
 8013c48:	9206      	str	r2, [sp, #24]
 8013c4a:	e076      	b.n	8013d3a <_strtod_l+0x602>
 8013c4c:	f012 0f01 	tst.w	r2, #1
 8013c50:	d004      	beq.n	8013c5c <_strtod_l+0x524>
 8013c52:	ed96 6b00 	vldr	d6, [r6]
 8013c56:	2001      	movs	r0, #1
 8013c58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c5c:	3101      	adds	r1, #1
 8013c5e:	1052      	asrs	r2, r2, #1
 8013c60:	3608      	adds	r6, #8
 8013c62:	e7cd      	b.n	8013c00 <_strtod_l+0x4c8>
 8013c64:	d0ef      	beq.n	8013c46 <_strtod_l+0x50e>
 8013c66:	4252      	negs	r2, r2
 8013c68:	f012 000f 	ands.w	r0, r2, #15
 8013c6c:	d00a      	beq.n	8013c84 <_strtod_l+0x54c>
 8013c6e:	4912      	ldr	r1, [pc, #72]	@ (8013cb8 <_strtod_l+0x580>)
 8013c70:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013c74:	ed91 7b00 	vldr	d7, [r1]
 8013c78:	ec4b ab16 	vmov	d6, sl, fp
 8013c7c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013c80:	ec5b ab17 	vmov	sl, fp, d7
 8013c84:	1112      	asrs	r2, r2, #4
 8013c86:	d0de      	beq.n	8013c46 <_strtod_l+0x50e>
 8013c88:	2a1f      	cmp	r2, #31
 8013c8a:	dd1f      	ble.n	8013ccc <_strtod_l+0x594>
 8013c8c:	2400      	movs	r4, #0
 8013c8e:	4625      	mov	r5, r4
 8013c90:	9407      	str	r4, [sp, #28]
 8013c92:	4626      	mov	r6, r4
 8013c94:	9a05      	ldr	r2, [sp, #20]
 8013c96:	2322      	movs	r3, #34	@ 0x22
 8013c98:	f04f 0a00 	mov.w	sl, #0
 8013c9c:	f04f 0b00 	mov.w	fp, #0
 8013ca0:	6013      	str	r3, [r2, #0]
 8013ca2:	e76a      	b.n	8013b7a <_strtod_l+0x442>
 8013ca4:	08017179 	.word	0x08017179
 8013ca8:	08017458 	.word	0x08017458
 8013cac:	08017171 	.word	0x08017171
 8013cb0:	080171a6 	.word	0x080171a6
 8013cb4:	080172fa 	.word	0x080172fa
 8013cb8:	08017390 	.word	0x08017390
 8013cbc:	08017368 	.word	0x08017368
 8013cc0:	7ca00000 	.word	0x7ca00000
 8013cc4:	7ff00000 	.word	0x7ff00000
 8013cc8:	7fefffff 	.word	0x7fefffff
 8013ccc:	f012 0110 	ands.w	r1, r2, #16
 8013cd0:	bf18      	it	ne
 8013cd2:	216a      	movne	r1, #106	@ 0x6a
 8013cd4:	9106      	str	r1, [sp, #24]
 8013cd6:	ec4b ab17 	vmov	d7, sl, fp
 8013cda:	49af      	ldr	r1, [pc, #700]	@ (8013f98 <_strtod_l+0x860>)
 8013cdc:	2000      	movs	r0, #0
 8013cde:	07d6      	lsls	r6, r2, #31
 8013ce0:	d504      	bpl.n	8013cec <_strtod_l+0x5b4>
 8013ce2:	ed91 6b00 	vldr	d6, [r1]
 8013ce6:	2001      	movs	r0, #1
 8013ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013cec:	1052      	asrs	r2, r2, #1
 8013cee:	f101 0108 	add.w	r1, r1, #8
 8013cf2:	d1f4      	bne.n	8013cde <_strtod_l+0x5a6>
 8013cf4:	b108      	cbz	r0, 8013cfa <_strtod_l+0x5c2>
 8013cf6:	ec5b ab17 	vmov	sl, fp, d7
 8013cfa:	9a06      	ldr	r2, [sp, #24]
 8013cfc:	b1b2      	cbz	r2, 8013d2c <_strtod_l+0x5f4>
 8013cfe:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013d02:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013d06:	2a00      	cmp	r2, #0
 8013d08:	4658      	mov	r0, fp
 8013d0a:	dd0f      	ble.n	8013d2c <_strtod_l+0x5f4>
 8013d0c:	2a1f      	cmp	r2, #31
 8013d0e:	dd55      	ble.n	8013dbc <_strtod_l+0x684>
 8013d10:	2a34      	cmp	r2, #52	@ 0x34
 8013d12:	bfde      	ittt	le
 8013d14:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 8013d18:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013d1c:	408a      	lslle	r2, r1
 8013d1e:	f04f 0a00 	mov.w	sl, #0
 8013d22:	bfcc      	ite	gt
 8013d24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013d28:	ea02 0b00 	andle.w	fp, r2, r0
 8013d2c:	ec4b ab17 	vmov	d7, sl, fp
 8013d30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d38:	d0a8      	beq.n	8013c8c <_strtod_l+0x554>
 8013d3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013d3c:	9805      	ldr	r0, [sp, #20]
 8013d3e:	f8cd 9000 	str.w	r9, [sp]
 8013d42:	462a      	mov	r2, r5
 8013d44:	f7ff f8de 	bl	8012f04 <__s2b>
 8013d48:	9007      	str	r0, [sp, #28]
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	f43f af0a 	beq.w	8013b64 <_strtod_l+0x42c>
 8013d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d52:	1b3f      	subs	r7, r7, r4
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	bfb4      	ite	lt
 8013d58:	463b      	movlt	r3, r7
 8013d5a:	2300      	movge	r3, #0
 8013d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d60:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8013f88 <_strtod_l+0x850>
 8013d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d68:	2400      	movs	r4, #0
 8013d6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013d6c:	4625      	mov	r5, r4
 8013d6e:	9b07      	ldr	r3, [sp, #28]
 8013d70:	9805      	ldr	r0, [sp, #20]
 8013d72:	6859      	ldr	r1, [r3, #4]
 8013d74:	f7ff f81e 	bl	8012db4 <_Balloc>
 8013d78:	4606      	mov	r6, r0
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	f43f aef6 	beq.w	8013b6c <_strtod_l+0x434>
 8013d80:	9b07      	ldr	r3, [sp, #28]
 8013d82:	691a      	ldr	r2, [r3, #16]
 8013d84:	ec4b ab19 	vmov	d9, sl, fp
 8013d88:	3202      	adds	r2, #2
 8013d8a:	f103 010c 	add.w	r1, r3, #12
 8013d8e:	0092      	lsls	r2, r2, #2
 8013d90:	300c      	adds	r0, #12
 8013d92:	f7fe f914 	bl	8011fbe <memcpy>
 8013d96:	eeb0 0b49 	vmov.f64	d0, d9
 8013d9a:	9805      	ldr	r0, [sp, #20]
 8013d9c:	aa14      	add	r2, sp, #80	@ 0x50
 8013d9e:	a913      	add	r1, sp, #76	@ 0x4c
 8013da0:	f7ff fbe4 	bl	801356c <__d2b>
 8013da4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013da6:	2800      	cmp	r0, #0
 8013da8:	f43f aee0 	beq.w	8013b6c <_strtod_l+0x434>
 8013dac:	9805      	ldr	r0, [sp, #20]
 8013dae:	2101      	movs	r1, #1
 8013db0:	f7ff f93e 	bl	8013030 <__i2b>
 8013db4:	4605      	mov	r5, r0
 8013db6:	b940      	cbnz	r0, 8013dca <_strtod_l+0x692>
 8013db8:	2500      	movs	r5, #0
 8013dba:	e6d7      	b.n	8013b6c <_strtod_l+0x434>
 8013dbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8013dc4:	ea02 0a0a 	and.w	sl, r2, sl
 8013dc8:	e7b0      	b.n	8013d2c <_strtod_l+0x5f4>
 8013dca:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013dcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013dce:	2f00      	cmp	r7, #0
 8013dd0:	bfab      	itete	ge
 8013dd2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013dd4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013dd6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013dda:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013dde:	bfac      	ite	ge
 8013de0:	eb07 0903 	addge.w	r9, r7, r3
 8013de4:	eba3 0807 	sublt.w	r8, r3, r7
 8013de8:	9b06      	ldr	r3, [sp, #24]
 8013dea:	1aff      	subs	r7, r7, r3
 8013dec:	4417      	add	r7, r2
 8013dee:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013df2:	4a6a      	ldr	r2, [pc, #424]	@ (8013f9c <_strtod_l+0x864>)
 8013df4:	3f01      	subs	r7, #1
 8013df6:	4297      	cmp	r7, r2
 8013df8:	da51      	bge.n	8013e9e <_strtod_l+0x766>
 8013dfa:	1bd1      	subs	r1, r2, r7
 8013dfc:	291f      	cmp	r1, #31
 8013dfe:	eba3 0301 	sub.w	r3, r3, r1
 8013e02:	f04f 0201 	mov.w	r2, #1
 8013e06:	dc3e      	bgt.n	8013e86 <_strtod_l+0x74e>
 8013e08:	408a      	lsls	r2, r1
 8013e0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013e10:	eb09 0703 	add.w	r7, r9, r3
 8013e14:	4498      	add	r8, r3
 8013e16:	9b06      	ldr	r3, [sp, #24]
 8013e18:	45b9      	cmp	r9, r7
 8013e1a:	4498      	add	r8, r3
 8013e1c:	464b      	mov	r3, r9
 8013e1e:	bfa8      	it	ge
 8013e20:	463b      	movge	r3, r7
 8013e22:	4543      	cmp	r3, r8
 8013e24:	bfa8      	it	ge
 8013e26:	4643      	movge	r3, r8
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	bfc2      	ittt	gt
 8013e2c:	1aff      	subgt	r7, r7, r3
 8013e2e:	eba8 0803 	subgt.w	r8, r8, r3
 8013e32:	eba9 0903 	subgt.w	r9, r9, r3
 8013e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	dd16      	ble.n	8013e6a <_strtod_l+0x732>
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	9805      	ldr	r0, [sp, #20]
 8013e40:	461a      	mov	r2, r3
 8013e42:	f7ff f9ad 	bl	80131a0 <__pow5mult>
 8013e46:	4605      	mov	r5, r0
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	d0b5      	beq.n	8013db8 <_strtod_l+0x680>
 8013e4c:	4601      	mov	r1, r0
 8013e4e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013e50:	9805      	ldr	r0, [sp, #20]
 8013e52:	f7ff f903 	bl	801305c <__multiply>
 8013e56:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	f43f ae87 	beq.w	8013b6c <_strtod_l+0x434>
 8013e5e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013e60:	9805      	ldr	r0, [sp, #20]
 8013e62:	f7fe ffe7 	bl	8012e34 <_Bfree>
 8013e66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e68:	9312      	str	r3, [sp, #72]	@ 0x48
 8013e6a:	2f00      	cmp	r7, #0
 8013e6c:	dc1b      	bgt.n	8013ea6 <_strtod_l+0x76e>
 8013e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	dd21      	ble.n	8013eb8 <_strtod_l+0x780>
 8013e74:	4631      	mov	r1, r6
 8013e76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e78:	9805      	ldr	r0, [sp, #20]
 8013e7a:	f7ff f991 	bl	80131a0 <__pow5mult>
 8013e7e:	4606      	mov	r6, r0
 8013e80:	b9d0      	cbnz	r0, 8013eb8 <_strtod_l+0x780>
 8013e82:	2600      	movs	r6, #0
 8013e84:	e672      	b.n	8013b6c <_strtod_l+0x434>
 8013e86:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013e8a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013e8e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013e92:	37e2      	adds	r7, #226	@ 0xe2
 8013e94:	fa02 f107 	lsl.w	r1, r2, r7
 8013e98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013e9a:	920c      	str	r2, [sp, #48]	@ 0x30
 8013e9c:	e7b8      	b.n	8013e10 <_strtod_l+0x6d8>
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	e7f9      	b.n	8013e9a <_strtod_l+0x762>
 8013ea6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013ea8:	9805      	ldr	r0, [sp, #20]
 8013eaa:	463a      	mov	r2, r7
 8013eac:	f7ff f9d2 	bl	8013254 <__lshift>
 8013eb0:	9012      	str	r0, [sp, #72]	@ 0x48
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d1db      	bne.n	8013e6e <_strtod_l+0x736>
 8013eb6:	e659      	b.n	8013b6c <_strtod_l+0x434>
 8013eb8:	f1b8 0f00 	cmp.w	r8, #0
 8013ebc:	dd07      	ble.n	8013ece <_strtod_l+0x796>
 8013ebe:	4631      	mov	r1, r6
 8013ec0:	9805      	ldr	r0, [sp, #20]
 8013ec2:	4642      	mov	r2, r8
 8013ec4:	f7ff f9c6 	bl	8013254 <__lshift>
 8013ec8:	4606      	mov	r6, r0
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	d0d9      	beq.n	8013e82 <_strtod_l+0x74a>
 8013ece:	f1b9 0f00 	cmp.w	r9, #0
 8013ed2:	dd08      	ble.n	8013ee6 <_strtod_l+0x7ae>
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	9805      	ldr	r0, [sp, #20]
 8013ed8:	464a      	mov	r2, r9
 8013eda:	f7ff f9bb 	bl	8013254 <__lshift>
 8013ede:	4605      	mov	r5, r0
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	f43f ae43 	beq.w	8013b6c <_strtod_l+0x434>
 8013ee6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013ee8:	9805      	ldr	r0, [sp, #20]
 8013eea:	4632      	mov	r2, r6
 8013eec:	f7ff fa3a 	bl	8013364 <__mdiff>
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	f43f ae3a 	beq.w	8013b6c <_strtod_l+0x434>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013efe:	60c3      	str	r3, [r0, #12]
 8013f00:	4629      	mov	r1, r5
 8013f02:	f7ff fa13 	bl	801332c <__mcmp>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	da4c      	bge.n	8013fa4 <_strtod_l+0x86c>
 8013f0a:	ea58 080a 	orrs.w	r8, r8, sl
 8013f0e:	d172      	bne.n	8013ff6 <_strtod_l+0x8be>
 8013f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d16e      	bne.n	8013ff6 <_strtod_l+0x8be>
 8013f18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f1c:	0d1b      	lsrs	r3, r3, #20
 8013f1e:	051b      	lsls	r3, r3, #20
 8013f20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f24:	d967      	bls.n	8013ff6 <_strtod_l+0x8be>
 8013f26:	6963      	ldr	r3, [r4, #20]
 8013f28:	b913      	cbnz	r3, 8013f30 <_strtod_l+0x7f8>
 8013f2a:	6923      	ldr	r3, [r4, #16]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	dd62      	ble.n	8013ff6 <_strtod_l+0x8be>
 8013f30:	4621      	mov	r1, r4
 8013f32:	2201      	movs	r2, #1
 8013f34:	9805      	ldr	r0, [sp, #20]
 8013f36:	f7ff f98d 	bl	8013254 <__lshift>
 8013f3a:	4629      	mov	r1, r5
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	f7ff f9f5 	bl	801332c <__mcmp>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	dd57      	ble.n	8013ff6 <_strtod_l+0x8be>
 8013f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f4a:	9a06      	ldr	r2, [sp, #24]
 8013f4c:	0d1b      	lsrs	r3, r3, #20
 8013f4e:	051b      	lsls	r3, r3, #20
 8013f50:	2a00      	cmp	r2, #0
 8013f52:	d06e      	beq.n	8014032 <_strtod_l+0x8fa>
 8013f54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f58:	d86b      	bhi.n	8014032 <_strtod_l+0x8fa>
 8013f5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013f5e:	f67f ae99 	bls.w	8013c94 <_strtod_l+0x55c>
 8013f62:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8013f90 <_strtod_l+0x858>
 8013f66:	ec4b ab16 	vmov	d6, sl, fp
 8013f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8013fa0 <_strtod_l+0x868>)
 8013f6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013f70:	ee17 2a90 	vmov	r2, s15
 8013f74:	4013      	ands	r3, r2
 8013f76:	ec5b ab17 	vmov	sl, fp, d7
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f47f ae01 	bne.w	8013b82 <_strtod_l+0x44a>
 8013f80:	9a05      	ldr	r2, [sp, #20]
 8013f82:	2322      	movs	r3, #34	@ 0x22
 8013f84:	6013      	str	r3, [r2, #0]
 8013f86:	e5fc      	b.n	8013b82 <_strtod_l+0x44a>
 8013f88:	ffc00000 	.word	0xffc00000
 8013f8c:	41dfffff 	.word	0x41dfffff
 8013f90:	00000000 	.word	0x00000000
 8013f94:	39500000 	.word	0x39500000
 8013f98:	08017480 	.word	0x08017480
 8013f9c:	fffffc02 	.word	0xfffffc02
 8013fa0:	7ff00000 	.word	0x7ff00000
 8013fa4:	46d9      	mov	r9, fp
 8013fa6:	d15d      	bne.n	8014064 <_strtod_l+0x92c>
 8013fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fac:	f1b8 0f00 	cmp.w	r8, #0
 8013fb0:	d02a      	beq.n	8014008 <_strtod_l+0x8d0>
 8013fb2:	4aa9      	ldr	r2, [pc, #676]	@ (8014258 <_strtod_l+0xb20>)
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	d12a      	bne.n	801400e <_strtod_l+0x8d6>
 8013fb8:	9b06      	ldr	r3, [sp, #24]
 8013fba:	4652      	mov	r2, sl
 8013fbc:	b1fb      	cbz	r3, 8013ffe <_strtod_l+0x8c6>
 8013fbe:	4ba7      	ldr	r3, [pc, #668]	@ (801425c <_strtod_l+0xb24>)
 8013fc0:	ea0b 0303 	and.w	r3, fp, r3
 8013fc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013fc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013fcc:	d81a      	bhi.n	8014004 <_strtod_l+0x8cc>
 8013fce:	0d1b      	lsrs	r3, r3, #20
 8013fd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d118      	bne.n	801400e <_strtod_l+0x8d6>
 8013fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8014260 <_strtod_l+0xb28>)
 8013fde:	4599      	cmp	r9, r3
 8013fe0:	d102      	bne.n	8013fe8 <_strtod_l+0x8b0>
 8013fe2:	3201      	adds	r2, #1
 8013fe4:	f43f adc2 	beq.w	8013b6c <_strtod_l+0x434>
 8013fe8:	4b9c      	ldr	r3, [pc, #624]	@ (801425c <_strtod_l+0xb24>)
 8013fea:	ea09 0303 	and.w	r3, r9, r3
 8013fee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013ff2:	f04f 0a00 	mov.w	sl, #0
 8013ff6:	9b06      	ldr	r3, [sp, #24]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1b2      	bne.n	8013f62 <_strtod_l+0x82a>
 8013ffc:	e5c1      	b.n	8013b82 <_strtod_l+0x44a>
 8013ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014002:	e7e9      	b.n	8013fd8 <_strtod_l+0x8a0>
 8014004:	460b      	mov	r3, r1
 8014006:	e7e7      	b.n	8013fd8 <_strtod_l+0x8a0>
 8014008:	ea53 030a 	orrs.w	r3, r3, sl
 801400c:	d09b      	beq.n	8013f46 <_strtod_l+0x80e>
 801400e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014010:	b1c3      	cbz	r3, 8014044 <_strtod_l+0x90c>
 8014012:	ea13 0f09 	tst.w	r3, r9
 8014016:	d0ee      	beq.n	8013ff6 <_strtod_l+0x8be>
 8014018:	9a06      	ldr	r2, [sp, #24]
 801401a:	4650      	mov	r0, sl
 801401c:	4659      	mov	r1, fp
 801401e:	f1b8 0f00 	cmp.w	r8, #0
 8014022:	d013      	beq.n	801404c <_strtod_l+0x914>
 8014024:	f7ff fb6d 	bl	8013702 <sulp>
 8014028:	ee39 7b00 	vadd.f64	d7, d9, d0
 801402c:	ec5b ab17 	vmov	sl, fp, d7
 8014030:	e7e1      	b.n	8013ff6 <_strtod_l+0x8be>
 8014032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801403a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801403e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8014042:	e7d8      	b.n	8013ff6 <_strtod_l+0x8be>
 8014044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014046:	ea13 0f0a 	tst.w	r3, sl
 801404a:	e7e4      	b.n	8014016 <_strtod_l+0x8de>
 801404c:	f7ff fb59 	bl	8013702 <sulp>
 8014050:	ee39 0b40 	vsub.f64	d0, d9, d0
 8014054:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405c:	ec5b ab10 	vmov	sl, fp, d0
 8014060:	d1c9      	bne.n	8013ff6 <_strtod_l+0x8be>
 8014062:	e617      	b.n	8013c94 <_strtod_l+0x55c>
 8014064:	4629      	mov	r1, r5
 8014066:	4620      	mov	r0, r4
 8014068:	f7ff fad8 	bl	801361c <__ratio>
 801406c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8014070:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	d85d      	bhi.n	8014136 <_strtod_l+0x9fe>
 801407a:	f1b8 0f00 	cmp.w	r8, #0
 801407e:	d164      	bne.n	801414a <_strtod_l+0xa12>
 8014080:	f1ba 0f00 	cmp.w	sl, #0
 8014084:	d14b      	bne.n	801411e <_strtod_l+0x9e6>
 8014086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801408a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801408e:	2b00      	cmp	r3, #0
 8014090:	d160      	bne.n	8014154 <_strtod_l+0xa1c>
 8014092:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8014096:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	d401      	bmi.n	80140a4 <_strtod_l+0x96c>
 80140a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80140a4:	eeb1 ab48 	vneg.f64	d10, d8
 80140a8:	486c      	ldr	r0, [pc, #432]	@ (801425c <_strtod_l+0xb24>)
 80140aa:	496e      	ldr	r1, [pc, #440]	@ (8014264 <_strtod_l+0xb2c>)
 80140ac:	ea09 0700 	and.w	r7, r9, r0
 80140b0:	428f      	cmp	r7, r1
 80140b2:	ec53 2b1a 	vmov	r2, r3, d10
 80140b6:	d17d      	bne.n	80141b4 <_strtod_l+0xa7c>
 80140b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80140bc:	ec4b ab1c 	vmov	d12, sl, fp
 80140c0:	eeb0 0b4c 	vmov.f64	d0, d12
 80140c4:	f7ff f9e2 	bl	801348c <__ulp>
 80140c8:	4864      	ldr	r0, [pc, #400]	@ (801425c <_strtod_l+0xb24>)
 80140ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80140ce:	ee1c 3a90 	vmov	r3, s25
 80140d2:	4a65      	ldr	r2, [pc, #404]	@ (8014268 <_strtod_l+0xb30>)
 80140d4:	ea03 0100 	and.w	r1, r3, r0
 80140d8:	4291      	cmp	r1, r2
 80140da:	ec5b ab1c 	vmov	sl, fp, d12
 80140de:	d93c      	bls.n	801415a <_strtod_l+0xa22>
 80140e0:	ee19 2a90 	vmov	r2, s19
 80140e4:	4b5e      	ldr	r3, [pc, #376]	@ (8014260 <_strtod_l+0xb28>)
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d104      	bne.n	80140f4 <_strtod_l+0x9bc>
 80140ea:	ee19 3a10 	vmov	r3, s18
 80140ee:	3301      	adds	r3, #1
 80140f0:	f43f ad3c 	beq.w	8013b6c <_strtod_l+0x434>
 80140f4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014260 <_strtod_l+0xb28>
 80140f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80140fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80140fe:	9805      	ldr	r0, [sp, #20]
 8014100:	f7fe fe98 	bl	8012e34 <_Bfree>
 8014104:	9805      	ldr	r0, [sp, #20]
 8014106:	4631      	mov	r1, r6
 8014108:	f7fe fe94 	bl	8012e34 <_Bfree>
 801410c:	9805      	ldr	r0, [sp, #20]
 801410e:	4629      	mov	r1, r5
 8014110:	f7fe fe90 	bl	8012e34 <_Bfree>
 8014114:	9805      	ldr	r0, [sp, #20]
 8014116:	4621      	mov	r1, r4
 8014118:	f7fe fe8c 	bl	8012e34 <_Bfree>
 801411c:	e627      	b.n	8013d6e <_strtod_l+0x636>
 801411e:	f1ba 0f01 	cmp.w	sl, #1
 8014122:	d103      	bne.n	801412c <_strtod_l+0x9f4>
 8014124:	f1bb 0f00 	cmp.w	fp, #0
 8014128:	f43f adb4 	beq.w	8013c94 <_strtod_l+0x55c>
 801412c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014130:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014134:	e7b8      	b.n	80140a8 <_strtod_l+0x970>
 8014136:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801413a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801413e:	f1b8 0f00 	cmp.w	r8, #0
 8014142:	d0af      	beq.n	80140a4 <_strtod_l+0x96c>
 8014144:	eeb0 ab48 	vmov.f64	d10, d8
 8014148:	e7ae      	b.n	80140a8 <_strtod_l+0x970>
 801414a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801414e:	eeb0 8b4a 	vmov.f64	d8, d10
 8014152:	e7a9      	b.n	80140a8 <_strtod_l+0x970>
 8014154:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014158:	e7a6      	b.n	80140a8 <_strtod_l+0x970>
 801415a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801415e:	9b06      	ldr	r3, [sp, #24]
 8014160:	46d9      	mov	r9, fp
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1ca      	bne.n	80140fc <_strtod_l+0x9c4>
 8014166:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801416a:	0d1b      	lsrs	r3, r3, #20
 801416c:	051b      	lsls	r3, r3, #20
 801416e:	429f      	cmp	r7, r3
 8014170:	d1c4      	bne.n	80140fc <_strtod_l+0x9c4>
 8014172:	ec51 0b18 	vmov	r0, r1, d8
 8014176:	f7ec fadf 	bl	8000738 <__aeabi_d2lz>
 801417a:	f7ec fa97 	bl	80006ac <__aeabi_l2d>
 801417e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8014182:	ec41 0b17 	vmov	d7, r0, r1
 8014186:	ea49 090a 	orr.w	r9, r9, sl
 801418a:	ea59 0908 	orrs.w	r9, r9, r8
 801418e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014192:	d03c      	beq.n	801420e <_strtod_l+0xad6>
 8014194:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014240 <_strtod_l+0xb08>
 8014198:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a0:	f53f acef 	bmi.w	8013b82 <_strtod_l+0x44a>
 80141a4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8014248 <_strtod_l+0xb10>
 80141a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80141ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b0:	dda4      	ble.n	80140fc <_strtod_l+0x9c4>
 80141b2:	e4e6      	b.n	8013b82 <_strtod_l+0x44a>
 80141b4:	9906      	ldr	r1, [sp, #24]
 80141b6:	b1e1      	cbz	r1, 80141f2 <_strtod_l+0xaba>
 80141b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80141bc:	d819      	bhi.n	80141f2 <_strtod_l+0xaba>
 80141be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80141c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c6:	d811      	bhi.n	80141ec <_strtod_l+0xab4>
 80141c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80141cc:	ee18 3a10 	vmov	r3, s16
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	bf38      	it	cc
 80141d4:	2301      	movcc	r3, #1
 80141d6:	ee08 3a10 	vmov	s16, r3
 80141da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80141de:	f1b8 0f00 	cmp.w	r8, #0
 80141e2:	d111      	bne.n	8014208 <_strtod_l+0xad0>
 80141e4:	eeb1 7b48 	vneg.f64	d7, d8
 80141e8:	ec53 2b17 	vmov	r2, r3, d7
 80141ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80141f0:	1bcb      	subs	r3, r1, r7
 80141f2:	eeb0 0b49 	vmov.f64	d0, d9
 80141f6:	ec43 2b1a 	vmov	d10, r2, r3
 80141fa:	f7ff f947 	bl	801348c <__ulp>
 80141fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8014202:	ec5b ab19 	vmov	sl, fp, d9
 8014206:	e7aa      	b.n	801415e <_strtod_l+0xa26>
 8014208:	eeb0 7b48 	vmov.f64	d7, d8
 801420c:	e7ec      	b.n	80141e8 <_strtod_l+0xab0>
 801420e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014250 <_strtod_l+0xb18>
 8014212:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421a:	f57f af6f 	bpl.w	80140fc <_strtod_l+0x9c4>
 801421e:	e4b0      	b.n	8013b82 <_strtod_l+0x44a>
 8014220:	2300      	movs	r3, #0
 8014222:	9308      	str	r3, [sp, #32]
 8014224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014228:	6013      	str	r3, [r2, #0]
 801422a:	f7ff bac4 	b.w	80137b6 <_strtod_l+0x7e>
 801422e:	2a65      	cmp	r2, #101	@ 0x65
 8014230:	f43f abbf 	beq.w	80139b2 <_strtod_l+0x27a>
 8014234:	2a45      	cmp	r2, #69	@ 0x45
 8014236:	f43f abbc 	beq.w	80139b2 <_strtod_l+0x27a>
 801423a:	2101      	movs	r1, #1
 801423c:	f7ff bbf4 	b.w	8013a28 <_strtod_l+0x2f0>
 8014240:	94a03595 	.word	0x94a03595
 8014244:	3fdfffff 	.word	0x3fdfffff
 8014248:	35afe535 	.word	0x35afe535
 801424c:	3fe00000 	.word	0x3fe00000
 8014250:	94a03595 	.word	0x94a03595
 8014254:	3fcfffff 	.word	0x3fcfffff
 8014258:	000fffff 	.word	0x000fffff
 801425c:	7ff00000 	.word	0x7ff00000
 8014260:	7fefffff 	.word	0x7fefffff
 8014264:	7fe00000 	.word	0x7fe00000
 8014268:	7c9fffff 	.word	0x7c9fffff

0801426c <_strtod_r>:
 801426c:	4b01      	ldr	r3, [pc, #4]	@ (8014274 <_strtod_r+0x8>)
 801426e:	f7ff ba63 	b.w	8013738 <_strtod_l>
 8014272:	bf00      	nop
 8014274:	2400007c 	.word	0x2400007c

08014278 <_strtol_l.isra.0>:
 8014278:	2b24      	cmp	r3, #36	@ 0x24
 801427a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801427e:	4686      	mov	lr, r0
 8014280:	4690      	mov	r8, r2
 8014282:	d801      	bhi.n	8014288 <_strtol_l.isra.0+0x10>
 8014284:	2b01      	cmp	r3, #1
 8014286:	d106      	bne.n	8014296 <_strtol_l.isra.0+0x1e>
 8014288:	f7fd fe6c 	bl	8011f64 <__errno>
 801428c:	2316      	movs	r3, #22
 801428e:	6003      	str	r3, [r0, #0]
 8014290:	2000      	movs	r0, #0
 8014292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014296:	4834      	ldr	r0, [pc, #208]	@ (8014368 <_strtol_l.isra.0+0xf0>)
 8014298:	460d      	mov	r5, r1
 801429a:	462a      	mov	r2, r5
 801429c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142a0:	5d06      	ldrb	r6, [r0, r4]
 80142a2:	f016 0608 	ands.w	r6, r6, #8
 80142a6:	d1f8      	bne.n	801429a <_strtol_l.isra.0+0x22>
 80142a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80142aa:	d110      	bne.n	80142ce <_strtol_l.isra.0+0x56>
 80142ac:	782c      	ldrb	r4, [r5, #0]
 80142ae:	2601      	movs	r6, #1
 80142b0:	1c95      	adds	r5, r2, #2
 80142b2:	f033 0210 	bics.w	r2, r3, #16
 80142b6:	d115      	bne.n	80142e4 <_strtol_l.isra.0+0x6c>
 80142b8:	2c30      	cmp	r4, #48	@ 0x30
 80142ba:	d10d      	bne.n	80142d8 <_strtol_l.isra.0+0x60>
 80142bc:	782a      	ldrb	r2, [r5, #0]
 80142be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80142c2:	2a58      	cmp	r2, #88	@ 0x58
 80142c4:	d108      	bne.n	80142d8 <_strtol_l.isra.0+0x60>
 80142c6:	786c      	ldrb	r4, [r5, #1]
 80142c8:	3502      	adds	r5, #2
 80142ca:	2310      	movs	r3, #16
 80142cc:	e00a      	b.n	80142e4 <_strtol_l.isra.0+0x6c>
 80142ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80142d0:	bf04      	itt	eq
 80142d2:	782c      	ldrbeq	r4, [r5, #0]
 80142d4:	1c95      	addeq	r5, r2, #2
 80142d6:	e7ec      	b.n	80142b2 <_strtol_l.isra.0+0x3a>
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d1f6      	bne.n	80142ca <_strtol_l.isra.0+0x52>
 80142dc:	2c30      	cmp	r4, #48	@ 0x30
 80142de:	bf14      	ite	ne
 80142e0:	230a      	movne	r3, #10
 80142e2:	2308      	moveq	r3, #8
 80142e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80142e8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80142ec:	2200      	movs	r2, #0
 80142ee:	fbbc f9f3 	udiv	r9, ip, r3
 80142f2:	4610      	mov	r0, r2
 80142f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80142f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80142fc:	2f09      	cmp	r7, #9
 80142fe:	d80f      	bhi.n	8014320 <_strtol_l.isra.0+0xa8>
 8014300:	463c      	mov	r4, r7
 8014302:	42a3      	cmp	r3, r4
 8014304:	dd1b      	ble.n	801433e <_strtol_l.isra.0+0xc6>
 8014306:	1c57      	adds	r7, r2, #1
 8014308:	d007      	beq.n	801431a <_strtol_l.isra.0+0xa2>
 801430a:	4581      	cmp	r9, r0
 801430c:	d314      	bcc.n	8014338 <_strtol_l.isra.0+0xc0>
 801430e:	d101      	bne.n	8014314 <_strtol_l.isra.0+0x9c>
 8014310:	45a2      	cmp	sl, r4
 8014312:	db11      	blt.n	8014338 <_strtol_l.isra.0+0xc0>
 8014314:	fb00 4003 	mla	r0, r0, r3, r4
 8014318:	2201      	movs	r2, #1
 801431a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801431e:	e7eb      	b.n	80142f8 <_strtol_l.isra.0+0x80>
 8014320:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014324:	2f19      	cmp	r7, #25
 8014326:	d801      	bhi.n	801432c <_strtol_l.isra.0+0xb4>
 8014328:	3c37      	subs	r4, #55	@ 0x37
 801432a:	e7ea      	b.n	8014302 <_strtol_l.isra.0+0x8a>
 801432c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014330:	2f19      	cmp	r7, #25
 8014332:	d804      	bhi.n	801433e <_strtol_l.isra.0+0xc6>
 8014334:	3c57      	subs	r4, #87	@ 0x57
 8014336:	e7e4      	b.n	8014302 <_strtol_l.isra.0+0x8a>
 8014338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801433c:	e7ed      	b.n	801431a <_strtol_l.isra.0+0xa2>
 801433e:	1c53      	adds	r3, r2, #1
 8014340:	d108      	bne.n	8014354 <_strtol_l.isra.0+0xdc>
 8014342:	2322      	movs	r3, #34	@ 0x22
 8014344:	f8ce 3000 	str.w	r3, [lr]
 8014348:	4660      	mov	r0, ip
 801434a:	f1b8 0f00 	cmp.w	r8, #0
 801434e:	d0a0      	beq.n	8014292 <_strtol_l.isra.0+0x1a>
 8014350:	1e69      	subs	r1, r5, #1
 8014352:	e006      	b.n	8014362 <_strtol_l.isra.0+0xea>
 8014354:	b106      	cbz	r6, 8014358 <_strtol_l.isra.0+0xe0>
 8014356:	4240      	negs	r0, r0
 8014358:	f1b8 0f00 	cmp.w	r8, #0
 801435c:	d099      	beq.n	8014292 <_strtol_l.isra.0+0x1a>
 801435e:	2a00      	cmp	r2, #0
 8014360:	d1f6      	bne.n	8014350 <_strtol_l.isra.0+0xd8>
 8014362:	f8c8 1000 	str.w	r1, [r8]
 8014366:	e794      	b.n	8014292 <_strtol_l.isra.0+0x1a>
 8014368:	080174a9 	.word	0x080174a9

0801436c <_strtol_r>:
 801436c:	f7ff bf84 	b.w	8014278 <_strtol_l.isra.0>

08014370 <__ssputs_r>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	688e      	ldr	r6, [r1, #8]
 8014376:	461f      	mov	r7, r3
 8014378:	42be      	cmp	r6, r7
 801437a:	680b      	ldr	r3, [r1, #0]
 801437c:	4682      	mov	sl, r0
 801437e:	460c      	mov	r4, r1
 8014380:	4690      	mov	r8, r2
 8014382:	d82d      	bhi.n	80143e0 <__ssputs_r+0x70>
 8014384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014388:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801438c:	d026      	beq.n	80143dc <__ssputs_r+0x6c>
 801438e:	6965      	ldr	r5, [r4, #20]
 8014390:	6909      	ldr	r1, [r1, #16]
 8014392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014396:	eba3 0901 	sub.w	r9, r3, r1
 801439a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801439e:	1c7b      	adds	r3, r7, #1
 80143a0:	444b      	add	r3, r9
 80143a2:	106d      	asrs	r5, r5, #1
 80143a4:	429d      	cmp	r5, r3
 80143a6:	bf38      	it	cc
 80143a8:	461d      	movcc	r5, r3
 80143aa:	0553      	lsls	r3, r2, #21
 80143ac:	d527      	bpl.n	80143fe <__ssputs_r+0x8e>
 80143ae:	4629      	mov	r1, r5
 80143b0:	f7fe fc74 	bl	8012c9c <_malloc_r>
 80143b4:	4606      	mov	r6, r0
 80143b6:	b360      	cbz	r0, 8014412 <__ssputs_r+0xa2>
 80143b8:	6921      	ldr	r1, [r4, #16]
 80143ba:	464a      	mov	r2, r9
 80143bc:	f7fd fdff 	bl	8011fbe <memcpy>
 80143c0:	89a3      	ldrh	r3, [r4, #12]
 80143c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143ca:	81a3      	strh	r3, [r4, #12]
 80143cc:	6126      	str	r6, [r4, #16]
 80143ce:	6165      	str	r5, [r4, #20]
 80143d0:	444e      	add	r6, r9
 80143d2:	eba5 0509 	sub.w	r5, r5, r9
 80143d6:	6026      	str	r6, [r4, #0]
 80143d8:	60a5      	str	r5, [r4, #8]
 80143da:	463e      	mov	r6, r7
 80143dc:	42be      	cmp	r6, r7
 80143de:	d900      	bls.n	80143e2 <__ssputs_r+0x72>
 80143e0:	463e      	mov	r6, r7
 80143e2:	6820      	ldr	r0, [r4, #0]
 80143e4:	4632      	mov	r2, r6
 80143e6:	4641      	mov	r1, r8
 80143e8:	f000 fefb 	bl	80151e2 <memmove>
 80143ec:	68a3      	ldr	r3, [r4, #8]
 80143ee:	1b9b      	subs	r3, r3, r6
 80143f0:	60a3      	str	r3, [r4, #8]
 80143f2:	6823      	ldr	r3, [r4, #0]
 80143f4:	4433      	add	r3, r6
 80143f6:	6023      	str	r3, [r4, #0]
 80143f8:	2000      	movs	r0, #0
 80143fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fe:	462a      	mov	r2, r5
 8014400:	f001 fad3 	bl	80159aa <_realloc_r>
 8014404:	4606      	mov	r6, r0
 8014406:	2800      	cmp	r0, #0
 8014408:	d1e0      	bne.n	80143cc <__ssputs_r+0x5c>
 801440a:	6921      	ldr	r1, [r4, #16]
 801440c:	4650      	mov	r0, sl
 801440e:	f7fe fbd1 	bl	8012bb4 <_free_r>
 8014412:	230c      	movs	r3, #12
 8014414:	f8ca 3000 	str.w	r3, [sl]
 8014418:	89a3      	ldrh	r3, [r4, #12]
 801441a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801441e:	81a3      	strh	r3, [r4, #12]
 8014420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014424:	e7e9      	b.n	80143fa <__ssputs_r+0x8a>
	...

08014428 <_svfiprintf_r>:
 8014428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442c:	4698      	mov	r8, r3
 801442e:	898b      	ldrh	r3, [r1, #12]
 8014430:	061b      	lsls	r3, r3, #24
 8014432:	b09d      	sub	sp, #116	@ 0x74
 8014434:	4607      	mov	r7, r0
 8014436:	460d      	mov	r5, r1
 8014438:	4614      	mov	r4, r2
 801443a:	d510      	bpl.n	801445e <_svfiprintf_r+0x36>
 801443c:	690b      	ldr	r3, [r1, #16]
 801443e:	b973      	cbnz	r3, 801445e <_svfiprintf_r+0x36>
 8014440:	2140      	movs	r1, #64	@ 0x40
 8014442:	f7fe fc2b 	bl	8012c9c <_malloc_r>
 8014446:	6028      	str	r0, [r5, #0]
 8014448:	6128      	str	r0, [r5, #16]
 801444a:	b930      	cbnz	r0, 801445a <_svfiprintf_r+0x32>
 801444c:	230c      	movs	r3, #12
 801444e:	603b      	str	r3, [r7, #0]
 8014450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014454:	b01d      	add	sp, #116	@ 0x74
 8014456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445a:	2340      	movs	r3, #64	@ 0x40
 801445c:	616b      	str	r3, [r5, #20]
 801445e:	2300      	movs	r3, #0
 8014460:	9309      	str	r3, [sp, #36]	@ 0x24
 8014462:	2320      	movs	r3, #32
 8014464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014468:	f8cd 800c 	str.w	r8, [sp, #12]
 801446c:	2330      	movs	r3, #48	@ 0x30
 801446e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801460c <_svfiprintf_r+0x1e4>
 8014472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014476:	f04f 0901 	mov.w	r9, #1
 801447a:	4623      	mov	r3, r4
 801447c:	469a      	mov	sl, r3
 801447e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014482:	b10a      	cbz	r2, 8014488 <_svfiprintf_r+0x60>
 8014484:	2a25      	cmp	r2, #37	@ 0x25
 8014486:	d1f9      	bne.n	801447c <_svfiprintf_r+0x54>
 8014488:	ebba 0b04 	subs.w	fp, sl, r4
 801448c:	d00b      	beq.n	80144a6 <_svfiprintf_r+0x7e>
 801448e:	465b      	mov	r3, fp
 8014490:	4622      	mov	r2, r4
 8014492:	4629      	mov	r1, r5
 8014494:	4638      	mov	r0, r7
 8014496:	f7ff ff6b 	bl	8014370 <__ssputs_r>
 801449a:	3001      	adds	r0, #1
 801449c:	f000 80a7 	beq.w	80145ee <_svfiprintf_r+0x1c6>
 80144a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144a2:	445a      	add	r2, fp
 80144a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80144a6:	f89a 3000 	ldrb.w	r3, [sl]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	f000 809f 	beq.w	80145ee <_svfiprintf_r+0x1c6>
 80144b0:	2300      	movs	r3, #0
 80144b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144ba:	f10a 0a01 	add.w	sl, sl, #1
 80144be:	9304      	str	r3, [sp, #16]
 80144c0:	9307      	str	r3, [sp, #28]
 80144c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80144c8:	4654      	mov	r4, sl
 80144ca:	2205      	movs	r2, #5
 80144cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d0:	484e      	ldr	r0, [pc, #312]	@ (801460c <_svfiprintf_r+0x1e4>)
 80144d2:	f7eb ff05 	bl	80002e0 <memchr>
 80144d6:	9a04      	ldr	r2, [sp, #16]
 80144d8:	b9d8      	cbnz	r0, 8014512 <_svfiprintf_r+0xea>
 80144da:	06d0      	lsls	r0, r2, #27
 80144dc:	bf44      	itt	mi
 80144de:	2320      	movmi	r3, #32
 80144e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144e4:	0711      	lsls	r1, r2, #28
 80144e6:	bf44      	itt	mi
 80144e8:	232b      	movmi	r3, #43	@ 0x2b
 80144ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144ee:	f89a 3000 	ldrb.w	r3, [sl]
 80144f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80144f4:	d015      	beq.n	8014522 <_svfiprintf_r+0xfa>
 80144f6:	9a07      	ldr	r2, [sp, #28]
 80144f8:	4654      	mov	r4, sl
 80144fa:	2000      	movs	r0, #0
 80144fc:	f04f 0c0a 	mov.w	ip, #10
 8014500:	4621      	mov	r1, r4
 8014502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014506:	3b30      	subs	r3, #48	@ 0x30
 8014508:	2b09      	cmp	r3, #9
 801450a:	d94b      	bls.n	80145a4 <_svfiprintf_r+0x17c>
 801450c:	b1b0      	cbz	r0, 801453c <_svfiprintf_r+0x114>
 801450e:	9207      	str	r2, [sp, #28]
 8014510:	e014      	b.n	801453c <_svfiprintf_r+0x114>
 8014512:	eba0 0308 	sub.w	r3, r0, r8
 8014516:	fa09 f303 	lsl.w	r3, r9, r3
 801451a:	4313      	orrs	r3, r2
 801451c:	9304      	str	r3, [sp, #16]
 801451e:	46a2      	mov	sl, r4
 8014520:	e7d2      	b.n	80144c8 <_svfiprintf_r+0xa0>
 8014522:	9b03      	ldr	r3, [sp, #12]
 8014524:	1d19      	adds	r1, r3, #4
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	9103      	str	r1, [sp, #12]
 801452a:	2b00      	cmp	r3, #0
 801452c:	bfbb      	ittet	lt
 801452e:	425b      	neglt	r3, r3
 8014530:	f042 0202 	orrlt.w	r2, r2, #2
 8014534:	9307      	strge	r3, [sp, #28]
 8014536:	9307      	strlt	r3, [sp, #28]
 8014538:	bfb8      	it	lt
 801453a:	9204      	strlt	r2, [sp, #16]
 801453c:	7823      	ldrb	r3, [r4, #0]
 801453e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014540:	d10a      	bne.n	8014558 <_svfiprintf_r+0x130>
 8014542:	7863      	ldrb	r3, [r4, #1]
 8014544:	2b2a      	cmp	r3, #42	@ 0x2a
 8014546:	d132      	bne.n	80145ae <_svfiprintf_r+0x186>
 8014548:	9b03      	ldr	r3, [sp, #12]
 801454a:	1d1a      	adds	r2, r3, #4
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	9203      	str	r2, [sp, #12]
 8014550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014554:	3402      	adds	r4, #2
 8014556:	9305      	str	r3, [sp, #20]
 8014558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801461c <_svfiprintf_r+0x1f4>
 801455c:	7821      	ldrb	r1, [r4, #0]
 801455e:	2203      	movs	r2, #3
 8014560:	4650      	mov	r0, sl
 8014562:	f7eb febd 	bl	80002e0 <memchr>
 8014566:	b138      	cbz	r0, 8014578 <_svfiprintf_r+0x150>
 8014568:	9b04      	ldr	r3, [sp, #16]
 801456a:	eba0 000a 	sub.w	r0, r0, sl
 801456e:	2240      	movs	r2, #64	@ 0x40
 8014570:	4082      	lsls	r2, r0
 8014572:	4313      	orrs	r3, r2
 8014574:	3401      	adds	r4, #1
 8014576:	9304      	str	r3, [sp, #16]
 8014578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801457c:	4824      	ldr	r0, [pc, #144]	@ (8014610 <_svfiprintf_r+0x1e8>)
 801457e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014582:	2206      	movs	r2, #6
 8014584:	f7eb feac 	bl	80002e0 <memchr>
 8014588:	2800      	cmp	r0, #0
 801458a:	d036      	beq.n	80145fa <_svfiprintf_r+0x1d2>
 801458c:	4b21      	ldr	r3, [pc, #132]	@ (8014614 <_svfiprintf_r+0x1ec>)
 801458e:	bb1b      	cbnz	r3, 80145d8 <_svfiprintf_r+0x1b0>
 8014590:	9b03      	ldr	r3, [sp, #12]
 8014592:	3307      	adds	r3, #7
 8014594:	f023 0307 	bic.w	r3, r3, #7
 8014598:	3308      	adds	r3, #8
 801459a:	9303      	str	r3, [sp, #12]
 801459c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801459e:	4433      	add	r3, r6
 80145a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80145a2:	e76a      	b.n	801447a <_svfiprintf_r+0x52>
 80145a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80145a8:	460c      	mov	r4, r1
 80145aa:	2001      	movs	r0, #1
 80145ac:	e7a8      	b.n	8014500 <_svfiprintf_r+0xd8>
 80145ae:	2300      	movs	r3, #0
 80145b0:	3401      	adds	r4, #1
 80145b2:	9305      	str	r3, [sp, #20]
 80145b4:	4619      	mov	r1, r3
 80145b6:	f04f 0c0a 	mov.w	ip, #10
 80145ba:	4620      	mov	r0, r4
 80145bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145c0:	3a30      	subs	r2, #48	@ 0x30
 80145c2:	2a09      	cmp	r2, #9
 80145c4:	d903      	bls.n	80145ce <_svfiprintf_r+0x1a6>
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d0c6      	beq.n	8014558 <_svfiprintf_r+0x130>
 80145ca:	9105      	str	r1, [sp, #20]
 80145cc:	e7c4      	b.n	8014558 <_svfiprintf_r+0x130>
 80145ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80145d2:	4604      	mov	r4, r0
 80145d4:	2301      	movs	r3, #1
 80145d6:	e7f0      	b.n	80145ba <_svfiprintf_r+0x192>
 80145d8:	ab03      	add	r3, sp, #12
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	462a      	mov	r2, r5
 80145de:	4b0e      	ldr	r3, [pc, #56]	@ (8014618 <_svfiprintf_r+0x1f0>)
 80145e0:	a904      	add	r1, sp, #16
 80145e2:	4638      	mov	r0, r7
 80145e4:	f7fc fb54 	bl	8010c90 <_printf_float>
 80145e8:	1c42      	adds	r2, r0, #1
 80145ea:	4606      	mov	r6, r0
 80145ec:	d1d6      	bne.n	801459c <_svfiprintf_r+0x174>
 80145ee:	89ab      	ldrh	r3, [r5, #12]
 80145f0:	065b      	lsls	r3, r3, #25
 80145f2:	f53f af2d 	bmi.w	8014450 <_svfiprintf_r+0x28>
 80145f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145f8:	e72c      	b.n	8014454 <_svfiprintf_r+0x2c>
 80145fa:	ab03      	add	r3, sp, #12
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	462a      	mov	r2, r5
 8014600:	4b05      	ldr	r3, [pc, #20]	@ (8014618 <_svfiprintf_r+0x1f0>)
 8014602:	a904      	add	r1, sp, #16
 8014604:	4638      	mov	r0, r7
 8014606:	f7fc fdcb 	bl	80111a0 <_printf_i>
 801460a:	e7ed      	b.n	80145e8 <_svfiprintf_r+0x1c0>
 801460c:	0801728b 	.word	0x0801728b
 8014610:	08017295 	.word	0x08017295
 8014614:	08010c91 	.word	0x08010c91
 8014618:	08014371 	.word	0x08014371
 801461c:	08017291 	.word	0x08017291

08014620 <_sungetc_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	1c4b      	adds	r3, r1, #1
 8014624:	4614      	mov	r4, r2
 8014626:	d103      	bne.n	8014630 <_sungetc_r+0x10>
 8014628:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801462c:	4628      	mov	r0, r5
 801462e:	bd38      	pop	{r3, r4, r5, pc}
 8014630:	8993      	ldrh	r3, [r2, #12]
 8014632:	f023 0320 	bic.w	r3, r3, #32
 8014636:	8193      	strh	r3, [r2, #12]
 8014638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801463a:	6852      	ldr	r2, [r2, #4]
 801463c:	b2cd      	uxtb	r5, r1
 801463e:	b18b      	cbz	r3, 8014664 <_sungetc_r+0x44>
 8014640:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8014642:	4293      	cmp	r3, r2
 8014644:	dd08      	ble.n	8014658 <_sungetc_r+0x38>
 8014646:	6823      	ldr	r3, [r4, #0]
 8014648:	1e5a      	subs	r2, r3, #1
 801464a:	6022      	str	r2, [r4, #0]
 801464c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014650:	6863      	ldr	r3, [r4, #4]
 8014652:	3301      	adds	r3, #1
 8014654:	6063      	str	r3, [r4, #4]
 8014656:	e7e9      	b.n	801462c <_sungetc_r+0xc>
 8014658:	4621      	mov	r1, r4
 801465a:	f000 fd88 	bl	801516e <__submore>
 801465e:	2800      	cmp	r0, #0
 8014660:	d0f1      	beq.n	8014646 <_sungetc_r+0x26>
 8014662:	e7e1      	b.n	8014628 <_sungetc_r+0x8>
 8014664:	6921      	ldr	r1, [r4, #16]
 8014666:	6823      	ldr	r3, [r4, #0]
 8014668:	b151      	cbz	r1, 8014680 <_sungetc_r+0x60>
 801466a:	4299      	cmp	r1, r3
 801466c:	d208      	bcs.n	8014680 <_sungetc_r+0x60>
 801466e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014672:	42a9      	cmp	r1, r5
 8014674:	d104      	bne.n	8014680 <_sungetc_r+0x60>
 8014676:	3b01      	subs	r3, #1
 8014678:	3201      	adds	r2, #1
 801467a:	6023      	str	r3, [r4, #0]
 801467c:	6062      	str	r2, [r4, #4]
 801467e:	e7d5      	b.n	801462c <_sungetc_r+0xc>
 8014680:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8014684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014688:	6363      	str	r3, [r4, #52]	@ 0x34
 801468a:	2303      	movs	r3, #3
 801468c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801468e:	4623      	mov	r3, r4
 8014690:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	2301      	movs	r3, #1
 8014698:	e7dc      	b.n	8014654 <_sungetc_r+0x34>

0801469a <__ssrefill_r>:
 801469a:	b510      	push	{r4, lr}
 801469c:	460c      	mov	r4, r1
 801469e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80146a0:	b169      	cbz	r1, 80146be <__ssrefill_r+0x24>
 80146a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146a6:	4299      	cmp	r1, r3
 80146a8:	d001      	beq.n	80146ae <__ssrefill_r+0x14>
 80146aa:	f7fe fa83 	bl	8012bb4 <_free_r>
 80146ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80146b0:	6063      	str	r3, [r4, #4]
 80146b2:	2000      	movs	r0, #0
 80146b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80146b6:	b113      	cbz	r3, 80146be <__ssrefill_r+0x24>
 80146b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80146ba:	6023      	str	r3, [r4, #0]
 80146bc:	bd10      	pop	{r4, pc}
 80146be:	6923      	ldr	r3, [r4, #16]
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	2300      	movs	r3, #0
 80146c4:	6063      	str	r3, [r4, #4]
 80146c6:	89a3      	ldrh	r3, [r4, #12]
 80146c8:	f043 0320 	orr.w	r3, r3, #32
 80146cc:	81a3      	strh	r3, [r4, #12]
 80146ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146d2:	e7f3      	b.n	80146bc <__ssrefill_r+0x22>

080146d4 <__ssvfiscanf_r>:
 80146d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d8:	460c      	mov	r4, r1
 80146da:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80146de:	2100      	movs	r1, #0
 80146e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80146e4:	49a6      	ldr	r1, [pc, #664]	@ (8014980 <__ssvfiscanf_r+0x2ac>)
 80146e6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80146e8:	f10d 0804 	add.w	r8, sp, #4
 80146ec:	49a5      	ldr	r1, [pc, #660]	@ (8014984 <__ssvfiscanf_r+0x2b0>)
 80146ee:	4fa6      	ldr	r7, [pc, #664]	@ (8014988 <__ssvfiscanf_r+0x2b4>)
 80146f0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80146f4:	4606      	mov	r6, r0
 80146f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80146f8:	9300      	str	r3, [sp, #0]
 80146fa:	f892 9000 	ldrb.w	r9, [r2]
 80146fe:	f1b9 0f00 	cmp.w	r9, #0
 8014702:	f000 8158 	beq.w	80149b6 <__ssvfiscanf_r+0x2e2>
 8014706:	f817 3009 	ldrb.w	r3, [r7, r9]
 801470a:	f013 0308 	ands.w	r3, r3, #8
 801470e:	f102 0501 	add.w	r5, r2, #1
 8014712:	d019      	beq.n	8014748 <__ssvfiscanf_r+0x74>
 8014714:	6863      	ldr	r3, [r4, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	dd0f      	ble.n	801473a <__ssvfiscanf_r+0x66>
 801471a:	6823      	ldr	r3, [r4, #0]
 801471c:	781a      	ldrb	r2, [r3, #0]
 801471e:	5cba      	ldrb	r2, [r7, r2]
 8014720:	0712      	lsls	r2, r2, #28
 8014722:	d401      	bmi.n	8014728 <__ssvfiscanf_r+0x54>
 8014724:	462a      	mov	r2, r5
 8014726:	e7e8      	b.n	80146fa <__ssvfiscanf_r+0x26>
 8014728:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801472a:	3201      	adds	r2, #1
 801472c:	9245      	str	r2, [sp, #276]	@ 0x114
 801472e:	6862      	ldr	r2, [r4, #4]
 8014730:	3301      	adds	r3, #1
 8014732:	3a01      	subs	r2, #1
 8014734:	6062      	str	r2, [r4, #4]
 8014736:	6023      	str	r3, [r4, #0]
 8014738:	e7ec      	b.n	8014714 <__ssvfiscanf_r+0x40>
 801473a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801473c:	4621      	mov	r1, r4
 801473e:	4630      	mov	r0, r6
 8014740:	4798      	blx	r3
 8014742:	2800      	cmp	r0, #0
 8014744:	d0e9      	beq.n	801471a <__ssvfiscanf_r+0x46>
 8014746:	e7ed      	b.n	8014724 <__ssvfiscanf_r+0x50>
 8014748:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801474c:	f040 8085 	bne.w	801485a <__ssvfiscanf_r+0x186>
 8014750:	9341      	str	r3, [sp, #260]	@ 0x104
 8014752:	9343      	str	r3, [sp, #268]	@ 0x10c
 8014754:	7853      	ldrb	r3, [r2, #1]
 8014756:	2b2a      	cmp	r3, #42	@ 0x2a
 8014758:	bf02      	ittt	eq
 801475a:	2310      	moveq	r3, #16
 801475c:	1c95      	addeq	r5, r2, #2
 801475e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014760:	220a      	movs	r2, #10
 8014762:	46aa      	mov	sl, r5
 8014764:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014768:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801476c:	2b09      	cmp	r3, #9
 801476e:	d91e      	bls.n	80147ae <__ssvfiscanf_r+0xda>
 8014770:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801498c <__ssvfiscanf_r+0x2b8>
 8014774:	2203      	movs	r2, #3
 8014776:	4658      	mov	r0, fp
 8014778:	f7eb fdb2 	bl	80002e0 <memchr>
 801477c:	b138      	cbz	r0, 801478e <__ssvfiscanf_r+0xba>
 801477e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014780:	eba0 000b 	sub.w	r0, r0, fp
 8014784:	2301      	movs	r3, #1
 8014786:	4083      	lsls	r3, r0
 8014788:	4313      	orrs	r3, r2
 801478a:	9341      	str	r3, [sp, #260]	@ 0x104
 801478c:	4655      	mov	r5, sl
 801478e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014792:	2b78      	cmp	r3, #120	@ 0x78
 8014794:	d806      	bhi.n	80147a4 <__ssvfiscanf_r+0xd0>
 8014796:	2b57      	cmp	r3, #87	@ 0x57
 8014798:	d810      	bhi.n	80147bc <__ssvfiscanf_r+0xe8>
 801479a:	2b25      	cmp	r3, #37	@ 0x25
 801479c:	d05d      	beq.n	801485a <__ssvfiscanf_r+0x186>
 801479e:	d857      	bhi.n	8014850 <__ssvfiscanf_r+0x17c>
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d075      	beq.n	8014890 <__ssvfiscanf_r+0x1bc>
 80147a4:	2303      	movs	r3, #3
 80147a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80147a8:	230a      	movs	r3, #10
 80147aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80147ac:	e088      	b.n	80148c0 <__ssvfiscanf_r+0x1ec>
 80147ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80147b0:	fb02 1103 	mla	r1, r2, r3, r1
 80147b4:	3930      	subs	r1, #48	@ 0x30
 80147b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80147b8:	4655      	mov	r5, sl
 80147ba:	e7d2      	b.n	8014762 <__ssvfiscanf_r+0x8e>
 80147bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80147c0:	2a20      	cmp	r2, #32
 80147c2:	d8ef      	bhi.n	80147a4 <__ssvfiscanf_r+0xd0>
 80147c4:	a101      	add	r1, pc, #4	@ (adr r1, 80147cc <__ssvfiscanf_r+0xf8>)
 80147c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80147ca:	bf00      	nop
 80147cc:	0801489f 	.word	0x0801489f
 80147d0:	080147a5 	.word	0x080147a5
 80147d4:	080147a5 	.word	0x080147a5
 80147d8:	080148f9 	.word	0x080148f9
 80147dc:	080147a5 	.word	0x080147a5
 80147e0:	080147a5 	.word	0x080147a5
 80147e4:	080147a5 	.word	0x080147a5
 80147e8:	080147a5 	.word	0x080147a5
 80147ec:	080147a5 	.word	0x080147a5
 80147f0:	080147a5 	.word	0x080147a5
 80147f4:	080147a5 	.word	0x080147a5
 80147f8:	0801490f 	.word	0x0801490f
 80147fc:	080148f5 	.word	0x080148f5
 8014800:	08014857 	.word	0x08014857
 8014804:	08014857 	.word	0x08014857
 8014808:	08014857 	.word	0x08014857
 801480c:	080147a5 	.word	0x080147a5
 8014810:	080148b1 	.word	0x080148b1
 8014814:	080147a5 	.word	0x080147a5
 8014818:	080147a5 	.word	0x080147a5
 801481c:	080147a5 	.word	0x080147a5
 8014820:	080147a5 	.word	0x080147a5
 8014824:	0801491f 	.word	0x0801491f
 8014828:	080148b9 	.word	0x080148b9
 801482c:	08014897 	.word	0x08014897
 8014830:	080147a5 	.word	0x080147a5
 8014834:	080147a5 	.word	0x080147a5
 8014838:	0801491b 	.word	0x0801491b
 801483c:	080147a5 	.word	0x080147a5
 8014840:	080148f5 	.word	0x080148f5
 8014844:	080147a5 	.word	0x080147a5
 8014848:	080147a5 	.word	0x080147a5
 801484c:	0801489f 	.word	0x0801489f
 8014850:	3b45      	subs	r3, #69	@ 0x45
 8014852:	2b02      	cmp	r3, #2
 8014854:	d8a6      	bhi.n	80147a4 <__ssvfiscanf_r+0xd0>
 8014856:	2305      	movs	r3, #5
 8014858:	e031      	b.n	80148be <__ssvfiscanf_r+0x1ea>
 801485a:	6863      	ldr	r3, [r4, #4]
 801485c:	2b00      	cmp	r3, #0
 801485e:	dd0d      	ble.n	801487c <__ssvfiscanf_r+0x1a8>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	781a      	ldrb	r2, [r3, #0]
 8014864:	454a      	cmp	r2, r9
 8014866:	f040 80a6 	bne.w	80149b6 <__ssvfiscanf_r+0x2e2>
 801486a:	3301      	adds	r3, #1
 801486c:	6862      	ldr	r2, [r4, #4]
 801486e:	6023      	str	r3, [r4, #0]
 8014870:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014872:	3a01      	subs	r2, #1
 8014874:	3301      	adds	r3, #1
 8014876:	6062      	str	r2, [r4, #4]
 8014878:	9345      	str	r3, [sp, #276]	@ 0x114
 801487a:	e753      	b.n	8014724 <__ssvfiscanf_r+0x50>
 801487c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801487e:	4621      	mov	r1, r4
 8014880:	4630      	mov	r0, r6
 8014882:	4798      	blx	r3
 8014884:	2800      	cmp	r0, #0
 8014886:	d0eb      	beq.n	8014860 <__ssvfiscanf_r+0x18c>
 8014888:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801488a:	2800      	cmp	r0, #0
 801488c:	f040 808b 	bne.w	80149a6 <__ssvfiscanf_r+0x2d2>
 8014890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014894:	e08b      	b.n	80149ae <__ssvfiscanf_r+0x2da>
 8014896:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014898:	f042 0220 	orr.w	r2, r2, #32
 801489c:	9241      	str	r2, [sp, #260]	@ 0x104
 801489e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80148a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80148a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80148a6:	2210      	movs	r2, #16
 80148a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80148aa:	9242      	str	r2, [sp, #264]	@ 0x108
 80148ac:	d902      	bls.n	80148b4 <__ssvfiscanf_r+0x1e0>
 80148ae:	e005      	b.n	80148bc <__ssvfiscanf_r+0x1e8>
 80148b0:	2300      	movs	r3, #0
 80148b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80148b4:	2303      	movs	r3, #3
 80148b6:	e002      	b.n	80148be <__ssvfiscanf_r+0x1ea>
 80148b8:	2308      	movs	r3, #8
 80148ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80148bc:	2304      	movs	r3, #4
 80148be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80148c0:	6863      	ldr	r3, [r4, #4]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	dd39      	ble.n	801493a <__ssvfiscanf_r+0x266>
 80148c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80148c8:	0659      	lsls	r1, r3, #25
 80148ca:	d404      	bmi.n	80148d6 <__ssvfiscanf_r+0x202>
 80148cc:	6823      	ldr	r3, [r4, #0]
 80148ce:	781a      	ldrb	r2, [r3, #0]
 80148d0:	5cba      	ldrb	r2, [r7, r2]
 80148d2:	0712      	lsls	r2, r2, #28
 80148d4:	d438      	bmi.n	8014948 <__ssvfiscanf_r+0x274>
 80148d6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80148d8:	2b02      	cmp	r3, #2
 80148da:	dc47      	bgt.n	801496c <__ssvfiscanf_r+0x298>
 80148dc:	466b      	mov	r3, sp
 80148de:	4622      	mov	r2, r4
 80148e0:	a941      	add	r1, sp, #260	@ 0x104
 80148e2:	4630      	mov	r0, r6
 80148e4:	f000 f9ae 	bl	8014c44 <_scanf_chars>
 80148e8:	2801      	cmp	r0, #1
 80148ea:	d064      	beq.n	80149b6 <__ssvfiscanf_r+0x2e2>
 80148ec:	2802      	cmp	r0, #2
 80148ee:	f47f af19 	bne.w	8014724 <__ssvfiscanf_r+0x50>
 80148f2:	e7c9      	b.n	8014888 <__ssvfiscanf_r+0x1b4>
 80148f4:	220a      	movs	r2, #10
 80148f6:	e7d7      	b.n	80148a8 <__ssvfiscanf_r+0x1d4>
 80148f8:	4629      	mov	r1, r5
 80148fa:	4640      	mov	r0, r8
 80148fc:	f000 fbfe 	bl	80150fc <__sccl>
 8014900:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014906:	9341      	str	r3, [sp, #260]	@ 0x104
 8014908:	4605      	mov	r5, r0
 801490a:	2301      	movs	r3, #1
 801490c:	e7d7      	b.n	80148be <__ssvfiscanf_r+0x1ea>
 801490e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014914:	9341      	str	r3, [sp, #260]	@ 0x104
 8014916:	2300      	movs	r3, #0
 8014918:	e7d1      	b.n	80148be <__ssvfiscanf_r+0x1ea>
 801491a:	2302      	movs	r3, #2
 801491c:	e7cf      	b.n	80148be <__ssvfiscanf_r+0x1ea>
 801491e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014920:	06c3      	lsls	r3, r0, #27
 8014922:	f53f aeff 	bmi.w	8014724 <__ssvfiscanf_r+0x50>
 8014926:	9b00      	ldr	r3, [sp, #0]
 8014928:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801492a:	1d19      	adds	r1, r3, #4
 801492c:	9100      	str	r1, [sp, #0]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	07c0      	lsls	r0, r0, #31
 8014932:	bf4c      	ite	mi
 8014934:	801a      	strhmi	r2, [r3, #0]
 8014936:	601a      	strpl	r2, [r3, #0]
 8014938:	e6f4      	b.n	8014724 <__ssvfiscanf_r+0x50>
 801493a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801493c:	4621      	mov	r1, r4
 801493e:	4630      	mov	r0, r6
 8014940:	4798      	blx	r3
 8014942:	2800      	cmp	r0, #0
 8014944:	d0bf      	beq.n	80148c6 <__ssvfiscanf_r+0x1f2>
 8014946:	e79f      	b.n	8014888 <__ssvfiscanf_r+0x1b4>
 8014948:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801494a:	3201      	adds	r2, #1
 801494c:	9245      	str	r2, [sp, #276]	@ 0x114
 801494e:	6862      	ldr	r2, [r4, #4]
 8014950:	3a01      	subs	r2, #1
 8014952:	2a00      	cmp	r2, #0
 8014954:	6062      	str	r2, [r4, #4]
 8014956:	dd02      	ble.n	801495e <__ssvfiscanf_r+0x28a>
 8014958:	3301      	adds	r3, #1
 801495a:	6023      	str	r3, [r4, #0]
 801495c:	e7b6      	b.n	80148cc <__ssvfiscanf_r+0x1f8>
 801495e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014960:	4621      	mov	r1, r4
 8014962:	4630      	mov	r0, r6
 8014964:	4798      	blx	r3
 8014966:	2800      	cmp	r0, #0
 8014968:	d0b0      	beq.n	80148cc <__ssvfiscanf_r+0x1f8>
 801496a:	e78d      	b.n	8014888 <__ssvfiscanf_r+0x1b4>
 801496c:	2b04      	cmp	r3, #4
 801496e:	dc0f      	bgt.n	8014990 <__ssvfiscanf_r+0x2bc>
 8014970:	466b      	mov	r3, sp
 8014972:	4622      	mov	r2, r4
 8014974:	a941      	add	r1, sp, #260	@ 0x104
 8014976:	4630      	mov	r0, r6
 8014978:	f000 f9be 	bl	8014cf8 <_scanf_i>
 801497c:	e7b4      	b.n	80148e8 <__ssvfiscanf_r+0x214>
 801497e:	bf00      	nop
 8014980:	08014621 	.word	0x08014621
 8014984:	0801469b 	.word	0x0801469b
 8014988:	080174a9 	.word	0x080174a9
 801498c:	08017291 	.word	0x08017291
 8014990:	4b0a      	ldr	r3, [pc, #40]	@ (80149bc <__ssvfiscanf_r+0x2e8>)
 8014992:	2b00      	cmp	r3, #0
 8014994:	f43f aec6 	beq.w	8014724 <__ssvfiscanf_r+0x50>
 8014998:	466b      	mov	r3, sp
 801499a:	4622      	mov	r2, r4
 801499c:	a941      	add	r1, sp, #260	@ 0x104
 801499e:	4630      	mov	r0, r6
 80149a0:	f7fc fd1c 	bl	80113dc <_scanf_float>
 80149a4:	e7a0      	b.n	80148e8 <__ssvfiscanf_r+0x214>
 80149a6:	89a3      	ldrh	r3, [r4, #12]
 80149a8:	065b      	lsls	r3, r3, #25
 80149aa:	f53f af71 	bmi.w	8014890 <__ssvfiscanf_r+0x1bc>
 80149ae:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80149b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80149b8:	e7f9      	b.n	80149ae <__ssvfiscanf_r+0x2da>
 80149ba:	bf00      	nop
 80149bc:	080113dd 	.word	0x080113dd

080149c0 <__sfputc_r>:
 80149c0:	6893      	ldr	r3, [r2, #8]
 80149c2:	3b01      	subs	r3, #1
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	b410      	push	{r4}
 80149c8:	6093      	str	r3, [r2, #8]
 80149ca:	da08      	bge.n	80149de <__sfputc_r+0x1e>
 80149cc:	6994      	ldr	r4, [r2, #24]
 80149ce:	42a3      	cmp	r3, r4
 80149d0:	db01      	blt.n	80149d6 <__sfputc_r+0x16>
 80149d2:	290a      	cmp	r1, #10
 80149d4:	d103      	bne.n	80149de <__sfputc_r+0x1e>
 80149d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149da:	f7fd b97e 	b.w	8011cda <__swbuf_r>
 80149de:	6813      	ldr	r3, [r2, #0]
 80149e0:	1c58      	adds	r0, r3, #1
 80149e2:	6010      	str	r0, [r2, #0]
 80149e4:	7019      	strb	r1, [r3, #0]
 80149e6:	4608      	mov	r0, r1
 80149e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ec:	4770      	bx	lr

080149ee <__sfputs_r>:
 80149ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f0:	4606      	mov	r6, r0
 80149f2:	460f      	mov	r7, r1
 80149f4:	4614      	mov	r4, r2
 80149f6:	18d5      	adds	r5, r2, r3
 80149f8:	42ac      	cmp	r4, r5
 80149fa:	d101      	bne.n	8014a00 <__sfputs_r+0x12>
 80149fc:	2000      	movs	r0, #0
 80149fe:	e007      	b.n	8014a10 <__sfputs_r+0x22>
 8014a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a04:	463a      	mov	r2, r7
 8014a06:	4630      	mov	r0, r6
 8014a08:	f7ff ffda 	bl	80149c0 <__sfputc_r>
 8014a0c:	1c43      	adds	r3, r0, #1
 8014a0e:	d1f3      	bne.n	80149f8 <__sfputs_r+0xa>
 8014a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a14 <_vfiprintf_r>:
 8014a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a18:	460d      	mov	r5, r1
 8014a1a:	b09d      	sub	sp, #116	@ 0x74
 8014a1c:	4614      	mov	r4, r2
 8014a1e:	4698      	mov	r8, r3
 8014a20:	4606      	mov	r6, r0
 8014a22:	b118      	cbz	r0, 8014a2c <_vfiprintf_r+0x18>
 8014a24:	6a03      	ldr	r3, [r0, #32]
 8014a26:	b90b      	cbnz	r3, 8014a2c <_vfiprintf_r+0x18>
 8014a28:	f7fc ff6a 	bl	8011900 <__sinit>
 8014a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a2e:	07d9      	lsls	r1, r3, #31
 8014a30:	d405      	bmi.n	8014a3e <_vfiprintf_r+0x2a>
 8014a32:	89ab      	ldrh	r3, [r5, #12]
 8014a34:	059a      	lsls	r2, r3, #22
 8014a36:	d402      	bmi.n	8014a3e <_vfiprintf_r+0x2a>
 8014a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a3a:	f7fd fabe 	bl	8011fba <__retarget_lock_acquire_recursive>
 8014a3e:	89ab      	ldrh	r3, [r5, #12]
 8014a40:	071b      	lsls	r3, r3, #28
 8014a42:	d501      	bpl.n	8014a48 <_vfiprintf_r+0x34>
 8014a44:	692b      	ldr	r3, [r5, #16]
 8014a46:	b99b      	cbnz	r3, 8014a70 <_vfiprintf_r+0x5c>
 8014a48:	4629      	mov	r1, r5
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f7fd f984 	bl	8011d58 <__swsetup_r>
 8014a50:	b170      	cbz	r0, 8014a70 <_vfiprintf_r+0x5c>
 8014a52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a54:	07dc      	lsls	r4, r3, #31
 8014a56:	d504      	bpl.n	8014a62 <_vfiprintf_r+0x4e>
 8014a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a5c:	b01d      	add	sp, #116	@ 0x74
 8014a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a62:	89ab      	ldrh	r3, [r5, #12]
 8014a64:	0598      	lsls	r0, r3, #22
 8014a66:	d4f7      	bmi.n	8014a58 <_vfiprintf_r+0x44>
 8014a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a6a:	f7fd faa7 	bl	8011fbc <__retarget_lock_release_recursive>
 8014a6e:	e7f3      	b.n	8014a58 <_vfiprintf_r+0x44>
 8014a70:	2300      	movs	r3, #0
 8014a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a74:	2320      	movs	r3, #32
 8014a76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a7e:	2330      	movs	r3, #48	@ 0x30
 8014a80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c30 <_vfiprintf_r+0x21c>
 8014a84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a88:	f04f 0901 	mov.w	r9, #1
 8014a8c:	4623      	mov	r3, r4
 8014a8e:	469a      	mov	sl, r3
 8014a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a94:	b10a      	cbz	r2, 8014a9a <_vfiprintf_r+0x86>
 8014a96:	2a25      	cmp	r2, #37	@ 0x25
 8014a98:	d1f9      	bne.n	8014a8e <_vfiprintf_r+0x7a>
 8014a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a9e:	d00b      	beq.n	8014ab8 <_vfiprintf_r+0xa4>
 8014aa0:	465b      	mov	r3, fp
 8014aa2:	4622      	mov	r2, r4
 8014aa4:	4629      	mov	r1, r5
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	f7ff ffa1 	bl	80149ee <__sfputs_r>
 8014aac:	3001      	adds	r0, #1
 8014aae:	f000 80a7 	beq.w	8014c00 <_vfiprintf_r+0x1ec>
 8014ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ab4:	445a      	add	r2, fp
 8014ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 809f 	beq.w	8014c00 <_vfiprintf_r+0x1ec>
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014acc:	f10a 0a01 	add.w	sl, sl, #1
 8014ad0:	9304      	str	r3, [sp, #16]
 8014ad2:	9307      	str	r3, [sp, #28]
 8014ad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ad8:	931a      	str	r3, [sp, #104]	@ 0x68
 8014ada:	4654      	mov	r4, sl
 8014adc:	2205      	movs	r2, #5
 8014ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ae2:	4853      	ldr	r0, [pc, #332]	@ (8014c30 <_vfiprintf_r+0x21c>)
 8014ae4:	f7eb fbfc 	bl	80002e0 <memchr>
 8014ae8:	9a04      	ldr	r2, [sp, #16]
 8014aea:	b9d8      	cbnz	r0, 8014b24 <_vfiprintf_r+0x110>
 8014aec:	06d1      	lsls	r1, r2, #27
 8014aee:	bf44      	itt	mi
 8014af0:	2320      	movmi	r3, #32
 8014af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014af6:	0713      	lsls	r3, r2, #28
 8014af8:	bf44      	itt	mi
 8014afa:	232b      	movmi	r3, #43	@ 0x2b
 8014afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b00:	f89a 3000 	ldrb.w	r3, [sl]
 8014b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b06:	d015      	beq.n	8014b34 <_vfiprintf_r+0x120>
 8014b08:	9a07      	ldr	r2, [sp, #28]
 8014b0a:	4654      	mov	r4, sl
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	f04f 0c0a 	mov.w	ip, #10
 8014b12:	4621      	mov	r1, r4
 8014b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b18:	3b30      	subs	r3, #48	@ 0x30
 8014b1a:	2b09      	cmp	r3, #9
 8014b1c:	d94b      	bls.n	8014bb6 <_vfiprintf_r+0x1a2>
 8014b1e:	b1b0      	cbz	r0, 8014b4e <_vfiprintf_r+0x13a>
 8014b20:	9207      	str	r2, [sp, #28]
 8014b22:	e014      	b.n	8014b4e <_vfiprintf_r+0x13a>
 8014b24:	eba0 0308 	sub.w	r3, r0, r8
 8014b28:	fa09 f303 	lsl.w	r3, r9, r3
 8014b2c:	4313      	orrs	r3, r2
 8014b2e:	9304      	str	r3, [sp, #16]
 8014b30:	46a2      	mov	sl, r4
 8014b32:	e7d2      	b.n	8014ada <_vfiprintf_r+0xc6>
 8014b34:	9b03      	ldr	r3, [sp, #12]
 8014b36:	1d19      	adds	r1, r3, #4
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	9103      	str	r1, [sp, #12]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	bfbb      	ittet	lt
 8014b40:	425b      	neglt	r3, r3
 8014b42:	f042 0202 	orrlt.w	r2, r2, #2
 8014b46:	9307      	strge	r3, [sp, #28]
 8014b48:	9307      	strlt	r3, [sp, #28]
 8014b4a:	bfb8      	it	lt
 8014b4c:	9204      	strlt	r2, [sp, #16]
 8014b4e:	7823      	ldrb	r3, [r4, #0]
 8014b50:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b52:	d10a      	bne.n	8014b6a <_vfiprintf_r+0x156>
 8014b54:	7863      	ldrb	r3, [r4, #1]
 8014b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b58:	d132      	bne.n	8014bc0 <_vfiprintf_r+0x1ac>
 8014b5a:	9b03      	ldr	r3, [sp, #12]
 8014b5c:	1d1a      	adds	r2, r3, #4
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	9203      	str	r2, [sp, #12]
 8014b62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b66:	3402      	adds	r4, #2
 8014b68:	9305      	str	r3, [sp, #20]
 8014b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c40 <_vfiprintf_r+0x22c>
 8014b6e:	7821      	ldrb	r1, [r4, #0]
 8014b70:	2203      	movs	r2, #3
 8014b72:	4650      	mov	r0, sl
 8014b74:	f7eb fbb4 	bl	80002e0 <memchr>
 8014b78:	b138      	cbz	r0, 8014b8a <_vfiprintf_r+0x176>
 8014b7a:	9b04      	ldr	r3, [sp, #16]
 8014b7c:	eba0 000a 	sub.w	r0, r0, sl
 8014b80:	2240      	movs	r2, #64	@ 0x40
 8014b82:	4082      	lsls	r2, r0
 8014b84:	4313      	orrs	r3, r2
 8014b86:	3401      	adds	r4, #1
 8014b88:	9304      	str	r3, [sp, #16]
 8014b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b8e:	4829      	ldr	r0, [pc, #164]	@ (8014c34 <_vfiprintf_r+0x220>)
 8014b90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b94:	2206      	movs	r2, #6
 8014b96:	f7eb fba3 	bl	80002e0 <memchr>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d03f      	beq.n	8014c1e <_vfiprintf_r+0x20a>
 8014b9e:	4b26      	ldr	r3, [pc, #152]	@ (8014c38 <_vfiprintf_r+0x224>)
 8014ba0:	bb1b      	cbnz	r3, 8014bea <_vfiprintf_r+0x1d6>
 8014ba2:	9b03      	ldr	r3, [sp, #12]
 8014ba4:	3307      	adds	r3, #7
 8014ba6:	f023 0307 	bic.w	r3, r3, #7
 8014baa:	3308      	adds	r3, #8
 8014bac:	9303      	str	r3, [sp, #12]
 8014bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bb0:	443b      	add	r3, r7
 8014bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bb4:	e76a      	b.n	8014a8c <_vfiprintf_r+0x78>
 8014bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bba:	460c      	mov	r4, r1
 8014bbc:	2001      	movs	r0, #1
 8014bbe:	e7a8      	b.n	8014b12 <_vfiprintf_r+0xfe>
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	3401      	adds	r4, #1
 8014bc4:	9305      	str	r3, [sp, #20]
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	f04f 0c0a 	mov.w	ip, #10
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bd2:	3a30      	subs	r2, #48	@ 0x30
 8014bd4:	2a09      	cmp	r2, #9
 8014bd6:	d903      	bls.n	8014be0 <_vfiprintf_r+0x1cc>
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d0c6      	beq.n	8014b6a <_vfiprintf_r+0x156>
 8014bdc:	9105      	str	r1, [sp, #20]
 8014bde:	e7c4      	b.n	8014b6a <_vfiprintf_r+0x156>
 8014be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014be4:	4604      	mov	r4, r0
 8014be6:	2301      	movs	r3, #1
 8014be8:	e7f0      	b.n	8014bcc <_vfiprintf_r+0x1b8>
 8014bea:	ab03      	add	r3, sp, #12
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	462a      	mov	r2, r5
 8014bf0:	4b12      	ldr	r3, [pc, #72]	@ (8014c3c <_vfiprintf_r+0x228>)
 8014bf2:	a904      	add	r1, sp, #16
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	f7fc f84b 	bl	8010c90 <_printf_float>
 8014bfa:	4607      	mov	r7, r0
 8014bfc:	1c78      	adds	r0, r7, #1
 8014bfe:	d1d6      	bne.n	8014bae <_vfiprintf_r+0x19a>
 8014c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c02:	07d9      	lsls	r1, r3, #31
 8014c04:	d405      	bmi.n	8014c12 <_vfiprintf_r+0x1fe>
 8014c06:	89ab      	ldrh	r3, [r5, #12]
 8014c08:	059a      	lsls	r2, r3, #22
 8014c0a:	d402      	bmi.n	8014c12 <_vfiprintf_r+0x1fe>
 8014c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c0e:	f7fd f9d5 	bl	8011fbc <__retarget_lock_release_recursive>
 8014c12:	89ab      	ldrh	r3, [r5, #12]
 8014c14:	065b      	lsls	r3, r3, #25
 8014c16:	f53f af1f 	bmi.w	8014a58 <_vfiprintf_r+0x44>
 8014c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c1c:	e71e      	b.n	8014a5c <_vfiprintf_r+0x48>
 8014c1e:	ab03      	add	r3, sp, #12
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	462a      	mov	r2, r5
 8014c24:	4b05      	ldr	r3, [pc, #20]	@ (8014c3c <_vfiprintf_r+0x228>)
 8014c26:	a904      	add	r1, sp, #16
 8014c28:	4630      	mov	r0, r6
 8014c2a:	f7fc fab9 	bl	80111a0 <_printf_i>
 8014c2e:	e7e4      	b.n	8014bfa <_vfiprintf_r+0x1e6>
 8014c30:	0801728b 	.word	0x0801728b
 8014c34:	08017295 	.word	0x08017295
 8014c38:	08010c91 	.word	0x08010c91
 8014c3c:	080149ef 	.word	0x080149ef
 8014c40:	08017291 	.word	0x08017291

08014c44 <_scanf_chars>:
 8014c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c48:	4615      	mov	r5, r2
 8014c4a:	688a      	ldr	r2, [r1, #8]
 8014c4c:	4680      	mov	r8, r0
 8014c4e:	460c      	mov	r4, r1
 8014c50:	b932      	cbnz	r2, 8014c60 <_scanf_chars+0x1c>
 8014c52:	698a      	ldr	r2, [r1, #24]
 8014c54:	2a00      	cmp	r2, #0
 8014c56:	bf14      	ite	ne
 8014c58:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8014c5c:	2201      	moveq	r2, #1
 8014c5e:	608a      	str	r2, [r1, #8]
 8014c60:	6822      	ldr	r2, [r4, #0]
 8014c62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014cf4 <_scanf_chars+0xb0>
 8014c66:	06d1      	lsls	r1, r2, #27
 8014c68:	bf5f      	itttt	pl
 8014c6a:	681a      	ldrpl	r2, [r3, #0]
 8014c6c:	1d11      	addpl	r1, r2, #4
 8014c6e:	6019      	strpl	r1, [r3, #0]
 8014c70:	6816      	ldrpl	r6, [r2, #0]
 8014c72:	2700      	movs	r7, #0
 8014c74:	69a0      	ldr	r0, [r4, #24]
 8014c76:	b188      	cbz	r0, 8014c9c <_scanf_chars+0x58>
 8014c78:	2801      	cmp	r0, #1
 8014c7a:	d107      	bne.n	8014c8c <_scanf_chars+0x48>
 8014c7c:	682b      	ldr	r3, [r5, #0]
 8014c7e:	781a      	ldrb	r2, [r3, #0]
 8014c80:	6963      	ldr	r3, [r4, #20]
 8014c82:	5c9b      	ldrb	r3, [r3, r2]
 8014c84:	b953      	cbnz	r3, 8014c9c <_scanf_chars+0x58>
 8014c86:	2f00      	cmp	r7, #0
 8014c88:	d031      	beq.n	8014cee <_scanf_chars+0xaa>
 8014c8a:	e022      	b.n	8014cd2 <_scanf_chars+0x8e>
 8014c8c:	2802      	cmp	r0, #2
 8014c8e:	d120      	bne.n	8014cd2 <_scanf_chars+0x8e>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014c98:	071b      	lsls	r3, r3, #28
 8014c9a:	d41a      	bmi.n	8014cd2 <_scanf_chars+0x8e>
 8014c9c:	6823      	ldr	r3, [r4, #0]
 8014c9e:	06da      	lsls	r2, r3, #27
 8014ca0:	bf5e      	ittt	pl
 8014ca2:	682b      	ldrpl	r3, [r5, #0]
 8014ca4:	781b      	ldrbpl	r3, [r3, #0]
 8014ca6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014caa:	682a      	ldr	r2, [r5, #0]
 8014cac:	686b      	ldr	r3, [r5, #4]
 8014cae:	3201      	adds	r2, #1
 8014cb0:	602a      	str	r2, [r5, #0]
 8014cb2:	68a2      	ldr	r2, [r4, #8]
 8014cb4:	3b01      	subs	r3, #1
 8014cb6:	3a01      	subs	r2, #1
 8014cb8:	606b      	str	r3, [r5, #4]
 8014cba:	3701      	adds	r7, #1
 8014cbc:	60a2      	str	r2, [r4, #8]
 8014cbe:	b142      	cbz	r2, 8014cd2 <_scanf_chars+0x8e>
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	dcd7      	bgt.n	8014c74 <_scanf_chars+0x30>
 8014cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014cc8:	4629      	mov	r1, r5
 8014cca:	4640      	mov	r0, r8
 8014ccc:	4798      	blx	r3
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d0d0      	beq.n	8014c74 <_scanf_chars+0x30>
 8014cd2:	6823      	ldr	r3, [r4, #0]
 8014cd4:	f013 0310 	ands.w	r3, r3, #16
 8014cd8:	d105      	bne.n	8014ce6 <_scanf_chars+0xa2>
 8014cda:	68e2      	ldr	r2, [r4, #12]
 8014cdc:	3201      	adds	r2, #1
 8014cde:	60e2      	str	r2, [r4, #12]
 8014ce0:	69a2      	ldr	r2, [r4, #24]
 8014ce2:	b102      	cbz	r2, 8014ce6 <_scanf_chars+0xa2>
 8014ce4:	7033      	strb	r3, [r6, #0]
 8014ce6:	6923      	ldr	r3, [r4, #16]
 8014ce8:	443b      	add	r3, r7
 8014cea:	6123      	str	r3, [r4, #16]
 8014cec:	2000      	movs	r0, #0
 8014cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cf2:	bf00      	nop
 8014cf4:	080174a9 	.word	0x080174a9

08014cf8 <_scanf_i>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	4698      	mov	r8, r3
 8014cfe:	4b74      	ldr	r3, [pc, #464]	@ (8014ed0 <_scanf_i+0x1d8>)
 8014d00:	460c      	mov	r4, r1
 8014d02:	4682      	mov	sl, r0
 8014d04:	4616      	mov	r6, r2
 8014d06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014d0a:	b087      	sub	sp, #28
 8014d0c:	ab03      	add	r3, sp, #12
 8014d0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014d12:	4b70      	ldr	r3, [pc, #448]	@ (8014ed4 <_scanf_i+0x1dc>)
 8014d14:	69a1      	ldr	r1, [r4, #24]
 8014d16:	4a70      	ldr	r2, [pc, #448]	@ (8014ed8 <_scanf_i+0x1e0>)
 8014d18:	2903      	cmp	r1, #3
 8014d1a:	bf08      	it	eq
 8014d1c:	461a      	moveq	r2, r3
 8014d1e:	68a3      	ldr	r3, [r4, #8]
 8014d20:	9201      	str	r2, [sp, #4]
 8014d22:	1e5a      	subs	r2, r3, #1
 8014d24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014d28:	bf88      	it	hi
 8014d2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014d2e:	4627      	mov	r7, r4
 8014d30:	bf82      	ittt	hi
 8014d32:	eb03 0905 	addhi.w	r9, r3, r5
 8014d36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014d3a:	60a3      	strhi	r3, [r4, #8]
 8014d3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014d40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014d44:	bf98      	it	ls
 8014d46:	f04f 0900 	movls.w	r9, #0
 8014d4a:	6023      	str	r3, [r4, #0]
 8014d4c:	463d      	mov	r5, r7
 8014d4e:	f04f 0b00 	mov.w	fp, #0
 8014d52:	6831      	ldr	r1, [r6, #0]
 8014d54:	ab03      	add	r3, sp, #12
 8014d56:	7809      	ldrb	r1, [r1, #0]
 8014d58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014d5c:	2202      	movs	r2, #2
 8014d5e:	f7eb fabf 	bl	80002e0 <memchr>
 8014d62:	b328      	cbz	r0, 8014db0 <_scanf_i+0xb8>
 8014d64:	f1bb 0f01 	cmp.w	fp, #1
 8014d68:	d159      	bne.n	8014e1e <_scanf_i+0x126>
 8014d6a:	6862      	ldr	r2, [r4, #4]
 8014d6c:	b92a      	cbnz	r2, 8014d7a <_scanf_i+0x82>
 8014d6e:	6822      	ldr	r2, [r4, #0]
 8014d70:	2108      	movs	r1, #8
 8014d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014d76:	6061      	str	r1, [r4, #4]
 8014d78:	6022      	str	r2, [r4, #0]
 8014d7a:	6822      	ldr	r2, [r4, #0]
 8014d7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014d80:	6022      	str	r2, [r4, #0]
 8014d82:	68a2      	ldr	r2, [r4, #8]
 8014d84:	1e51      	subs	r1, r2, #1
 8014d86:	60a1      	str	r1, [r4, #8]
 8014d88:	b192      	cbz	r2, 8014db0 <_scanf_i+0xb8>
 8014d8a:	6832      	ldr	r2, [r6, #0]
 8014d8c:	1c51      	adds	r1, r2, #1
 8014d8e:	6031      	str	r1, [r6, #0]
 8014d90:	7812      	ldrb	r2, [r2, #0]
 8014d92:	f805 2b01 	strb.w	r2, [r5], #1
 8014d96:	6872      	ldr	r2, [r6, #4]
 8014d98:	3a01      	subs	r2, #1
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	6072      	str	r2, [r6, #4]
 8014d9e:	dc07      	bgt.n	8014db0 <_scanf_i+0xb8>
 8014da0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014da4:	4631      	mov	r1, r6
 8014da6:	4650      	mov	r0, sl
 8014da8:	4790      	blx	r2
 8014daa:	2800      	cmp	r0, #0
 8014dac:	f040 8085 	bne.w	8014eba <_scanf_i+0x1c2>
 8014db0:	f10b 0b01 	add.w	fp, fp, #1
 8014db4:	f1bb 0f03 	cmp.w	fp, #3
 8014db8:	d1cb      	bne.n	8014d52 <_scanf_i+0x5a>
 8014dba:	6863      	ldr	r3, [r4, #4]
 8014dbc:	b90b      	cbnz	r3, 8014dc2 <_scanf_i+0xca>
 8014dbe:	230a      	movs	r3, #10
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	6863      	ldr	r3, [r4, #4]
 8014dc4:	4945      	ldr	r1, [pc, #276]	@ (8014edc <_scanf_i+0x1e4>)
 8014dc6:	6960      	ldr	r0, [r4, #20]
 8014dc8:	1ac9      	subs	r1, r1, r3
 8014dca:	f000 f997 	bl	80150fc <__sccl>
 8014dce:	f04f 0b00 	mov.w	fp, #0
 8014dd2:	68a3      	ldr	r3, [r4, #8]
 8014dd4:	6822      	ldr	r2, [r4, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d03d      	beq.n	8014e56 <_scanf_i+0x15e>
 8014dda:	6831      	ldr	r1, [r6, #0]
 8014ddc:	6960      	ldr	r0, [r4, #20]
 8014dde:	f891 c000 	ldrb.w	ip, [r1]
 8014de2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d035      	beq.n	8014e56 <_scanf_i+0x15e>
 8014dea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014dee:	d124      	bne.n	8014e3a <_scanf_i+0x142>
 8014df0:	0510      	lsls	r0, r2, #20
 8014df2:	d522      	bpl.n	8014e3a <_scanf_i+0x142>
 8014df4:	f10b 0b01 	add.w	fp, fp, #1
 8014df8:	f1b9 0f00 	cmp.w	r9, #0
 8014dfc:	d003      	beq.n	8014e06 <_scanf_i+0x10e>
 8014dfe:	3301      	adds	r3, #1
 8014e00:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8014e04:	60a3      	str	r3, [r4, #8]
 8014e06:	6873      	ldr	r3, [r6, #4]
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	6073      	str	r3, [r6, #4]
 8014e0e:	dd1b      	ble.n	8014e48 <_scanf_i+0x150>
 8014e10:	6833      	ldr	r3, [r6, #0]
 8014e12:	3301      	adds	r3, #1
 8014e14:	6033      	str	r3, [r6, #0]
 8014e16:	68a3      	ldr	r3, [r4, #8]
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	60a3      	str	r3, [r4, #8]
 8014e1c:	e7d9      	b.n	8014dd2 <_scanf_i+0xda>
 8014e1e:	f1bb 0f02 	cmp.w	fp, #2
 8014e22:	d1ae      	bne.n	8014d82 <_scanf_i+0x8a>
 8014e24:	6822      	ldr	r2, [r4, #0]
 8014e26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014e2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014e2e:	d1c4      	bne.n	8014dba <_scanf_i+0xc2>
 8014e30:	2110      	movs	r1, #16
 8014e32:	6061      	str	r1, [r4, #4]
 8014e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014e38:	e7a2      	b.n	8014d80 <_scanf_i+0x88>
 8014e3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014e3e:	6022      	str	r2, [r4, #0]
 8014e40:	780b      	ldrb	r3, [r1, #0]
 8014e42:	f805 3b01 	strb.w	r3, [r5], #1
 8014e46:	e7de      	b.n	8014e06 <_scanf_i+0x10e>
 8014e48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	4650      	mov	r0, sl
 8014e50:	4798      	blx	r3
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d0df      	beq.n	8014e16 <_scanf_i+0x11e>
 8014e56:	6823      	ldr	r3, [r4, #0]
 8014e58:	05d9      	lsls	r1, r3, #23
 8014e5a:	d50d      	bpl.n	8014e78 <_scanf_i+0x180>
 8014e5c:	42bd      	cmp	r5, r7
 8014e5e:	d909      	bls.n	8014e74 <_scanf_i+0x17c>
 8014e60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014e68:	4632      	mov	r2, r6
 8014e6a:	4650      	mov	r0, sl
 8014e6c:	4798      	blx	r3
 8014e6e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8014e72:	464d      	mov	r5, r9
 8014e74:	42bd      	cmp	r5, r7
 8014e76:	d028      	beq.n	8014eca <_scanf_i+0x1d2>
 8014e78:	6822      	ldr	r2, [r4, #0]
 8014e7a:	f012 0210 	ands.w	r2, r2, #16
 8014e7e:	d113      	bne.n	8014ea8 <_scanf_i+0x1b0>
 8014e80:	702a      	strb	r2, [r5, #0]
 8014e82:	6863      	ldr	r3, [r4, #4]
 8014e84:	9e01      	ldr	r6, [sp, #4]
 8014e86:	4639      	mov	r1, r7
 8014e88:	4650      	mov	r0, sl
 8014e8a:	47b0      	blx	r6
 8014e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8014e90:	6821      	ldr	r1, [r4, #0]
 8014e92:	1d1a      	adds	r2, r3, #4
 8014e94:	f8c8 2000 	str.w	r2, [r8]
 8014e98:	f011 0f20 	tst.w	r1, #32
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	d00f      	beq.n	8014ec0 <_scanf_i+0x1c8>
 8014ea0:	6018      	str	r0, [r3, #0]
 8014ea2:	68e3      	ldr	r3, [r4, #12]
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	60e3      	str	r3, [r4, #12]
 8014ea8:	6923      	ldr	r3, [r4, #16]
 8014eaa:	1bed      	subs	r5, r5, r7
 8014eac:	445d      	add	r5, fp
 8014eae:	442b      	add	r3, r5
 8014eb0:	6123      	str	r3, [r4, #16]
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	b007      	add	sp, #28
 8014eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eba:	f04f 0b00 	mov.w	fp, #0
 8014ebe:	e7ca      	b.n	8014e56 <_scanf_i+0x15e>
 8014ec0:	07ca      	lsls	r2, r1, #31
 8014ec2:	bf4c      	ite	mi
 8014ec4:	8018      	strhmi	r0, [r3, #0]
 8014ec6:	6018      	strpl	r0, [r3, #0]
 8014ec8:	e7eb      	b.n	8014ea2 <_scanf_i+0x1aa>
 8014eca:	2001      	movs	r0, #1
 8014ecc:	e7f2      	b.n	8014eb4 <_scanf_i+0x1bc>
 8014ece:	bf00      	nop
 8014ed0:	08017010 	.word	0x08017010
 8014ed4:	0801436d 	.word	0x0801436d
 8014ed8:	08015ae5 	.word	0x08015ae5
 8014edc:	080172ac 	.word	0x080172ac

08014ee0 <__sflush_r>:
 8014ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee8:	0716      	lsls	r6, r2, #28
 8014eea:	4605      	mov	r5, r0
 8014eec:	460c      	mov	r4, r1
 8014eee:	d454      	bmi.n	8014f9a <__sflush_r+0xba>
 8014ef0:	684b      	ldr	r3, [r1, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	dc02      	bgt.n	8014efc <__sflush_r+0x1c>
 8014ef6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	dd48      	ble.n	8014f8e <__sflush_r+0xae>
 8014efc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014efe:	2e00      	cmp	r6, #0
 8014f00:	d045      	beq.n	8014f8e <__sflush_r+0xae>
 8014f02:	2300      	movs	r3, #0
 8014f04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014f08:	682f      	ldr	r7, [r5, #0]
 8014f0a:	6a21      	ldr	r1, [r4, #32]
 8014f0c:	602b      	str	r3, [r5, #0]
 8014f0e:	d030      	beq.n	8014f72 <__sflush_r+0x92>
 8014f10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014f12:	89a3      	ldrh	r3, [r4, #12]
 8014f14:	0759      	lsls	r1, r3, #29
 8014f16:	d505      	bpl.n	8014f24 <__sflush_r+0x44>
 8014f18:	6863      	ldr	r3, [r4, #4]
 8014f1a:	1ad2      	subs	r2, r2, r3
 8014f1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014f1e:	b10b      	cbz	r3, 8014f24 <__sflush_r+0x44>
 8014f20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014f22:	1ad2      	subs	r2, r2, r3
 8014f24:	2300      	movs	r3, #0
 8014f26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f28:	6a21      	ldr	r1, [r4, #32]
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	47b0      	blx	r6
 8014f2e:	1c43      	adds	r3, r0, #1
 8014f30:	89a3      	ldrh	r3, [r4, #12]
 8014f32:	d106      	bne.n	8014f42 <__sflush_r+0x62>
 8014f34:	6829      	ldr	r1, [r5, #0]
 8014f36:	291d      	cmp	r1, #29
 8014f38:	d82b      	bhi.n	8014f92 <__sflush_r+0xb2>
 8014f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8014fe4 <__sflush_r+0x104>)
 8014f3c:	40ca      	lsrs	r2, r1
 8014f3e:	07d6      	lsls	r6, r2, #31
 8014f40:	d527      	bpl.n	8014f92 <__sflush_r+0xb2>
 8014f42:	2200      	movs	r2, #0
 8014f44:	6062      	str	r2, [r4, #4]
 8014f46:	04d9      	lsls	r1, r3, #19
 8014f48:	6922      	ldr	r2, [r4, #16]
 8014f4a:	6022      	str	r2, [r4, #0]
 8014f4c:	d504      	bpl.n	8014f58 <__sflush_r+0x78>
 8014f4e:	1c42      	adds	r2, r0, #1
 8014f50:	d101      	bne.n	8014f56 <__sflush_r+0x76>
 8014f52:	682b      	ldr	r3, [r5, #0]
 8014f54:	b903      	cbnz	r3, 8014f58 <__sflush_r+0x78>
 8014f56:	6560      	str	r0, [r4, #84]	@ 0x54
 8014f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014f5a:	602f      	str	r7, [r5, #0]
 8014f5c:	b1b9      	cbz	r1, 8014f8e <__sflush_r+0xae>
 8014f5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f62:	4299      	cmp	r1, r3
 8014f64:	d002      	beq.n	8014f6c <__sflush_r+0x8c>
 8014f66:	4628      	mov	r0, r5
 8014f68:	f7fd fe24 	bl	8012bb4 <_free_r>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f70:	e00d      	b.n	8014f8e <__sflush_r+0xae>
 8014f72:	2301      	movs	r3, #1
 8014f74:	4628      	mov	r0, r5
 8014f76:	47b0      	blx	r6
 8014f78:	4602      	mov	r2, r0
 8014f7a:	1c50      	adds	r0, r2, #1
 8014f7c:	d1c9      	bne.n	8014f12 <__sflush_r+0x32>
 8014f7e:	682b      	ldr	r3, [r5, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d0c6      	beq.n	8014f12 <__sflush_r+0x32>
 8014f84:	2b1d      	cmp	r3, #29
 8014f86:	d001      	beq.n	8014f8c <__sflush_r+0xac>
 8014f88:	2b16      	cmp	r3, #22
 8014f8a:	d11e      	bne.n	8014fca <__sflush_r+0xea>
 8014f8c:	602f      	str	r7, [r5, #0]
 8014f8e:	2000      	movs	r0, #0
 8014f90:	e022      	b.n	8014fd8 <__sflush_r+0xf8>
 8014f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f96:	b21b      	sxth	r3, r3
 8014f98:	e01b      	b.n	8014fd2 <__sflush_r+0xf2>
 8014f9a:	690f      	ldr	r7, [r1, #16]
 8014f9c:	2f00      	cmp	r7, #0
 8014f9e:	d0f6      	beq.n	8014f8e <__sflush_r+0xae>
 8014fa0:	0793      	lsls	r3, r2, #30
 8014fa2:	680e      	ldr	r6, [r1, #0]
 8014fa4:	bf08      	it	eq
 8014fa6:	694b      	ldreq	r3, [r1, #20]
 8014fa8:	600f      	str	r7, [r1, #0]
 8014faa:	bf18      	it	ne
 8014fac:	2300      	movne	r3, #0
 8014fae:	eba6 0807 	sub.w	r8, r6, r7
 8014fb2:	608b      	str	r3, [r1, #8]
 8014fb4:	f1b8 0f00 	cmp.w	r8, #0
 8014fb8:	dde9      	ble.n	8014f8e <__sflush_r+0xae>
 8014fba:	6a21      	ldr	r1, [r4, #32]
 8014fbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014fbe:	4643      	mov	r3, r8
 8014fc0:	463a      	mov	r2, r7
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	47b0      	blx	r6
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	dc08      	bgt.n	8014fdc <__sflush_r+0xfc>
 8014fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fd2:	81a3      	strh	r3, [r4, #12]
 8014fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fdc:	4407      	add	r7, r0
 8014fde:	eba8 0800 	sub.w	r8, r8, r0
 8014fe2:	e7e7      	b.n	8014fb4 <__sflush_r+0xd4>
 8014fe4:	20400001 	.word	0x20400001

08014fe8 <_fflush_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	690b      	ldr	r3, [r1, #16]
 8014fec:	4605      	mov	r5, r0
 8014fee:	460c      	mov	r4, r1
 8014ff0:	b913      	cbnz	r3, 8014ff8 <_fflush_r+0x10>
 8014ff2:	2500      	movs	r5, #0
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	bd38      	pop	{r3, r4, r5, pc}
 8014ff8:	b118      	cbz	r0, 8015002 <_fflush_r+0x1a>
 8014ffa:	6a03      	ldr	r3, [r0, #32]
 8014ffc:	b90b      	cbnz	r3, 8015002 <_fflush_r+0x1a>
 8014ffe:	f7fc fc7f 	bl	8011900 <__sinit>
 8015002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d0f3      	beq.n	8014ff2 <_fflush_r+0xa>
 801500a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801500c:	07d0      	lsls	r0, r2, #31
 801500e:	d404      	bmi.n	801501a <_fflush_r+0x32>
 8015010:	0599      	lsls	r1, r3, #22
 8015012:	d402      	bmi.n	801501a <_fflush_r+0x32>
 8015014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015016:	f7fc ffd0 	bl	8011fba <__retarget_lock_acquire_recursive>
 801501a:	4628      	mov	r0, r5
 801501c:	4621      	mov	r1, r4
 801501e:	f7ff ff5f 	bl	8014ee0 <__sflush_r>
 8015022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015024:	07da      	lsls	r2, r3, #31
 8015026:	4605      	mov	r5, r0
 8015028:	d4e4      	bmi.n	8014ff4 <_fflush_r+0xc>
 801502a:	89a3      	ldrh	r3, [r4, #12]
 801502c:	059b      	lsls	r3, r3, #22
 801502e:	d4e1      	bmi.n	8014ff4 <_fflush_r+0xc>
 8015030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015032:	f7fc ffc3 	bl	8011fbc <__retarget_lock_release_recursive>
 8015036:	e7dd      	b.n	8014ff4 <_fflush_r+0xc>

08015038 <__swhatbuf_r>:
 8015038:	b570      	push	{r4, r5, r6, lr}
 801503a:	460c      	mov	r4, r1
 801503c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015040:	2900      	cmp	r1, #0
 8015042:	b096      	sub	sp, #88	@ 0x58
 8015044:	4615      	mov	r5, r2
 8015046:	461e      	mov	r6, r3
 8015048:	da0d      	bge.n	8015066 <__swhatbuf_r+0x2e>
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015050:	f04f 0100 	mov.w	r1, #0
 8015054:	bf14      	ite	ne
 8015056:	2340      	movne	r3, #64	@ 0x40
 8015058:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801505c:	2000      	movs	r0, #0
 801505e:	6031      	str	r1, [r6, #0]
 8015060:	602b      	str	r3, [r5, #0]
 8015062:	b016      	add	sp, #88	@ 0x58
 8015064:	bd70      	pop	{r4, r5, r6, pc}
 8015066:	466a      	mov	r2, sp
 8015068:	f000 f8e8 	bl	801523c <_fstat_r>
 801506c:	2800      	cmp	r0, #0
 801506e:	dbec      	blt.n	801504a <__swhatbuf_r+0x12>
 8015070:	9901      	ldr	r1, [sp, #4]
 8015072:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015076:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801507a:	4259      	negs	r1, r3
 801507c:	4159      	adcs	r1, r3
 801507e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015082:	e7eb      	b.n	801505c <__swhatbuf_r+0x24>

08015084 <__smakebuf_r>:
 8015084:	898b      	ldrh	r3, [r1, #12]
 8015086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015088:	079d      	lsls	r5, r3, #30
 801508a:	4606      	mov	r6, r0
 801508c:	460c      	mov	r4, r1
 801508e:	d507      	bpl.n	80150a0 <__smakebuf_r+0x1c>
 8015090:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	6123      	str	r3, [r4, #16]
 8015098:	2301      	movs	r3, #1
 801509a:	6163      	str	r3, [r4, #20]
 801509c:	b003      	add	sp, #12
 801509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150a0:	ab01      	add	r3, sp, #4
 80150a2:	466a      	mov	r2, sp
 80150a4:	f7ff ffc8 	bl	8015038 <__swhatbuf_r>
 80150a8:	9f00      	ldr	r7, [sp, #0]
 80150aa:	4605      	mov	r5, r0
 80150ac:	4639      	mov	r1, r7
 80150ae:	4630      	mov	r0, r6
 80150b0:	f7fd fdf4 	bl	8012c9c <_malloc_r>
 80150b4:	b948      	cbnz	r0, 80150ca <__smakebuf_r+0x46>
 80150b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150ba:	059a      	lsls	r2, r3, #22
 80150bc:	d4ee      	bmi.n	801509c <__smakebuf_r+0x18>
 80150be:	f023 0303 	bic.w	r3, r3, #3
 80150c2:	f043 0302 	orr.w	r3, r3, #2
 80150c6:	81a3      	strh	r3, [r4, #12]
 80150c8:	e7e2      	b.n	8015090 <__smakebuf_r+0xc>
 80150ca:	89a3      	ldrh	r3, [r4, #12]
 80150cc:	6020      	str	r0, [r4, #0]
 80150ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150d2:	81a3      	strh	r3, [r4, #12]
 80150d4:	9b01      	ldr	r3, [sp, #4]
 80150d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80150da:	b15b      	cbz	r3, 80150f4 <__smakebuf_r+0x70>
 80150dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150e0:	4630      	mov	r0, r6
 80150e2:	f000 f8bd 	bl	8015260 <_isatty_r>
 80150e6:	b128      	cbz	r0, 80150f4 <__smakebuf_r+0x70>
 80150e8:	89a3      	ldrh	r3, [r4, #12]
 80150ea:	f023 0303 	bic.w	r3, r3, #3
 80150ee:	f043 0301 	orr.w	r3, r3, #1
 80150f2:	81a3      	strh	r3, [r4, #12]
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	431d      	orrs	r5, r3
 80150f8:	81a5      	strh	r5, [r4, #12]
 80150fa:	e7cf      	b.n	801509c <__smakebuf_r+0x18>

080150fc <__sccl>:
 80150fc:	b570      	push	{r4, r5, r6, lr}
 80150fe:	780b      	ldrb	r3, [r1, #0]
 8015100:	4604      	mov	r4, r0
 8015102:	2b5e      	cmp	r3, #94	@ 0x5e
 8015104:	bf0b      	itete	eq
 8015106:	784b      	ldrbeq	r3, [r1, #1]
 8015108:	1c4a      	addne	r2, r1, #1
 801510a:	1c8a      	addeq	r2, r1, #2
 801510c:	2100      	movne	r1, #0
 801510e:	bf08      	it	eq
 8015110:	2101      	moveq	r1, #1
 8015112:	3801      	subs	r0, #1
 8015114:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8015118:	f800 1f01 	strb.w	r1, [r0, #1]!
 801511c:	42a8      	cmp	r0, r5
 801511e:	d1fb      	bne.n	8015118 <__sccl+0x1c>
 8015120:	b90b      	cbnz	r3, 8015126 <__sccl+0x2a>
 8015122:	1e50      	subs	r0, r2, #1
 8015124:	bd70      	pop	{r4, r5, r6, pc}
 8015126:	f081 0101 	eor.w	r1, r1, #1
 801512a:	54e1      	strb	r1, [r4, r3]
 801512c:	4610      	mov	r0, r2
 801512e:	4602      	mov	r2, r0
 8015130:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015134:	2d2d      	cmp	r5, #45	@ 0x2d
 8015136:	d005      	beq.n	8015144 <__sccl+0x48>
 8015138:	2d5d      	cmp	r5, #93	@ 0x5d
 801513a:	d016      	beq.n	801516a <__sccl+0x6e>
 801513c:	2d00      	cmp	r5, #0
 801513e:	d0f1      	beq.n	8015124 <__sccl+0x28>
 8015140:	462b      	mov	r3, r5
 8015142:	e7f2      	b.n	801512a <__sccl+0x2e>
 8015144:	7846      	ldrb	r6, [r0, #1]
 8015146:	2e5d      	cmp	r6, #93	@ 0x5d
 8015148:	d0fa      	beq.n	8015140 <__sccl+0x44>
 801514a:	42b3      	cmp	r3, r6
 801514c:	dcf8      	bgt.n	8015140 <__sccl+0x44>
 801514e:	3002      	adds	r0, #2
 8015150:	461a      	mov	r2, r3
 8015152:	3201      	adds	r2, #1
 8015154:	4296      	cmp	r6, r2
 8015156:	54a1      	strb	r1, [r4, r2]
 8015158:	dcfb      	bgt.n	8015152 <__sccl+0x56>
 801515a:	1af2      	subs	r2, r6, r3
 801515c:	3a01      	subs	r2, #1
 801515e:	1c5d      	adds	r5, r3, #1
 8015160:	42b3      	cmp	r3, r6
 8015162:	bfa8      	it	ge
 8015164:	2200      	movge	r2, #0
 8015166:	18ab      	adds	r3, r5, r2
 8015168:	e7e1      	b.n	801512e <__sccl+0x32>
 801516a:	4610      	mov	r0, r2
 801516c:	e7da      	b.n	8015124 <__sccl+0x28>

0801516e <__submore>:
 801516e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015172:	460c      	mov	r4, r1
 8015174:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8015176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801517a:	4299      	cmp	r1, r3
 801517c:	d11d      	bne.n	80151ba <__submore+0x4c>
 801517e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015182:	f7fd fd8b 	bl	8012c9c <_malloc_r>
 8015186:	b918      	cbnz	r0, 8015190 <__submore+0x22>
 8015188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015194:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015196:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801519a:	6360      	str	r0, [r4, #52]	@ 0x34
 801519c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80151a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80151a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80151a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80151ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80151b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80151b4:	6020      	str	r0, [r4, #0]
 80151b6:	2000      	movs	r0, #0
 80151b8:	e7e8      	b.n	801518c <__submore+0x1e>
 80151ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80151bc:	0077      	lsls	r7, r6, #1
 80151be:	463a      	mov	r2, r7
 80151c0:	f000 fbf3 	bl	80159aa <_realloc_r>
 80151c4:	4605      	mov	r5, r0
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d0de      	beq.n	8015188 <__submore+0x1a>
 80151ca:	eb00 0806 	add.w	r8, r0, r6
 80151ce:	4601      	mov	r1, r0
 80151d0:	4632      	mov	r2, r6
 80151d2:	4640      	mov	r0, r8
 80151d4:	f7fc fef3 	bl	8011fbe <memcpy>
 80151d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80151dc:	f8c4 8000 	str.w	r8, [r4]
 80151e0:	e7e9      	b.n	80151b6 <__submore+0x48>

080151e2 <memmove>:
 80151e2:	4288      	cmp	r0, r1
 80151e4:	b510      	push	{r4, lr}
 80151e6:	eb01 0402 	add.w	r4, r1, r2
 80151ea:	d902      	bls.n	80151f2 <memmove+0x10>
 80151ec:	4284      	cmp	r4, r0
 80151ee:	4623      	mov	r3, r4
 80151f0:	d807      	bhi.n	8015202 <memmove+0x20>
 80151f2:	1e43      	subs	r3, r0, #1
 80151f4:	42a1      	cmp	r1, r4
 80151f6:	d008      	beq.n	801520a <memmove+0x28>
 80151f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015200:	e7f8      	b.n	80151f4 <memmove+0x12>
 8015202:	4402      	add	r2, r0
 8015204:	4601      	mov	r1, r0
 8015206:	428a      	cmp	r2, r1
 8015208:	d100      	bne.n	801520c <memmove+0x2a>
 801520a:	bd10      	pop	{r4, pc}
 801520c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015210:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015214:	e7f7      	b.n	8015206 <memmove+0x24>

08015216 <strncmp>:
 8015216:	b510      	push	{r4, lr}
 8015218:	b16a      	cbz	r2, 8015236 <strncmp+0x20>
 801521a:	3901      	subs	r1, #1
 801521c:	1884      	adds	r4, r0, r2
 801521e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015222:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015226:	429a      	cmp	r2, r3
 8015228:	d103      	bne.n	8015232 <strncmp+0x1c>
 801522a:	42a0      	cmp	r0, r4
 801522c:	d001      	beq.n	8015232 <strncmp+0x1c>
 801522e:	2a00      	cmp	r2, #0
 8015230:	d1f5      	bne.n	801521e <strncmp+0x8>
 8015232:	1ad0      	subs	r0, r2, r3
 8015234:	bd10      	pop	{r4, pc}
 8015236:	4610      	mov	r0, r2
 8015238:	e7fc      	b.n	8015234 <strncmp+0x1e>
	...

0801523c <_fstat_r>:
 801523c:	b538      	push	{r3, r4, r5, lr}
 801523e:	4d07      	ldr	r5, [pc, #28]	@ (801525c <_fstat_r+0x20>)
 8015240:	2300      	movs	r3, #0
 8015242:	4604      	mov	r4, r0
 8015244:	4608      	mov	r0, r1
 8015246:	4611      	mov	r1, r2
 8015248:	602b      	str	r3, [r5, #0]
 801524a:	f7ef fbff 	bl	8004a4c <_fstat>
 801524e:	1c43      	adds	r3, r0, #1
 8015250:	d102      	bne.n	8015258 <_fstat_r+0x1c>
 8015252:	682b      	ldr	r3, [r5, #0]
 8015254:	b103      	cbz	r3, 8015258 <_fstat_r+0x1c>
 8015256:	6023      	str	r3, [r4, #0]
 8015258:	bd38      	pop	{r3, r4, r5, pc}
 801525a:	bf00      	nop
 801525c:	24005248 	.word	0x24005248

08015260 <_isatty_r>:
 8015260:	b538      	push	{r3, r4, r5, lr}
 8015262:	4d06      	ldr	r5, [pc, #24]	@ (801527c <_isatty_r+0x1c>)
 8015264:	2300      	movs	r3, #0
 8015266:	4604      	mov	r4, r0
 8015268:	4608      	mov	r0, r1
 801526a:	602b      	str	r3, [r5, #0]
 801526c:	f7ef fbfe 	bl	8004a6c <_isatty>
 8015270:	1c43      	adds	r3, r0, #1
 8015272:	d102      	bne.n	801527a <_isatty_r+0x1a>
 8015274:	682b      	ldr	r3, [r5, #0]
 8015276:	b103      	cbz	r3, 801527a <_isatty_r+0x1a>
 8015278:	6023      	str	r3, [r4, #0]
 801527a:	bd38      	pop	{r3, r4, r5, pc}
 801527c:	24005248 	.word	0x24005248

08015280 <_sbrk_r>:
 8015280:	b538      	push	{r3, r4, r5, lr}
 8015282:	4d06      	ldr	r5, [pc, #24]	@ (801529c <_sbrk_r+0x1c>)
 8015284:	2300      	movs	r3, #0
 8015286:	4604      	mov	r4, r0
 8015288:	4608      	mov	r0, r1
 801528a:	602b      	str	r3, [r5, #0]
 801528c:	f7ef fc06 	bl	8004a9c <_sbrk>
 8015290:	1c43      	adds	r3, r0, #1
 8015292:	d102      	bne.n	801529a <_sbrk_r+0x1a>
 8015294:	682b      	ldr	r3, [r5, #0]
 8015296:	b103      	cbz	r3, 801529a <_sbrk_r+0x1a>
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	bd38      	pop	{r3, r4, r5, pc}
 801529c:	24005248 	.word	0x24005248

080152a0 <nan>:
 80152a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80152a8 <nan+0x8>
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	00000000 	.word	0x00000000
 80152ac:	7ff80000 	.word	0x7ff80000

080152b0 <__assert_func>:
 80152b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152b2:	4614      	mov	r4, r2
 80152b4:	461a      	mov	r2, r3
 80152b6:	4b09      	ldr	r3, [pc, #36]	@ (80152dc <__assert_func+0x2c>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4605      	mov	r5, r0
 80152bc:	68d8      	ldr	r0, [r3, #12]
 80152be:	b14c      	cbz	r4, 80152d4 <__assert_func+0x24>
 80152c0:	4b07      	ldr	r3, [pc, #28]	@ (80152e0 <__assert_func+0x30>)
 80152c2:	9100      	str	r1, [sp, #0]
 80152c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152c8:	4906      	ldr	r1, [pc, #24]	@ (80152e4 <__assert_func+0x34>)
 80152ca:	462b      	mov	r3, r5
 80152cc:	f000 fc1a 	bl	8015b04 <fiprintf>
 80152d0:	f000 fc2a 	bl	8015b28 <abort>
 80152d4:	4b04      	ldr	r3, [pc, #16]	@ (80152e8 <__assert_func+0x38>)
 80152d6:	461c      	mov	r4, r3
 80152d8:	e7f3      	b.n	80152c2 <__assert_func+0x12>
 80152da:	bf00      	nop
 80152dc:	2400002c 	.word	0x2400002c
 80152e0:	080172bf 	.word	0x080172bf
 80152e4:	080172cc 	.word	0x080172cc
 80152e8:	080172fa 	.word	0x080172fa

080152ec <_calloc_r>:
 80152ec:	b570      	push	{r4, r5, r6, lr}
 80152ee:	fba1 5402 	umull	r5, r4, r1, r2
 80152f2:	b934      	cbnz	r4, 8015302 <_calloc_r+0x16>
 80152f4:	4629      	mov	r1, r5
 80152f6:	f7fd fcd1 	bl	8012c9c <_malloc_r>
 80152fa:	4606      	mov	r6, r0
 80152fc:	b928      	cbnz	r0, 801530a <_calloc_r+0x1e>
 80152fe:	4630      	mov	r0, r6
 8015300:	bd70      	pop	{r4, r5, r6, pc}
 8015302:	220c      	movs	r2, #12
 8015304:	6002      	str	r2, [r0, #0]
 8015306:	2600      	movs	r6, #0
 8015308:	e7f9      	b.n	80152fe <_calloc_r+0x12>
 801530a:	462a      	mov	r2, r5
 801530c:	4621      	mov	r1, r4
 801530e:	f7fc fd79 	bl	8011e04 <memset>
 8015312:	e7f4      	b.n	80152fe <_calloc_r+0x12>

08015314 <rshift>:
 8015314:	6903      	ldr	r3, [r0, #16]
 8015316:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801531a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801531e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015322:	f100 0414 	add.w	r4, r0, #20
 8015326:	dd45      	ble.n	80153b4 <rshift+0xa0>
 8015328:	f011 011f 	ands.w	r1, r1, #31
 801532c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015330:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015334:	d10c      	bne.n	8015350 <rshift+0x3c>
 8015336:	f100 0710 	add.w	r7, r0, #16
 801533a:	4629      	mov	r1, r5
 801533c:	42b1      	cmp	r1, r6
 801533e:	d334      	bcc.n	80153aa <rshift+0x96>
 8015340:	1a9b      	subs	r3, r3, r2
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	1eea      	subs	r2, r5, #3
 8015346:	4296      	cmp	r6, r2
 8015348:	bf38      	it	cc
 801534a:	2300      	movcc	r3, #0
 801534c:	4423      	add	r3, r4
 801534e:	e015      	b.n	801537c <rshift+0x68>
 8015350:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015354:	f1c1 0820 	rsb	r8, r1, #32
 8015358:	40cf      	lsrs	r7, r1
 801535a:	f105 0e04 	add.w	lr, r5, #4
 801535e:	46a1      	mov	r9, r4
 8015360:	4576      	cmp	r6, lr
 8015362:	46f4      	mov	ip, lr
 8015364:	d815      	bhi.n	8015392 <rshift+0x7e>
 8015366:	1a9a      	subs	r2, r3, r2
 8015368:	0092      	lsls	r2, r2, #2
 801536a:	3a04      	subs	r2, #4
 801536c:	3501      	adds	r5, #1
 801536e:	42ae      	cmp	r6, r5
 8015370:	bf38      	it	cc
 8015372:	2200      	movcc	r2, #0
 8015374:	18a3      	adds	r3, r4, r2
 8015376:	50a7      	str	r7, [r4, r2]
 8015378:	b107      	cbz	r7, 801537c <rshift+0x68>
 801537a:	3304      	adds	r3, #4
 801537c:	1b1a      	subs	r2, r3, r4
 801537e:	42a3      	cmp	r3, r4
 8015380:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015384:	bf08      	it	eq
 8015386:	2300      	moveq	r3, #0
 8015388:	6102      	str	r2, [r0, #16]
 801538a:	bf08      	it	eq
 801538c:	6143      	streq	r3, [r0, #20]
 801538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015392:	f8dc c000 	ldr.w	ip, [ip]
 8015396:	fa0c fc08 	lsl.w	ip, ip, r8
 801539a:	ea4c 0707 	orr.w	r7, ip, r7
 801539e:	f849 7b04 	str.w	r7, [r9], #4
 80153a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80153a6:	40cf      	lsrs	r7, r1
 80153a8:	e7da      	b.n	8015360 <rshift+0x4c>
 80153aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80153ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80153b2:	e7c3      	b.n	801533c <rshift+0x28>
 80153b4:	4623      	mov	r3, r4
 80153b6:	e7e1      	b.n	801537c <rshift+0x68>

080153b8 <__hexdig_fun>:
 80153b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80153bc:	2b09      	cmp	r3, #9
 80153be:	d802      	bhi.n	80153c6 <__hexdig_fun+0xe>
 80153c0:	3820      	subs	r0, #32
 80153c2:	b2c0      	uxtb	r0, r0
 80153c4:	4770      	bx	lr
 80153c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80153ca:	2b05      	cmp	r3, #5
 80153cc:	d801      	bhi.n	80153d2 <__hexdig_fun+0x1a>
 80153ce:	3847      	subs	r0, #71	@ 0x47
 80153d0:	e7f7      	b.n	80153c2 <__hexdig_fun+0xa>
 80153d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80153d6:	2b05      	cmp	r3, #5
 80153d8:	d801      	bhi.n	80153de <__hexdig_fun+0x26>
 80153da:	3827      	subs	r0, #39	@ 0x27
 80153dc:	e7f1      	b.n	80153c2 <__hexdig_fun+0xa>
 80153de:	2000      	movs	r0, #0
 80153e0:	4770      	bx	lr
	...

080153e4 <__gethex>:
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	b085      	sub	sp, #20
 80153ea:	468a      	mov	sl, r1
 80153ec:	9302      	str	r3, [sp, #8]
 80153ee:	680b      	ldr	r3, [r1, #0]
 80153f0:	9001      	str	r0, [sp, #4]
 80153f2:	4690      	mov	r8, r2
 80153f4:	1c9c      	adds	r4, r3, #2
 80153f6:	46a1      	mov	r9, r4
 80153f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80153fc:	2830      	cmp	r0, #48	@ 0x30
 80153fe:	d0fa      	beq.n	80153f6 <__gethex+0x12>
 8015400:	eba9 0303 	sub.w	r3, r9, r3
 8015404:	f1a3 0b02 	sub.w	fp, r3, #2
 8015408:	f7ff ffd6 	bl	80153b8 <__hexdig_fun>
 801540c:	4605      	mov	r5, r0
 801540e:	2800      	cmp	r0, #0
 8015410:	d168      	bne.n	80154e4 <__gethex+0x100>
 8015412:	49a0      	ldr	r1, [pc, #640]	@ (8015694 <__gethex+0x2b0>)
 8015414:	2201      	movs	r2, #1
 8015416:	4648      	mov	r0, r9
 8015418:	f7ff fefd 	bl	8015216 <strncmp>
 801541c:	4607      	mov	r7, r0
 801541e:	2800      	cmp	r0, #0
 8015420:	d167      	bne.n	80154f2 <__gethex+0x10e>
 8015422:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015426:	4626      	mov	r6, r4
 8015428:	f7ff ffc6 	bl	80153b8 <__hexdig_fun>
 801542c:	2800      	cmp	r0, #0
 801542e:	d062      	beq.n	80154f6 <__gethex+0x112>
 8015430:	4623      	mov	r3, r4
 8015432:	7818      	ldrb	r0, [r3, #0]
 8015434:	2830      	cmp	r0, #48	@ 0x30
 8015436:	4699      	mov	r9, r3
 8015438:	f103 0301 	add.w	r3, r3, #1
 801543c:	d0f9      	beq.n	8015432 <__gethex+0x4e>
 801543e:	f7ff ffbb 	bl	80153b8 <__hexdig_fun>
 8015442:	fab0 f580 	clz	r5, r0
 8015446:	096d      	lsrs	r5, r5, #5
 8015448:	f04f 0b01 	mov.w	fp, #1
 801544c:	464a      	mov	r2, r9
 801544e:	4616      	mov	r6, r2
 8015450:	3201      	adds	r2, #1
 8015452:	7830      	ldrb	r0, [r6, #0]
 8015454:	f7ff ffb0 	bl	80153b8 <__hexdig_fun>
 8015458:	2800      	cmp	r0, #0
 801545a:	d1f8      	bne.n	801544e <__gethex+0x6a>
 801545c:	498d      	ldr	r1, [pc, #564]	@ (8015694 <__gethex+0x2b0>)
 801545e:	2201      	movs	r2, #1
 8015460:	4630      	mov	r0, r6
 8015462:	f7ff fed8 	bl	8015216 <strncmp>
 8015466:	2800      	cmp	r0, #0
 8015468:	d13f      	bne.n	80154ea <__gethex+0x106>
 801546a:	b944      	cbnz	r4, 801547e <__gethex+0x9a>
 801546c:	1c74      	adds	r4, r6, #1
 801546e:	4622      	mov	r2, r4
 8015470:	4616      	mov	r6, r2
 8015472:	3201      	adds	r2, #1
 8015474:	7830      	ldrb	r0, [r6, #0]
 8015476:	f7ff ff9f 	bl	80153b8 <__hexdig_fun>
 801547a:	2800      	cmp	r0, #0
 801547c:	d1f8      	bne.n	8015470 <__gethex+0x8c>
 801547e:	1ba4      	subs	r4, r4, r6
 8015480:	00a7      	lsls	r7, r4, #2
 8015482:	7833      	ldrb	r3, [r6, #0]
 8015484:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015488:	2b50      	cmp	r3, #80	@ 0x50
 801548a:	d13e      	bne.n	801550a <__gethex+0x126>
 801548c:	7873      	ldrb	r3, [r6, #1]
 801548e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015490:	d033      	beq.n	80154fa <__gethex+0x116>
 8015492:	2b2d      	cmp	r3, #45	@ 0x2d
 8015494:	d034      	beq.n	8015500 <__gethex+0x11c>
 8015496:	1c71      	adds	r1, r6, #1
 8015498:	2400      	movs	r4, #0
 801549a:	7808      	ldrb	r0, [r1, #0]
 801549c:	f7ff ff8c 	bl	80153b8 <__hexdig_fun>
 80154a0:	1e43      	subs	r3, r0, #1
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	2b18      	cmp	r3, #24
 80154a6:	d830      	bhi.n	801550a <__gethex+0x126>
 80154a8:	f1a0 0210 	sub.w	r2, r0, #16
 80154ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80154b0:	f7ff ff82 	bl	80153b8 <__hexdig_fun>
 80154b4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80154b8:	fa5f fc8c 	uxtb.w	ip, ip
 80154bc:	f1bc 0f18 	cmp.w	ip, #24
 80154c0:	f04f 030a 	mov.w	r3, #10
 80154c4:	d91e      	bls.n	8015504 <__gethex+0x120>
 80154c6:	b104      	cbz	r4, 80154ca <__gethex+0xe6>
 80154c8:	4252      	negs	r2, r2
 80154ca:	4417      	add	r7, r2
 80154cc:	f8ca 1000 	str.w	r1, [sl]
 80154d0:	b1ed      	cbz	r5, 801550e <__gethex+0x12a>
 80154d2:	f1bb 0f00 	cmp.w	fp, #0
 80154d6:	bf0c      	ite	eq
 80154d8:	2506      	moveq	r5, #6
 80154da:	2500      	movne	r5, #0
 80154dc:	4628      	mov	r0, r5
 80154de:	b005      	add	sp, #20
 80154e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e4:	2500      	movs	r5, #0
 80154e6:	462c      	mov	r4, r5
 80154e8:	e7b0      	b.n	801544c <__gethex+0x68>
 80154ea:	2c00      	cmp	r4, #0
 80154ec:	d1c7      	bne.n	801547e <__gethex+0x9a>
 80154ee:	4627      	mov	r7, r4
 80154f0:	e7c7      	b.n	8015482 <__gethex+0x9e>
 80154f2:	464e      	mov	r6, r9
 80154f4:	462f      	mov	r7, r5
 80154f6:	2501      	movs	r5, #1
 80154f8:	e7c3      	b.n	8015482 <__gethex+0x9e>
 80154fa:	2400      	movs	r4, #0
 80154fc:	1cb1      	adds	r1, r6, #2
 80154fe:	e7cc      	b.n	801549a <__gethex+0xb6>
 8015500:	2401      	movs	r4, #1
 8015502:	e7fb      	b.n	80154fc <__gethex+0x118>
 8015504:	fb03 0002 	mla	r0, r3, r2, r0
 8015508:	e7ce      	b.n	80154a8 <__gethex+0xc4>
 801550a:	4631      	mov	r1, r6
 801550c:	e7de      	b.n	80154cc <__gethex+0xe8>
 801550e:	eba6 0309 	sub.w	r3, r6, r9
 8015512:	3b01      	subs	r3, #1
 8015514:	4629      	mov	r1, r5
 8015516:	2b07      	cmp	r3, #7
 8015518:	dc0a      	bgt.n	8015530 <__gethex+0x14c>
 801551a:	9801      	ldr	r0, [sp, #4]
 801551c:	f7fd fc4a 	bl	8012db4 <_Balloc>
 8015520:	4604      	mov	r4, r0
 8015522:	b940      	cbnz	r0, 8015536 <__gethex+0x152>
 8015524:	4b5c      	ldr	r3, [pc, #368]	@ (8015698 <__gethex+0x2b4>)
 8015526:	4602      	mov	r2, r0
 8015528:	21e4      	movs	r1, #228	@ 0xe4
 801552a:	485c      	ldr	r0, [pc, #368]	@ (801569c <__gethex+0x2b8>)
 801552c:	f7ff fec0 	bl	80152b0 <__assert_func>
 8015530:	3101      	adds	r1, #1
 8015532:	105b      	asrs	r3, r3, #1
 8015534:	e7ef      	b.n	8015516 <__gethex+0x132>
 8015536:	f100 0a14 	add.w	sl, r0, #20
 801553a:	2300      	movs	r3, #0
 801553c:	4655      	mov	r5, sl
 801553e:	469b      	mov	fp, r3
 8015540:	45b1      	cmp	r9, r6
 8015542:	d337      	bcc.n	80155b4 <__gethex+0x1d0>
 8015544:	f845 bb04 	str.w	fp, [r5], #4
 8015548:	eba5 050a 	sub.w	r5, r5, sl
 801554c:	10ad      	asrs	r5, r5, #2
 801554e:	6125      	str	r5, [r4, #16]
 8015550:	4658      	mov	r0, fp
 8015552:	f7fd fd21 	bl	8012f98 <__hi0bits>
 8015556:	016d      	lsls	r5, r5, #5
 8015558:	f8d8 6000 	ldr.w	r6, [r8]
 801555c:	1a2d      	subs	r5, r5, r0
 801555e:	42b5      	cmp	r5, r6
 8015560:	dd54      	ble.n	801560c <__gethex+0x228>
 8015562:	1bad      	subs	r5, r5, r6
 8015564:	4629      	mov	r1, r5
 8015566:	4620      	mov	r0, r4
 8015568:	f7fe f8aa 	bl	80136c0 <__any_on>
 801556c:	4681      	mov	r9, r0
 801556e:	b178      	cbz	r0, 8015590 <__gethex+0x1ac>
 8015570:	1e6b      	subs	r3, r5, #1
 8015572:	1159      	asrs	r1, r3, #5
 8015574:	f003 021f 	and.w	r2, r3, #31
 8015578:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801557c:	f04f 0901 	mov.w	r9, #1
 8015580:	fa09 f202 	lsl.w	r2, r9, r2
 8015584:	420a      	tst	r2, r1
 8015586:	d003      	beq.n	8015590 <__gethex+0x1ac>
 8015588:	454b      	cmp	r3, r9
 801558a:	dc36      	bgt.n	80155fa <__gethex+0x216>
 801558c:	f04f 0902 	mov.w	r9, #2
 8015590:	4629      	mov	r1, r5
 8015592:	4620      	mov	r0, r4
 8015594:	f7ff febe 	bl	8015314 <rshift>
 8015598:	442f      	add	r7, r5
 801559a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801559e:	42bb      	cmp	r3, r7
 80155a0:	da42      	bge.n	8015628 <__gethex+0x244>
 80155a2:	9801      	ldr	r0, [sp, #4]
 80155a4:	4621      	mov	r1, r4
 80155a6:	f7fd fc45 	bl	8012e34 <_Bfree>
 80155aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80155ac:	2300      	movs	r3, #0
 80155ae:	6013      	str	r3, [r2, #0]
 80155b0:	25a3      	movs	r5, #163	@ 0xa3
 80155b2:	e793      	b.n	80154dc <__gethex+0xf8>
 80155b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80155b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80155ba:	d012      	beq.n	80155e2 <__gethex+0x1fe>
 80155bc:	2b20      	cmp	r3, #32
 80155be:	d104      	bne.n	80155ca <__gethex+0x1e6>
 80155c0:	f845 bb04 	str.w	fp, [r5], #4
 80155c4:	f04f 0b00 	mov.w	fp, #0
 80155c8:	465b      	mov	r3, fp
 80155ca:	7830      	ldrb	r0, [r6, #0]
 80155cc:	9303      	str	r3, [sp, #12]
 80155ce:	f7ff fef3 	bl	80153b8 <__hexdig_fun>
 80155d2:	9b03      	ldr	r3, [sp, #12]
 80155d4:	f000 000f 	and.w	r0, r0, #15
 80155d8:	4098      	lsls	r0, r3
 80155da:	ea4b 0b00 	orr.w	fp, fp, r0
 80155de:	3304      	adds	r3, #4
 80155e0:	e7ae      	b.n	8015540 <__gethex+0x15c>
 80155e2:	45b1      	cmp	r9, r6
 80155e4:	d8ea      	bhi.n	80155bc <__gethex+0x1d8>
 80155e6:	492b      	ldr	r1, [pc, #172]	@ (8015694 <__gethex+0x2b0>)
 80155e8:	9303      	str	r3, [sp, #12]
 80155ea:	2201      	movs	r2, #1
 80155ec:	4630      	mov	r0, r6
 80155ee:	f7ff fe12 	bl	8015216 <strncmp>
 80155f2:	9b03      	ldr	r3, [sp, #12]
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d1e1      	bne.n	80155bc <__gethex+0x1d8>
 80155f8:	e7a2      	b.n	8015540 <__gethex+0x15c>
 80155fa:	1ea9      	subs	r1, r5, #2
 80155fc:	4620      	mov	r0, r4
 80155fe:	f7fe f85f 	bl	80136c0 <__any_on>
 8015602:	2800      	cmp	r0, #0
 8015604:	d0c2      	beq.n	801558c <__gethex+0x1a8>
 8015606:	f04f 0903 	mov.w	r9, #3
 801560a:	e7c1      	b.n	8015590 <__gethex+0x1ac>
 801560c:	da09      	bge.n	8015622 <__gethex+0x23e>
 801560e:	1b75      	subs	r5, r6, r5
 8015610:	4621      	mov	r1, r4
 8015612:	9801      	ldr	r0, [sp, #4]
 8015614:	462a      	mov	r2, r5
 8015616:	f7fd fe1d 	bl	8013254 <__lshift>
 801561a:	1b7f      	subs	r7, r7, r5
 801561c:	4604      	mov	r4, r0
 801561e:	f100 0a14 	add.w	sl, r0, #20
 8015622:	f04f 0900 	mov.w	r9, #0
 8015626:	e7b8      	b.n	801559a <__gethex+0x1b6>
 8015628:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801562c:	42bd      	cmp	r5, r7
 801562e:	dd6f      	ble.n	8015710 <__gethex+0x32c>
 8015630:	1bed      	subs	r5, r5, r7
 8015632:	42ae      	cmp	r6, r5
 8015634:	dc34      	bgt.n	80156a0 <__gethex+0x2bc>
 8015636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801563a:	2b02      	cmp	r3, #2
 801563c:	d022      	beq.n	8015684 <__gethex+0x2a0>
 801563e:	2b03      	cmp	r3, #3
 8015640:	d024      	beq.n	801568c <__gethex+0x2a8>
 8015642:	2b01      	cmp	r3, #1
 8015644:	d115      	bne.n	8015672 <__gethex+0x28e>
 8015646:	42ae      	cmp	r6, r5
 8015648:	d113      	bne.n	8015672 <__gethex+0x28e>
 801564a:	2e01      	cmp	r6, #1
 801564c:	d10b      	bne.n	8015666 <__gethex+0x282>
 801564e:	9a02      	ldr	r2, [sp, #8]
 8015650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015654:	6013      	str	r3, [r2, #0]
 8015656:	2301      	movs	r3, #1
 8015658:	6123      	str	r3, [r4, #16]
 801565a:	f8ca 3000 	str.w	r3, [sl]
 801565e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015660:	2562      	movs	r5, #98	@ 0x62
 8015662:	601c      	str	r4, [r3, #0]
 8015664:	e73a      	b.n	80154dc <__gethex+0xf8>
 8015666:	1e71      	subs	r1, r6, #1
 8015668:	4620      	mov	r0, r4
 801566a:	f7fe f829 	bl	80136c0 <__any_on>
 801566e:	2800      	cmp	r0, #0
 8015670:	d1ed      	bne.n	801564e <__gethex+0x26a>
 8015672:	9801      	ldr	r0, [sp, #4]
 8015674:	4621      	mov	r1, r4
 8015676:	f7fd fbdd 	bl	8012e34 <_Bfree>
 801567a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801567c:	2300      	movs	r3, #0
 801567e:	6013      	str	r3, [r2, #0]
 8015680:	2550      	movs	r5, #80	@ 0x50
 8015682:	e72b      	b.n	80154dc <__gethex+0xf8>
 8015684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015686:	2b00      	cmp	r3, #0
 8015688:	d1f3      	bne.n	8015672 <__gethex+0x28e>
 801568a:	e7e0      	b.n	801564e <__gethex+0x26a>
 801568c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1dd      	bne.n	801564e <__gethex+0x26a>
 8015692:	e7ee      	b.n	8015672 <__gethex+0x28e>
 8015694:	08017289 	.word	0x08017289
 8015698:	0801721f 	.word	0x0801721f
 801569c:	080172fb 	.word	0x080172fb
 80156a0:	1e6f      	subs	r7, r5, #1
 80156a2:	f1b9 0f00 	cmp.w	r9, #0
 80156a6:	d130      	bne.n	801570a <__gethex+0x326>
 80156a8:	b127      	cbz	r7, 80156b4 <__gethex+0x2d0>
 80156aa:	4639      	mov	r1, r7
 80156ac:	4620      	mov	r0, r4
 80156ae:	f7fe f807 	bl	80136c0 <__any_on>
 80156b2:	4681      	mov	r9, r0
 80156b4:	117a      	asrs	r2, r7, #5
 80156b6:	2301      	movs	r3, #1
 80156b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80156bc:	f007 071f 	and.w	r7, r7, #31
 80156c0:	40bb      	lsls	r3, r7
 80156c2:	4213      	tst	r3, r2
 80156c4:	4629      	mov	r1, r5
 80156c6:	4620      	mov	r0, r4
 80156c8:	bf18      	it	ne
 80156ca:	f049 0902 	orrne.w	r9, r9, #2
 80156ce:	f7ff fe21 	bl	8015314 <rshift>
 80156d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80156d6:	1b76      	subs	r6, r6, r5
 80156d8:	2502      	movs	r5, #2
 80156da:	f1b9 0f00 	cmp.w	r9, #0
 80156de:	d047      	beq.n	8015770 <__gethex+0x38c>
 80156e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156e4:	2b02      	cmp	r3, #2
 80156e6:	d015      	beq.n	8015714 <__gethex+0x330>
 80156e8:	2b03      	cmp	r3, #3
 80156ea:	d017      	beq.n	801571c <__gethex+0x338>
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d109      	bne.n	8015704 <__gethex+0x320>
 80156f0:	f019 0f02 	tst.w	r9, #2
 80156f4:	d006      	beq.n	8015704 <__gethex+0x320>
 80156f6:	f8da 3000 	ldr.w	r3, [sl]
 80156fa:	ea49 0903 	orr.w	r9, r9, r3
 80156fe:	f019 0f01 	tst.w	r9, #1
 8015702:	d10e      	bne.n	8015722 <__gethex+0x33e>
 8015704:	f045 0510 	orr.w	r5, r5, #16
 8015708:	e032      	b.n	8015770 <__gethex+0x38c>
 801570a:	f04f 0901 	mov.w	r9, #1
 801570e:	e7d1      	b.n	80156b4 <__gethex+0x2d0>
 8015710:	2501      	movs	r5, #1
 8015712:	e7e2      	b.n	80156da <__gethex+0x2f6>
 8015714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015716:	f1c3 0301 	rsb	r3, r3, #1
 801571a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801571c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801571e:	2b00      	cmp	r3, #0
 8015720:	d0f0      	beq.n	8015704 <__gethex+0x320>
 8015722:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015726:	f104 0314 	add.w	r3, r4, #20
 801572a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801572e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015732:	f04f 0c00 	mov.w	ip, #0
 8015736:	4618      	mov	r0, r3
 8015738:	f853 2b04 	ldr.w	r2, [r3], #4
 801573c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015740:	d01b      	beq.n	801577a <__gethex+0x396>
 8015742:	3201      	adds	r2, #1
 8015744:	6002      	str	r2, [r0, #0]
 8015746:	2d02      	cmp	r5, #2
 8015748:	f104 0314 	add.w	r3, r4, #20
 801574c:	d13c      	bne.n	80157c8 <__gethex+0x3e4>
 801574e:	f8d8 2000 	ldr.w	r2, [r8]
 8015752:	3a01      	subs	r2, #1
 8015754:	42b2      	cmp	r2, r6
 8015756:	d109      	bne.n	801576c <__gethex+0x388>
 8015758:	1171      	asrs	r1, r6, #5
 801575a:	2201      	movs	r2, #1
 801575c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015760:	f006 061f 	and.w	r6, r6, #31
 8015764:	fa02 f606 	lsl.w	r6, r2, r6
 8015768:	421e      	tst	r6, r3
 801576a:	d13a      	bne.n	80157e2 <__gethex+0x3fe>
 801576c:	f045 0520 	orr.w	r5, r5, #32
 8015770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015772:	601c      	str	r4, [r3, #0]
 8015774:	9b02      	ldr	r3, [sp, #8]
 8015776:	601f      	str	r7, [r3, #0]
 8015778:	e6b0      	b.n	80154dc <__gethex+0xf8>
 801577a:	4299      	cmp	r1, r3
 801577c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015780:	d8d9      	bhi.n	8015736 <__gethex+0x352>
 8015782:	68a3      	ldr	r3, [r4, #8]
 8015784:	459b      	cmp	fp, r3
 8015786:	db17      	blt.n	80157b8 <__gethex+0x3d4>
 8015788:	6861      	ldr	r1, [r4, #4]
 801578a:	9801      	ldr	r0, [sp, #4]
 801578c:	3101      	adds	r1, #1
 801578e:	f7fd fb11 	bl	8012db4 <_Balloc>
 8015792:	4681      	mov	r9, r0
 8015794:	b918      	cbnz	r0, 801579e <__gethex+0x3ba>
 8015796:	4b1a      	ldr	r3, [pc, #104]	@ (8015800 <__gethex+0x41c>)
 8015798:	4602      	mov	r2, r0
 801579a:	2184      	movs	r1, #132	@ 0x84
 801579c:	e6c5      	b.n	801552a <__gethex+0x146>
 801579e:	6922      	ldr	r2, [r4, #16]
 80157a0:	3202      	adds	r2, #2
 80157a2:	f104 010c 	add.w	r1, r4, #12
 80157a6:	0092      	lsls	r2, r2, #2
 80157a8:	300c      	adds	r0, #12
 80157aa:	f7fc fc08 	bl	8011fbe <memcpy>
 80157ae:	4621      	mov	r1, r4
 80157b0:	9801      	ldr	r0, [sp, #4]
 80157b2:	f7fd fb3f 	bl	8012e34 <_Bfree>
 80157b6:	464c      	mov	r4, r9
 80157b8:	6923      	ldr	r3, [r4, #16]
 80157ba:	1c5a      	adds	r2, r3, #1
 80157bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80157c0:	6122      	str	r2, [r4, #16]
 80157c2:	2201      	movs	r2, #1
 80157c4:	615a      	str	r2, [r3, #20]
 80157c6:	e7be      	b.n	8015746 <__gethex+0x362>
 80157c8:	6922      	ldr	r2, [r4, #16]
 80157ca:	455a      	cmp	r2, fp
 80157cc:	dd0b      	ble.n	80157e6 <__gethex+0x402>
 80157ce:	2101      	movs	r1, #1
 80157d0:	4620      	mov	r0, r4
 80157d2:	f7ff fd9f 	bl	8015314 <rshift>
 80157d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80157da:	3701      	adds	r7, #1
 80157dc:	42bb      	cmp	r3, r7
 80157de:	f6ff aee0 	blt.w	80155a2 <__gethex+0x1be>
 80157e2:	2501      	movs	r5, #1
 80157e4:	e7c2      	b.n	801576c <__gethex+0x388>
 80157e6:	f016 061f 	ands.w	r6, r6, #31
 80157ea:	d0fa      	beq.n	80157e2 <__gethex+0x3fe>
 80157ec:	4453      	add	r3, sl
 80157ee:	f1c6 0620 	rsb	r6, r6, #32
 80157f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80157f6:	f7fd fbcf 	bl	8012f98 <__hi0bits>
 80157fa:	42b0      	cmp	r0, r6
 80157fc:	dbe7      	blt.n	80157ce <__gethex+0x3ea>
 80157fe:	e7f0      	b.n	80157e2 <__gethex+0x3fe>
 8015800:	0801721f 	.word	0x0801721f

08015804 <L_shift>:
 8015804:	f1c2 0208 	rsb	r2, r2, #8
 8015808:	0092      	lsls	r2, r2, #2
 801580a:	b570      	push	{r4, r5, r6, lr}
 801580c:	f1c2 0620 	rsb	r6, r2, #32
 8015810:	6843      	ldr	r3, [r0, #4]
 8015812:	6804      	ldr	r4, [r0, #0]
 8015814:	fa03 f506 	lsl.w	r5, r3, r6
 8015818:	432c      	orrs	r4, r5
 801581a:	40d3      	lsrs	r3, r2
 801581c:	6004      	str	r4, [r0, #0]
 801581e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015822:	4288      	cmp	r0, r1
 8015824:	d3f4      	bcc.n	8015810 <L_shift+0xc>
 8015826:	bd70      	pop	{r4, r5, r6, pc}

08015828 <__match>:
 8015828:	b530      	push	{r4, r5, lr}
 801582a:	6803      	ldr	r3, [r0, #0]
 801582c:	3301      	adds	r3, #1
 801582e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015832:	b914      	cbnz	r4, 801583a <__match+0x12>
 8015834:	6003      	str	r3, [r0, #0]
 8015836:	2001      	movs	r0, #1
 8015838:	bd30      	pop	{r4, r5, pc}
 801583a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801583e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015842:	2d19      	cmp	r5, #25
 8015844:	bf98      	it	ls
 8015846:	3220      	addls	r2, #32
 8015848:	42a2      	cmp	r2, r4
 801584a:	d0f0      	beq.n	801582e <__match+0x6>
 801584c:	2000      	movs	r0, #0
 801584e:	e7f3      	b.n	8015838 <__match+0x10>

08015850 <__hexnan>:
 8015850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015854:	680b      	ldr	r3, [r1, #0]
 8015856:	6801      	ldr	r1, [r0, #0]
 8015858:	115e      	asrs	r6, r3, #5
 801585a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801585e:	f013 031f 	ands.w	r3, r3, #31
 8015862:	b087      	sub	sp, #28
 8015864:	bf18      	it	ne
 8015866:	3604      	addne	r6, #4
 8015868:	2500      	movs	r5, #0
 801586a:	1f37      	subs	r7, r6, #4
 801586c:	4682      	mov	sl, r0
 801586e:	4690      	mov	r8, r2
 8015870:	9301      	str	r3, [sp, #4]
 8015872:	f846 5c04 	str.w	r5, [r6, #-4]
 8015876:	46b9      	mov	r9, r7
 8015878:	463c      	mov	r4, r7
 801587a:	9502      	str	r5, [sp, #8]
 801587c:	46ab      	mov	fp, r5
 801587e:	784a      	ldrb	r2, [r1, #1]
 8015880:	1c4b      	adds	r3, r1, #1
 8015882:	9303      	str	r3, [sp, #12]
 8015884:	b342      	cbz	r2, 80158d8 <__hexnan+0x88>
 8015886:	4610      	mov	r0, r2
 8015888:	9105      	str	r1, [sp, #20]
 801588a:	9204      	str	r2, [sp, #16]
 801588c:	f7ff fd94 	bl	80153b8 <__hexdig_fun>
 8015890:	2800      	cmp	r0, #0
 8015892:	d151      	bne.n	8015938 <__hexnan+0xe8>
 8015894:	9a04      	ldr	r2, [sp, #16]
 8015896:	9905      	ldr	r1, [sp, #20]
 8015898:	2a20      	cmp	r2, #32
 801589a:	d818      	bhi.n	80158ce <__hexnan+0x7e>
 801589c:	9b02      	ldr	r3, [sp, #8]
 801589e:	459b      	cmp	fp, r3
 80158a0:	dd13      	ble.n	80158ca <__hexnan+0x7a>
 80158a2:	454c      	cmp	r4, r9
 80158a4:	d206      	bcs.n	80158b4 <__hexnan+0x64>
 80158a6:	2d07      	cmp	r5, #7
 80158a8:	dc04      	bgt.n	80158b4 <__hexnan+0x64>
 80158aa:	462a      	mov	r2, r5
 80158ac:	4649      	mov	r1, r9
 80158ae:	4620      	mov	r0, r4
 80158b0:	f7ff ffa8 	bl	8015804 <L_shift>
 80158b4:	4544      	cmp	r4, r8
 80158b6:	d952      	bls.n	801595e <__hexnan+0x10e>
 80158b8:	2300      	movs	r3, #0
 80158ba:	f1a4 0904 	sub.w	r9, r4, #4
 80158be:	f844 3c04 	str.w	r3, [r4, #-4]
 80158c2:	f8cd b008 	str.w	fp, [sp, #8]
 80158c6:	464c      	mov	r4, r9
 80158c8:	461d      	mov	r5, r3
 80158ca:	9903      	ldr	r1, [sp, #12]
 80158cc:	e7d7      	b.n	801587e <__hexnan+0x2e>
 80158ce:	2a29      	cmp	r2, #41	@ 0x29
 80158d0:	d157      	bne.n	8015982 <__hexnan+0x132>
 80158d2:	3102      	adds	r1, #2
 80158d4:	f8ca 1000 	str.w	r1, [sl]
 80158d8:	f1bb 0f00 	cmp.w	fp, #0
 80158dc:	d051      	beq.n	8015982 <__hexnan+0x132>
 80158de:	454c      	cmp	r4, r9
 80158e0:	d206      	bcs.n	80158f0 <__hexnan+0xa0>
 80158e2:	2d07      	cmp	r5, #7
 80158e4:	dc04      	bgt.n	80158f0 <__hexnan+0xa0>
 80158e6:	462a      	mov	r2, r5
 80158e8:	4649      	mov	r1, r9
 80158ea:	4620      	mov	r0, r4
 80158ec:	f7ff ff8a 	bl	8015804 <L_shift>
 80158f0:	4544      	cmp	r4, r8
 80158f2:	d936      	bls.n	8015962 <__hexnan+0x112>
 80158f4:	f1a8 0204 	sub.w	r2, r8, #4
 80158f8:	4623      	mov	r3, r4
 80158fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80158fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8015902:	429f      	cmp	r7, r3
 8015904:	d2f9      	bcs.n	80158fa <__hexnan+0xaa>
 8015906:	1b3b      	subs	r3, r7, r4
 8015908:	f023 0303 	bic.w	r3, r3, #3
 801590c:	3304      	adds	r3, #4
 801590e:	3401      	adds	r4, #1
 8015910:	3e03      	subs	r6, #3
 8015912:	42b4      	cmp	r4, r6
 8015914:	bf88      	it	hi
 8015916:	2304      	movhi	r3, #4
 8015918:	4443      	add	r3, r8
 801591a:	2200      	movs	r2, #0
 801591c:	f843 2b04 	str.w	r2, [r3], #4
 8015920:	429f      	cmp	r7, r3
 8015922:	d2fb      	bcs.n	801591c <__hexnan+0xcc>
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	b91b      	cbnz	r3, 8015930 <__hexnan+0xe0>
 8015928:	4547      	cmp	r7, r8
 801592a:	d128      	bne.n	801597e <__hexnan+0x12e>
 801592c:	2301      	movs	r3, #1
 801592e:	603b      	str	r3, [r7, #0]
 8015930:	2005      	movs	r0, #5
 8015932:	b007      	add	sp, #28
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015938:	3501      	adds	r5, #1
 801593a:	2d08      	cmp	r5, #8
 801593c:	f10b 0b01 	add.w	fp, fp, #1
 8015940:	dd06      	ble.n	8015950 <__hexnan+0x100>
 8015942:	4544      	cmp	r4, r8
 8015944:	d9c1      	bls.n	80158ca <__hexnan+0x7a>
 8015946:	2300      	movs	r3, #0
 8015948:	f844 3c04 	str.w	r3, [r4, #-4]
 801594c:	2501      	movs	r5, #1
 801594e:	3c04      	subs	r4, #4
 8015950:	6822      	ldr	r2, [r4, #0]
 8015952:	f000 000f 	and.w	r0, r0, #15
 8015956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801595a:	6020      	str	r0, [r4, #0]
 801595c:	e7b5      	b.n	80158ca <__hexnan+0x7a>
 801595e:	2508      	movs	r5, #8
 8015960:	e7b3      	b.n	80158ca <__hexnan+0x7a>
 8015962:	9b01      	ldr	r3, [sp, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d0dd      	beq.n	8015924 <__hexnan+0xd4>
 8015968:	f1c3 0320 	rsb	r3, r3, #32
 801596c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015970:	40da      	lsrs	r2, r3
 8015972:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015976:	4013      	ands	r3, r2
 8015978:	f846 3c04 	str.w	r3, [r6, #-4]
 801597c:	e7d2      	b.n	8015924 <__hexnan+0xd4>
 801597e:	3f04      	subs	r7, #4
 8015980:	e7d0      	b.n	8015924 <__hexnan+0xd4>
 8015982:	2004      	movs	r0, #4
 8015984:	e7d5      	b.n	8015932 <__hexnan+0xe2>

08015986 <__ascii_mbtowc>:
 8015986:	b082      	sub	sp, #8
 8015988:	b901      	cbnz	r1, 801598c <__ascii_mbtowc+0x6>
 801598a:	a901      	add	r1, sp, #4
 801598c:	b142      	cbz	r2, 80159a0 <__ascii_mbtowc+0x1a>
 801598e:	b14b      	cbz	r3, 80159a4 <__ascii_mbtowc+0x1e>
 8015990:	7813      	ldrb	r3, [r2, #0]
 8015992:	600b      	str	r3, [r1, #0]
 8015994:	7812      	ldrb	r2, [r2, #0]
 8015996:	1e10      	subs	r0, r2, #0
 8015998:	bf18      	it	ne
 801599a:	2001      	movne	r0, #1
 801599c:	b002      	add	sp, #8
 801599e:	4770      	bx	lr
 80159a0:	4610      	mov	r0, r2
 80159a2:	e7fb      	b.n	801599c <__ascii_mbtowc+0x16>
 80159a4:	f06f 0001 	mvn.w	r0, #1
 80159a8:	e7f8      	b.n	801599c <__ascii_mbtowc+0x16>

080159aa <_realloc_r>:
 80159aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ae:	4607      	mov	r7, r0
 80159b0:	4614      	mov	r4, r2
 80159b2:	460d      	mov	r5, r1
 80159b4:	b921      	cbnz	r1, 80159c0 <_realloc_r+0x16>
 80159b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159ba:	4611      	mov	r1, r2
 80159bc:	f7fd b96e 	b.w	8012c9c <_malloc_r>
 80159c0:	b92a      	cbnz	r2, 80159ce <_realloc_r+0x24>
 80159c2:	f7fd f8f7 	bl	8012bb4 <_free_r>
 80159c6:	4625      	mov	r5, r4
 80159c8:	4628      	mov	r0, r5
 80159ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ce:	f000 f8b2 	bl	8015b36 <_malloc_usable_size_r>
 80159d2:	4284      	cmp	r4, r0
 80159d4:	4606      	mov	r6, r0
 80159d6:	d802      	bhi.n	80159de <_realloc_r+0x34>
 80159d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80159dc:	d8f4      	bhi.n	80159c8 <_realloc_r+0x1e>
 80159de:	4621      	mov	r1, r4
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7fd f95b 	bl	8012c9c <_malloc_r>
 80159e6:	4680      	mov	r8, r0
 80159e8:	b908      	cbnz	r0, 80159ee <_realloc_r+0x44>
 80159ea:	4645      	mov	r5, r8
 80159ec:	e7ec      	b.n	80159c8 <_realloc_r+0x1e>
 80159ee:	42b4      	cmp	r4, r6
 80159f0:	4622      	mov	r2, r4
 80159f2:	4629      	mov	r1, r5
 80159f4:	bf28      	it	cs
 80159f6:	4632      	movcs	r2, r6
 80159f8:	f7fc fae1 	bl	8011fbe <memcpy>
 80159fc:	4629      	mov	r1, r5
 80159fe:	4638      	mov	r0, r7
 8015a00:	f7fd f8d8 	bl	8012bb4 <_free_r>
 8015a04:	e7f1      	b.n	80159ea <_realloc_r+0x40>
	...

08015a08 <_strtoul_l.isra.0>:
 8015a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a0c:	4e34      	ldr	r6, [pc, #208]	@ (8015ae0 <_strtoul_l.isra.0+0xd8>)
 8015a0e:	4686      	mov	lr, r0
 8015a10:	460d      	mov	r5, r1
 8015a12:	4628      	mov	r0, r5
 8015a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a18:	5d37      	ldrb	r7, [r6, r4]
 8015a1a:	f017 0708 	ands.w	r7, r7, #8
 8015a1e:	d1f8      	bne.n	8015a12 <_strtoul_l.isra.0+0xa>
 8015a20:	2c2d      	cmp	r4, #45	@ 0x2d
 8015a22:	d110      	bne.n	8015a46 <_strtoul_l.isra.0+0x3e>
 8015a24:	782c      	ldrb	r4, [r5, #0]
 8015a26:	2701      	movs	r7, #1
 8015a28:	1c85      	adds	r5, r0, #2
 8015a2a:	f033 0010 	bics.w	r0, r3, #16
 8015a2e:	d115      	bne.n	8015a5c <_strtoul_l.isra.0+0x54>
 8015a30:	2c30      	cmp	r4, #48	@ 0x30
 8015a32:	d10d      	bne.n	8015a50 <_strtoul_l.isra.0+0x48>
 8015a34:	7828      	ldrb	r0, [r5, #0]
 8015a36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015a3a:	2858      	cmp	r0, #88	@ 0x58
 8015a3c:	d108      	bne.n	8015a50 <_strtoul_l.isra.0+0x48>
 8015a3e:	786c      	ldrb	r4, [r5, #1]
 8015a40:	3502      	adds	r5, #2
 8015a42:	2310      	movs	r3, #16
 8015a44:	e00a      	b.n	8015a5c <_strtoul_l.isra.0+0x54>
 8015a46:	2c2b      	cmp	r4, #43	@ 0x2b
 8015a48:	bf04      	itt	eq
 8015a4a:	782c      	ldrbeq	r4, [r5, #0]
 8015a4c:	1c85      	addeq	r5, r0, #2
 8015a4e:	e7ec      	b.n	8015a2a <_strtoul_l.isra.0+0x22>
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d1f6      	bne.n	8015a42 <_strtoul_l.isra.0+0x3a>
 8015a54:	2c30      	cmp	r4, #48	@ 0x30
 8015a56:	bf14      	ite	ne
 8015a58:	230a      	movne	r3, #10
 8015a5a:	2308      	moveq	r3, #8
 8015a5c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015a60:	2600      	movs	r6, #0
 8015a62:	fbb8 f8f3 	udiv	r8, r8, r3
 8015a66:	fb03 f908 	mul.w	r9, r3, r8
 8015a6a:	ea6f 0909 	mvn.w	r9, r9
 8015a6e:	4630      	mov	r0, r6
 8015a70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015a74:	f1bc 0f09 	cmp.w	ip, #9
 8015a78:	d810      	bhi.n	8015a9c <_strtoul_l.isra.0+0x94>
 8015a7a:	4664      	mov	r4, ip
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	dd1e      	ble.n	8015abe <_strtoul_l.isra.0+0xb6>
 8015a80:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015a84:	d007      	beq.n	8015a96 <_strtoul_l.isra.0+0x8e>
 8015a86:	4580      	cmp	r8, r0
 8015a88:	d316      	bcc.n	8015ab8 <_strtoul_l.isra.0+0xb0>
 8015a8a:	d101      	bne.n	8015a90 <_strtoul_l.isra.0+0x88>
 8015a8c:	45a1      	cmp	r9, r4
 8015a8e:	db13      	blt.n	8015ab8 <_strtoul_l.isra.0+0xb0>
 8015a90:	fb00 4003 	mla	r0, r0, r3, r4
 8015a94:	2601      	movs	r6, #1
 8015a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a9a:	e7e9      	b.n	8015a70 <_strtoul_l.isra.0+0x68>
 8015a9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015aa0:	f1bc 0f19 	cmp.w	ip, #25
 8015aa4:	d801      	bhi.n	8015aaa <_strtoul_l.isra.0+0xa2>
 8015aa6:	3c37      	subs	r4, #55	@ 0x37
 8015aa8:	e7e8      	b.n	8015a7c <_strtoul_l.isra.0+0x74>
 8015aaa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015aae:	f1bc 0f19 	cmp.w	ip, #25
 8015ab2:	d804      	bhi.n	8015abe <_strtoul_l.isra.0+0xb6>
 8015ab4:	3c57      	subs	r4, #87	@ 0x57
 8015ab6:	e7e1      	b.n	8015a7c <_strtoul_l.isra.0+0x74>
 8015ab8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015abc:	e7eb      	b.n	8015a96 <_strtoul_l.isra.0+0x8e>
 8015abe:	1c73      	adds	r3, r6, #1
 8015ac0:	d106      	bne.n	8015ad0 <_strtoul_l.isra.0+0xc8>
 8015ac2:	2322      	movs	r3, #34	@ 0x22
 8015ac4:	f8ce 3000 	str.w	r3, [lr]
 8015ac8:	4630      	mov	r0, r6
 8015aca:	b932      	cbnz	r2, 8015ada <_strtoul_l.isra.0+0xd2>
 8015acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ad0:	b107      	cbz	r7, 8015ad4 <_strtoul_l.isra.0+0xcc>
 8015ad2:	4240      	negs	r0, r0
 8015ad4:	2a00      	cmp	r2, #0
 8015ad6:	d0f9      	beq.n	8015acc <_strtoul_l.isra.0+0xc4>
 8015ad8:	b106      	cbz	r6, 8015adc <_strtoul_l.isra.0+0xd4>
 8015ada:	1e69      	subs	r1, r5, #1
 8015adc:	6011      	str	r1, [r2, #0]
 8015ade:	e7f5      	b.n	8015acc <_strtoul_l.isra.0+0xc4>
 8015ae0:	080174a9 	.word	0x080174a9

08015ae4 <_strtoul_r>:
 8015ae4:	f7ff bf90 	b.w	8015a08 <_strtoul_l.isra.0>

08015ae8 <__ascii_wctomb>:
 8015ae8:	4603      	mov	r3, r0
 8015aea:	4608      	mov	r0, r1
 8015aec:	b141      	cbz	r1, 8015b00 <__ascii_wctomb+0x18>
 8015aee:	2aff      	cmp	r2, #255	@ 0xff
 8015af0:	d904      	bls.n	8015afc <__ascii_wctomb+0x14>
 8015af2:	228a      	movs	r2, #138	@ 0x8a
 8015af4:	601a      	str	r2, [r3, #0]
 8015af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015afa:	4770      	bx	lr
 8015afc:	700a      	strb	r2, [r1, #0]
 8015afe:	2001      	movs	r0, #1
 8015b00:	4770      	bx	lr
	...

08015b04 <fiprintf>:
 8015b04:	b40e      	push	{r1, r2, r3}
 8015b06:	b503      	push	{r0, r1, lr}
 8015b08:	4601      	mov	r1, r0
 8015b0a:	ab03      	add	r3, sp, #12
 8015b0c:	4805      	ldr	r0, [pc, #20]	@ (8015b24 <fiprintf+0x20>)
 8015b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b12:	6800      	ldr	r0, [r0, #0]
 8015b14:	9301      	str	r3, [sp, #4]
 8015b16:	f7fe ff7d 	bl	8014a14 <_vfiprintf_r>
 8015b1a:	b002      	add	sp, #8
 8015b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b20:	b003      	add	sp, #12
 8015b22:	4770      	bx	lr
 8015b24:	2400002c 	.word	0x2400002c

08015b28 <abort>:
 8015b28:	b508      	push	{r3, lr}
 8015b2a:	2006      	movs	r0, #6
 8015b2c:	f000 f834 	bl	8015b98 <raise>
 8015b30:	2001      	movs	r0, #1
 8015b32:	f7ee ff3b 	bl	80049ac <_exit>

08015b36 <_malloc_usable_size_r>:
 8015b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b3a:	1f18      	subs	r0, r3, #4
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	bfbc      	itt	lt
 8015b40:	580b      	ldrlt	r3, [r1, r0]
 8015b42:	18c0      	addlt	r0, r0, r3
 8015b44:	4770      	bx	lr

08015b46 <_raise_r>:
 8015b46:	291f      	cmp	r1, #31
 8015b48:	b538      	push	{r3, r4, r5, lr}
 8015b4a:	4605      	mov	r5, r0
 8015b4c:	460c      	mov	r4, r1
 8015b4e:	d904      	bls.n	8015b5a <_raise_r+0x14>
 8015b50:	2316      	movs	r3, #22
 8015b52:	6003      	str	r3, [r0, #0]
 8015b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015b5c:	b112      	cbz	r2, 8015b64 <_raise_r+0x1e>
 8015b5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b62:	b94b      	cbnz	r3, 8015b78 <_raise_r+0x32>
 8015b64:	4628      	mov	r0, r5
 8015b66:	f000 f831 	bl	8015bcc <_getpid_r>
 8015b6a:	4622      	mov	r2, r4
 8015b6c:	4601      	mov	r1, r0
 8015b6e:	4628      	mov	r0, r5
 8015b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b74:	f000 b818 	b.w	8015ba8 <_kill_r>
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d00a      	beq.n	8015b92 <_raise_r+0x4c>
 8015b7c:	1c59      	adds	r1, r3, #1
 8015b7e:	d103      	bne.n	8015b88 <_raise_r+0x42>
 8015b80:	2316      	movs	r3, #22
 8015b82:	6003      	str	r3, [r0, #0]
 8015b84:	2001      	movs	r0, #1
 8015b86:	e7e7      	b.n	8015b58 <_raise_r+0x12>
 8015b88:	2100      	movs	r1, #0
 8015b8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015b8e:	4620      	mov	r0, r4
 8015b90:	4798      	blx	r3
 8015b92:	2000      	movs	r0, #0
 8015b94:	e7e0      	b.n	8015b58 <_raise_r+0x12>
	...

08015b98 <raise>:
 8015b98:	4b02      	ldr	r3, [pc, #8]	@ (8015ba4 <raise+0xc>)
 8015b9a:	4601      	mov	r1, r0
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f7ff bfd2 	b.w	8015b46 <_raise_r>
 8015ba2:	bf00      	nop
 8015ba4:	2400002c 	.word	0x2400002c

08015ba8 <_kill_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	@ (8015bc8 <_kill_r+0x20>)
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	f7ee fee9 	bl	800498c <_kill>
 8015bba:	1c43      	adds	r3, r0, #1
 8015bbc:	d102      	bne.n	8015bc4 <_kill_r+0x1c>
 8015bbe:	682b      	ldr	r3, [r5, #0]
 8015bc0:	b103      	cbz	r3, 8015bc4 <_kill_r+0x1c>
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	bf00      	nop
 8015bc8:	24005248 	.word	0x24005248

08015bcc <_getpid_r>:
 8015bcc:	f7ee bed6 	b.w	800497c <_getpid>

08015bd0 <cos>:
 8015bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015bd2:	eeb0 7b40 	vmov.f64	d7, d0
 8015bd6:	ee17 3a90 	vmov	r3, s15
 8015bda:	4a21      	ldr	r2, [pc, #132]	@ (8015c60 <cos+0x90>)
 8015bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d806      	bhi.n	8015bf2 <cos+0x22>
 8015be4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015c58 <cos+0x88>
 8015be8:	b005      	add	sp, #20
 8015bea:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bee:	f000 b887 	b.w	8015d00 <__kernel_cos>
 8015bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8015c64 <cos+0x94>)
 8015bf4:	4293      	cmp	r3, r2
 8015bf6:	d904      	bls.n	8015c02 <cos+0x32>
 8015bf8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015bfc:	b005      	add	sp, #20
 8015bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c02:	4668      	mov	r0, sp
 8015c04:	f000 f93c 	bl	8015e80 <__ieee754_rem_pio2>
 8015c08:	f000 0003 	and.w	r0, r0, #3
 8015c0c:	2801      	cmp	r0, #1
 8015c0e:	d009      	beq.n	8015c24 <cos+0x54>
 8015c10:	2802      	cmp	r0, #2
 8015c12:	d010      	beq.n	8015c36 <cos+0x66>
 8015c14:	b9b0      	cbnz	r0, 8015c44 <cos+0x74>
 8015c16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c1a:	ed9d 0b00 	vldr	d0, [sp]
 8015c1e:	f000 f86f 	bl	8015d00 <__kernel_cos>
 8015c22:	e7eb      	b.n	8015bfc <cos+0x2c>
 8015c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c28:	ed9d 0b00 	vldr	d0, [sp]
 8015c2c:	f000 f8d0 	bl	8015dd0 <__kernel_sin>
 8015c30:	eeb1 0b40 	vneg.f64	d0, d0
 8015c34:	e7e2      	b.n	8015bfc <cos+0x2c>
 8015c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c3a:	ed9d 0b00 	vldr	d0, [sp]
 8015c3e:	f000 f85f 	bl	8015d00 <__kernel_cos>
 8015c42:	e7f5      	b.n	8015c30 <cos+0x60>
 8015c44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c48:	ed9d 0b00 	vldr	d0, [sp]
 8015c4c:	2001      	movs	r0, #1
 8015c4e:	f000 f8bf 	bl	8015dd0 <__kernel_sin>
 8015c52:	e7d3      	b.n	8015bfc <cos+0x2c>
 8015c54:	f3af 8000 	nop.w
	...
 8015c60:	3fe921fb 	.word	0x3fe921fb
 8015c64:	7fefffff 	.word	0x7fefffff

08015c68 <sin>:
 8015c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8015c6e:	ee17 3a90 	vmov	r3, s15
 8015c72:	4a21      	ldr	r2, [pc, #132]	@ (8015cf8 <sin+0x90>)
 8015c74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015c78:	4293      	cmp	r3, r2
 8015c7a:	d807      	bhi.n	8015c8c <sin+0x24>
 8015c7c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015cf0 <sin+0x88>
 8015c80:	2000      	movs	r0, #0
 8015c82:	b005      	add	sp, #20
 8015c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c88:	f000 b8a2 	b.w	8015dd0 <__kernel_sin>
 8015c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8015cfc <sin+0x94>)
 8015c8e:	4293      	cmp	r3, r2
 8015c90:	d904      	bls.n	8015c9c <sin+0x34>
 8015c92:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015c96:	b005      	add	sp, #20
 8015c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c9c:	4668      	mov	r0, sp
 8015c9e:	f000 f8ef 	bl	8015e80 <__ieee754_rem_pio2>
 8015ca2:	f000 0003 	and.w	r0, r0, #3
 8015ca6:	2801      	cmp	r0, #1
 8015ca8:	d00a      	beq.n	8015cc0 <sin+0x58>
 8015caa:	2802      	cmp	r0, #2
 8015cac:	d00f      	beq.n	8015cce <sin+0x66>
 8015cae:	b9c0      	cbnz	r0, 8015ce2 <sin+0x7a>
 8015cb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015cb4:	ed9d 0b00 	vldr	d0, [sp]
 8015cb8:	2001      	movs	r0, #1
 8015cba:	f000 f889 	bl	8015dd0 <__kernel_sin>
 8015cbe:	e7ea      	b.n	8015c96 <sin+0x2e>
 8015cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015cc4:	ed9d 0b00 	vldr	d0, [sp]
 8015cc8:	f000 f81a 	bl	8015d00 <__kernel_cos>
 8015ccc:	e7e3      	b.n	8015c96 <sin+0x2e>
 8015cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015cd2:	ed9d 0b00 	vldr	d0, [sp]
 8015cd6:	2001      	movs	r0, #1
 8015cd8:	f000 f87a 	bl	8015dd0 <__kernel_sin>
 8015cdc:	eeb1 0b40 	vneg.f64	d0, d0
 8015ce0:	e7d9      	b.n	8015c96 <sin+0x2e>
 8015ce2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ce6:	ed9d 0b00 	vldr	d0, [sp]
 8015cea:	f000 f809 	bl	8015d00 <__kernel_cos>
 8015cee:	e7f5      	b.n	8015cdc <sin+0x74>
	...
 8015cf8:	3fe921fb 	.word	0x3fe921fb
 8015cfc:	7fefffff 	.word	0x7fefffff

08015d00 <__kernel_cos>:
 8015d00:	eeb0 5b40 	vmov.f64	d5, d0
 8015d04:	ee15 1a90 	vmov	r1, s11
 8015d08:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015d0c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015d10:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015d14:	d204      	bcs.n	8015d20 <__kernel_cos+0x20>
 8015d16:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8015d1a:	ee17 3a90 	vmov	r3, s15
 8015d1e:	b343      	cbz	r3, 8015d72 <__kernel_cos+0x72>
 8015d20:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015d24:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8015d28:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015d98 <__kernel_cos+0x98>
 8015d2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015da0 <__kernel_cos+0xa0>
 8015d30:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015d34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015da8 <__kernel_cos+0xa8>
 8015d38:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015d3c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015db0 <__kernel_cos+0xb0>
 8015d40:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015d44:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015db8 <__kernel_cos+0xb8>
 8015d48:	4b1f      	ldr	r3, [pc, #124]	@ (8015dc8 <__kernel_cos+0xc8>)
 8015d4a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015d4e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015dc0 <__kernel_cos+0xc0>
 8015d52:	4299      	cmp	r1, r3
 8015d54:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015d58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015d5c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015d60:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015d64:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015d68:	d804      	bhi.n	8015d74 <__kernel_cos+0x74>
 8015d6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8015d6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015d72:	4770      	bx	lr
 8015d74:	4b15      	ldr	r3, [pc, #84]	@ (8015dcc <__kernel_cos+0xcc>)
 8015d76:	4299      	cmp	r1, r3
 8015d78:	d809      	bhi.n	8015d8e <__kernel_cos+0x8e>
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015d80:	ec43 2b16 	vmov	d6, r2, r3
 8015d84:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015d88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d8c:	e7ed      	b.n	8015d6a <__kernel_cos+0x6a>
 8015d8e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015d92:	e7f7      	b.n	8015d84 <__kernel_cos+0x84>
 8015d94:	f3af 8000 	nop.w
 8015d98:	be8838d4 	.word	0xbe8838d4
 8015d9c:	bda8fae9 	.word	0xbda8fae9
 8015da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015da4:	3e21ee9e 	.word	0x3e21ee9e
 8015da8:	809c52ad 	.word	0x809c52ad
 8015dac:	be927e4f 	.word	0xbe927e4f
 8015db0:	19cb1590 	.word	0x19cb1590
 8015db4:	3efa01a0 	.word	0x3efa01a0
 8015db8:	16c15177 	.word	0x16c15177
 8015dbc:	bf56c16c 	.word	0xbf56c16c
 8015dc0:	5555554c 	.word	0x5555554c
 8015dc4:	3fa55555 	.word	0x3fa55555
 8015dc8:	3fd33332 	.word	0x3fd33332
 8015dcc:	3fe90000 	.word	0x3fe90000

08015dd0 <__kernel_sin>:
 8015dd0:	ee10 3a90 	vmov	r3, s1
 8015dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015dd8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015ddc:	d204      	bcs.n	8015de8 <__kernel_sin+0x18>
 8015dde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015de2:	ee17 3a90 	vmov	r3, s15
 8015de6:	b35b      	cbz	r3, 8015e40 <__kernel_sin+0x70>
 8015de8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015dec:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015df0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015e48 <__kernel_sin+0x78>
 8015df4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015e50 <__kernel_sin+0x80>
 8015df8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015dfc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015e58 <__kernel_sin+0x88>
 8015e00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015e04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015e60 <__kernel_sin+0x90>
 8015e08:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015e0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015e68 <__kernel_sin+0x98>
 8015e10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015e14:	b930      	cbnz	r0, 8015e24 <__kernel_sin+0x54>
 8015e16:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015e70 <__kernel_sin+0xa0>
 8015e1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015e1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015e22:	4770      	bx	lr
 8015e24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015e28:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8015e2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015e30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015e34:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015e78 <__kernel_sin+0xa8>
 8015e38:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015e3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop
 8015e44:	f3af 8000 	nop.w
 8015e48:	5acfd57c 	.word	0x5acfd57c
 8015e4c:	3de5d93a 	.word	0x3de5d93a
 8015e50:	8a2b9ceb 	.word	0x8a2b9ceb
 8015e54:	be5ae5e6 	.word	0xbe5ae5e6
 8015e58:	57b1fe7d 	.word	0x57b1fe7d
 8015e5c:	3ec71de3 	.word	0x3ec71de3
 8015e60:	19c161d5 	.word	0x19c161d5
 8015e64:	bf2a01a0 	.word	0xbf2a01a0
 8015e68:	1110f8a6 	.word	0x1110f8a6
 8015e6c:	3f811111 	.word	0x3f811111
 8015e70:	55555549 	.word	0x55555549
 8015e74:	bfc55555 	.word	0xbfc55555
 8015e78:	55555549 	.word	0x55555549
 8015e7c:	3fc55555 	.word	0x3fc55555

08015e80 <__ieee754_rem_pio2>:
 8015e80:	b570      	push	{r4, r5, r6, lr}
 8015e82:	eeb0 7b40 	vmov.f64	d7, d0
 8015e86:	ee17 5a90 	vmov	r5, s15
 8015e8a:	4b99      	ldr	r3, [pc, #612]	@ (80160f0 <__ieee754_rem_pio2+0x270>)
 8015e8c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015e90:	429e      	cmp	r6, r3
 8015e92:	b088      	sub	sp, #32
 8015e94:	4604      	mov	r4, r0
 8015e96:	d807      	bhi.n	8015ea8 <__ieee754_rem_pio2+0x28>
 8015e98:	2200      	movs	r2, #0
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	ed84 0b00 	vstr	d0, [r4]
 8015ea0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	e01b      	b.n	8015ee0 <__ieee754_rem_pio2+0x60>
 8015ea8:	4b92      	ldr	r3, [pc, #584]	@ (80160f4 <__ieee754_rem_pio2+0x274>)
 8015eaa:	429e      	cmp	r6, r3
 8015eac:	d83b      	bhi.n	8015f26 <__ieee754_rem_pio2+0xa6>
 8015eae:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8015eb2:	2d00      	cmp	r5, #0
 8015eb4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80160b0 <__ieee754_rem_pio2+0x230>
 8015eb8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8015ebc:	dd19      	ble.n	8015ef2 <__ieee754_rem_pio2+0x72>
 8015ebe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015ec2:	429e      	cmp	r6, r3
 8015ec4:	d00e      	beq.n	8015ee4 <__ieee754_rem_pio2+0x64>
 8015ec6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80160b8 <__ieee754_rem_pio2+0x238>
 8015eca:	ee37 6b45 	vsub.f64	d6, d7, d5
 8015ece:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ed2:	ed84 6b00 	vstr	d6, [r4]
 8015ed6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015eda:	ed84 7b02 	vstr	d7, [r4, #8]
 8015ede:	2001      	movs	r0, #1
 8015ee0:	b008      	add	sp, #32
 8015ee2:	bd70      	pop	{r4, r5, r6, pc}
 8015ee4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80160c0 <__ieee754_rem_pio2+0x240>
 8015ee8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 80160c8 <__ieee754_rem_pio2+0x248>
 8015eec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ef0:	e7eb      	b.n	8015eca <__ieee754_rem_pio2+0x4a>
 8015ef2:	429e      	cmp	r6, r3
 8015ef4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015ef8:	d00e      	beq.n	8015f18 <__ieee754_rem_pio2+0x98>
 8015efa:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80160b8 <__ieee754_rem_pio2+0x238>
 8015efe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015f02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015f06:	ed84 6b00 	vstr	d6, [r4]
 8015f0a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f12:	ed84 7b02 	vstr	d7, [r4, #8]
 8015f16:	e7e3      	b.n	8015ee0 <__ieee754_rem_pio2+0x60>
 8015f18:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80160c0 <__ieee754_rem_pio2+0x240>
 8015f1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 80160c8 <__ieee754_rem_pio2+0x248>
 8015f20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015f24:	e7eb      	b.n	8015efe <__ieee754_rem_pio2+0x7e>
 8015f26:	4b74      	ldr	r3, [pc, #464]	@ (80160f8 <__ieee754_rem_pio2+0x278>)
 8015f28:	429e      	cmp	r6, r3
 8015f2a:	d870      	bhi.n	801600e <__ieee754_rem_pio2+0x18e>
 8015f2c:	f000 f8ec 	bl	8016108 <fabs>
 8015f30:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015f34:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80160d0 <__ieee754_rem_pio2+0x250>
 8015f38:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015f3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015f40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015f44:	ee17 0a90 	vmov	r0, s15
 8015f48:	eeb1 4b45 	vneg.f64	d4, d5
 8015f4c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80160b0 <__ieee754_rem_pio2+0x230>
 8015f50:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015f54:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80160b8 <__ieee754_rem_pio2+0x238>
 8015f58:	281f      	cmp	r0, #31
 8015f5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015f5e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015f62:	dc05      	bgt.n	8015f70 <__ieee754_rem_pio2+0xf0>
 8015f64:	4b65      	ldr	r3, [pc, #404]	@ (80160fc <__ieee754_rem_pio2+0x27c>)
 8015f66:	1e42      	subs	r2, r0, #1
 8015f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f6c:	42b3      	cmp	r3, r6
 8015f6e:	d109      	bne.n	8015f84 <__ieee754_rem_pio2+0x104>
 8015f70:	ee16 3a90 	vmov	r3, s13
 8015f74:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015f78:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015f7c:	2b10      	cmp	r3, #16
 8015f7e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015f82:	dc02      	bgt.n	8015f8a <__ieee754_rem_pio2+0x10a>
 8015f84:	ed84 6b00 	vstr	d6, [r4]
 8015f88:	e01a      	b.n	8015fc0 <__ieee754_rem_pio2+0x140>
 8015f8a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 80160c0 <__ieee754_rem_pio2+0x240>
 8015f8e:	eeb0 6b40 	vmov.f64	d6, d0
 8015f92:	eea4 6b03 	vfma.f64	d6, d4, d3
 8015f96:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015f9a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015f9e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 80160c8 <__ieee754_rem_pio2+0x248>
 8015fa2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015fa6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015faa:	ee13 3a90 	vmov	r3, s7
 8015fae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	2b31      	cmp	r3, #49	@ 0x31
 8015fb6:	dc17      	bgt.n	8015fe8 <__ieee754_rem_pio2+0x168>
 8015fb8:	eeb0 0b46 	vmov.f64	d0, d6
 8015fbc:	ed84 3b00 	vstr	d3, [r4]
 8015fc0:	ed94 6b00 	vldr	d6, [r4]
 8015fc4:	2d00      	cmp	r5, #0
 8015fc6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015fca:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015fce:	ed84 0b02 	vstr	d0, [r4, #8]
 8015fd2:	da85      	bge.n	8015ee0 <__ieee754_rem_pio2+0x60>
 8015fd4:	eeb1 6b46 	vneg.f64	d6, d6
 8015fd8:	eeb1 0b40 	vneg.f64	d0, d0
 8015fdc:	ed84 6b00 	vstr	d6, [r4]
 8015fe0:	ed84 0b02 	vstr	d0, [r4, #8]
 8015fe4:	4240      	negs	r0, r0
 8015fe6:	e77b      	b.n	8015ee0 <__ieee754_rem_pio2+0x60>
 8015fe8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80160d8 <__ieee754_rem_pio2+0x258>
 8015fec:	eeb0 0b46 	vmov.f64	d0, d6
 8015ff0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015ff4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8015ff8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015ffc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80160e0 <__ieee754_rem_pio2+0x260>
 8016000:	eeb0 7b46 	vmov.f64	d7, d6
 8016004:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8016008:	ee30 6b47 	vsub.f64	d6, d0, d7
 801600c:	e7ba      	b.n	8015f84 <__ieee754_rem_pio2+0x104>
 801600e:	4b3c      	ldr	r3, [pc, #240]	@ (8016100 <__ieee754_rem_pio2+0x280>)
 8016010:	429e      	cmp	r6, r3
 8016012:	d906      	bls.n	8016022 <__ieee754_rem_pio2+0x1a2>
 8016014:	ee30 7b40 	vsub.f64	d7, d0, d0
 8016018:	ed80 7b02 	vstr	d7, [r0, #8]
 801601c:	ed80 7b00 	vstr	d7, [r0]
 8016020:	e740      	b.n	8015ea4 <__ieee754_rem_pio2+0x24>
 8016022:	ee10 3a10 	vmov	r3, s0
 8016026:	1532      	asrs	r2, r6, #20
 8016028:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801602c:	4618      	mov	r0, r3
 801602e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8016032:	ec41 0b17 	vmov	d7, r0, r1
 8016036:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801603a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80160e8 <__ieee754_rem_pio2+0x268>
 801603e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8016042:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016046:	ed8d 6b02 	vstr	d6, [sp, #8]
 801604a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801604e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8016052:	a808      	add	r0, sp, #32
 8016054:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8016058:	ee37 7b46 	vsub.f64	d7, d7, d6
 801605c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8016060:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016064:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016068:	2103      	movs	r1, #3
 801606a:	ed30 7b02 	vldmdb	r0!, {d7}
 801606e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016076:	460b      	mov	r3, r1
 8016078:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 801607c:	d0f5      	beq.n	801606a <__ieee754_rem_pio2+0x1ea>
 801607e:	4921      	ldr	r1, [pc, #132]	@ (8016104 <__ieee754_rem_pio2+0x284>)
 8016080:	9101      	str	r1, [sp, #4]
 8016082:	2102      	movs	r1, #2
 8016084:	9100      	str	r1, [sp, #0]
 8016086:	a802      	add	r0, sp, #8
 8016088:	4621      	mov	r1, r4
 801608a:	f000 f845 	bl	8016118 <__kernel_rem_pio2>
 801608e:	2d00      	cmp	r5, #0
 8016090:	f6bf af26 	bge.w	8015ee0 <__ieee754_rem_pio2+0x60>
 8016094:	ed94 7b00 	vldr	d7, [r4]
 8016098:	eeb1 7b47 	vneg.f64	d7, d7
 801609c:	ed84 7b00 	vstr	d7, [r4]
 80160a0:	ed94 7b02 	vldr	d7, [r4, #8]
 80160a4:	eeb1 7b47 	vneg.f64	d7, d7
 80160a8:	ed84 7b02 	vstr	d7, [r4, #8]
 80160ac:	e79a      	b.n	8015fe4 <__ieee754_rem_pio2+0x164>
 80160ae:	bf00      	nop
 80160b0:	54400000 	.word	0x54400000
 80160b4:	3ff921fb 	.word	0x3ff921fb
 80160b8:	1a626331 	.word	0x1a626331
 80160bc:	3dd0b461 	.word	0x3dd0b461
 80160c0:	1a600000 	.word	0x1a600000
 80160c4:	3dd0b461 	.word	0x3dd0b461
 80160c8:	2e037073 	.word	0x2e037073
 80160cc:	3ba3198a 	.word	0x3ba3198a
 80160d0:	6dc9c883 	.word	0x6dc9c883
 80160d4:	3fe45f30 	.word	0x3fe45f30
 80160d8:	2e000000 	.word	0x2e000000
 80160dc:	3ba3198a 	.word	0x3ba3198a
 80160e0:	252049c1 	.word	0x252049c1
 80160e4:	397b839a 	.word	0x397b839a
 80160e8:	00000000 	.word	0x00000000
 80160ec:	41700000 	.word	0x41700000
 80160f0:	3fe921fb 	.word	0x3fe921fb
 80160f4:	4002d97b 	.word	0x4002d97b
 80160f8:	413921fb 	.word	0x413921fb
 80160fc:	080175ac 	.word	0x080175ac
 8016100:	7fefffff 	.word	0x7fefffff
 8016104:	0801762c 	.word	0x0801762c

08016108 <fabs>:
 8016108:	ec51 0b10 	vmov	r0, r1, d0
 801610c:	4602      	mov	r2, r0
 801610e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016112:	ec43 2b10 	vmov	d0, r2, r3
 8016116:	4770      	bx	lr

08016118 <__kernel_rem_pio2>:
 8016118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611c:	ed2d 8b06 	vpush	{d8-d10}
 8016120:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8016124:	469b      	mov	fp, r3
 8016126:	460f      	mov	r7, r1
 8016128:	4bb9      	ldr	r3, [pc, #740]	@ (8016410 <__kernel_rem_pio2+0x2f8>)
 801612a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 801612c:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 801612e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8016132:	9001      	str	r0, [sp, #4]
 8016134:	f112 0f14 	cmn.w	r2, #20
 8016138:	bfa8      	it	ge
 801613a:	1ed3      	subge	r3, r2, #3
 801613c:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8016140:	bfb8      	it	lt
 8016142:	2300      	movlt	r3, #0
 8016144:	f06f 0517 	mvn.w	r5, #23
 8016148:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 80163f8 <__kernel_rem_pio2+0x2e0>
 801614c:	bfa4      	itt	ge
 801614e:	2018      	movge	r0, #24
 8016150:	fb93 f3f0 	sdivge	r3, r3, r0
 8016154:	fb03 5505 	mla	r5, r3, r5, r5
 8016158:	eba3 040a 	sub.w	r4, r3, sl
 801615c:	4415      	add	r5, r2
 801615e:	eb09 0c0a 	add.w	ip, r9, sl
 8016162:	a81a      	add	r0, sp, #104	@ 0x68
 8016164:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 8016168:	2200      	movs	r2, #0
 801616a:	4562      	cmp	r2, ip
 801616c:	dd0e      	ble.n	801618c <__kernel_rem_pio2+0x74>
 801616e:	aa1a      	add	r2, sp, #104	@ 0x68
 8016170:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8016174:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 8016178:	2400      	movs	r4, #0
 801617a:	454c      	cmp	r4, r9
 801617c:	dc23      	bgt.n	80161c6 <__kernel_rem_pio2+0xae>
 801617e:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 80163f8 <__kernel_rem_pio2+0x2e0>
 8016182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016186:	4694      	mov	ip, r2
 8016188:	2000      	movs	r0, #0
 801618a:	e015      	b.n	80161b8 <__kernel_rem_pio2+0xa0>
 801618c:	42d4      	cmn	r4, r2
 801618e:	d409      	bmi.n	80161a4 <__kernel_rem_pio2+0x8c>
 8016190:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8016194:	ee07 1a90 	vmov	s15, r1
 8016198:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801619c:	eca0 7b02 	vstmia	r0!, {d7}
 80161a0:	3201      	adds	r2, #1
 80161a2:	e7e2      	b.n	801616a <__kernel_rem_pio2+0x52>
 80161a4:	eeb0 7b46 	vmov.f64	d7, d6
 80161a8:	e7f8      	b.n	801619c <__kernel_rem_pio2+0x84>
 80161aa:	ecbe 5b02 	vldmia	lr!, {d5}
 80161ae:	ed3c 6b02 	vldmdb	ip!, {d6}
 80161b2:	3001      	adds	r0, #1
 80161b4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80161b8:	4550      	cmp	r0, sl
 80161ba:	ddf6      	ble.n	80161aa <__kernel_rem_pio2+0x92>
 80161bc:	eca8 7b02 	vstmia	r8!, {d7}
 80161c0:	3401      	adds	r4, #1
 80161c2:	3208      	adds	r2, #8
 80161c4:	e7d9      	b.n	801617a <__kernel_rem_pio2+0x62>
 80161c6:	aa06      	add	r2, sp, #24
 80161c8:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 8016400 <__kernel_rem_pio2+0x2e8>
 80161cc:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8016408 <__kernel_rem_pio2+0x2f0>
 80161d0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80161d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80161d8:	9203      	str	r2, [sp, #12]
 80161da:	9302      	str	r3, [sp, #8]
 80161dc:	464c      	mov	r4, r9
 80161de:	00e3      	lsls	r3, r4, #3
 80161e0:	9304      	str	r3, [sp, #16]
 80161e2:	ab92      	add	r3, sp, #584	@ 0x248
 80161e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80161e8:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80161ec:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80161ee:	ab06      	add	r3, sp, #24
 80161f0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80161f4:	461e      	mov	r6, r3
 80161f6:	4620      	mov	r0, r4
 80161f8:	2800      	cmp	r0, #0
 80161fa:	dc4a      	bgt.n	8016292 <__kernel_rem_pio2+0x17a>
 80161fc:	4628      	mov	r0, r5
 80161fe:	9305      	str	r3, [sp, #20]
 8016200:	f000 f9fe 	bl	8016600 <scalbn>
 8016204:	eeb0 8b40 	vmov.f64	d8, d0
 8016208:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801620c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016210:	f000 fa72 	bl	80166f8 <floor>
 8016214:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8016218:	eea0 8b47 	vfms.f64	d8, d0, d7
 801621c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016220:	2d00      	cmp	r5, #0
 8016222:	ee17 8a90 	vmov	r8, s15
 8016226:	9b05      	ldr	r3, [sp, #20]
 8016228:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801622c:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016230:	dd41      	ble.n	80162b6 <__kernel_rem_pio2+0x19e>
 8016232:	1e60      	subs	r0, r4, #1
 8016234:	aa06      	add	r2, sp, #24
 8016236:	f1c5 0c18 	rsb	ip, r5, #24
 801623a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801623e:	fa46 f20c 	asr.w	r2, r6, ip
 8016242:	4490      	add	r8, r2
 8016244:	fa02 f20c 	lsl.w	r2, r2, ip
 8016248:	1ab6      	subs	r6, r6, r2
 801624a:	aa06      	add	r2, sp, #24
 801624c:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8016250:	f1c5 0217 	rsb	r2, r5, #23
 8016254:	4116      	asrs	r6, r2
 8016256:	2e00      	cmp	r6, #0
 8016258:	dd3c      	ble.n	80162d4 <__kernel_rem_pio2+0x1bc>
 801625a:	f04f 0c00 	mov.w	ip, #0
 801625e:	f108 0801 	add.w	r8, r8, #1
 8016262:	4660      	mov	r0, ip
 8016264:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8016268:	4564      	cmp	r4, ip
 801626a:	dc66      	bgt.n	801633a <__kernel_rem_pio2+0x222>
 801626c:	2d00      	cmp	r5, #0
 801626e:	dd03      	ble.n	8016278 <__kernel_rem_pio2+0x160>
 8016270:	2d01      	cmp	r5, #1
 8016272:	d072      	beq.n	801635a <__kernel_rem_pio2+0x242>
 8016274:	2d02      	cmp	r5, #2
 8016276:	d07a      	beq.n	801636e <__kernel_rem_pio2+0x256>
 8016278:	2e02      	cmp	r6, #2
 801627a:	d12b      	bne.n	80162d4 <__kernel_rem_pio2+0x1bc>
 801627c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016280:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016284:	b330      	cbz	r0, 80162d4 <__kernel_rem_pio2+0x1bc>
 8016286:	4628      	mov	r0, r5
 8016288:	f000 f9ba 	bl	8016600 <scalbn>
 801628c:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016290:	e020      	b.n	80162d4 <__kernel_rem_pio2+0x1bc>
 8016292:	ee20 7b09 	vmul.f64	d7, d0, d9
 8016296:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801629a:	3801      	subs	r0, #1
 801629c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80162a0:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80162a4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80162a8:	eca6 0a01 	vstmia	r6!, {s0}
 80162ac:	ed32 0b02 	vldmdb	r2!, {d0}
 80162b0:	ee37 0b00 	vadd.f64	d0, d7, d0
 80162b4:	e7a0      	b.n	80161f8 <__kernel_rem_pio2+0xe0>
 80162b6:	d105      	bne.n	80162c4 <__kernel_rem_pio2+0x1ac>
 80162b8:	1e62      	subs	r2, r4, #1
 80162ba:	a906      	add	r1, sp, #24
 80162bc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80162c0:	15f6      	asrs	r6, r6, #23
 80162c2:	e7c8      	b.n	8016256 <__kernel_rem_pio2+0x13e>
 80162c4:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80162c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d0:	da31      	bge.n	8016336 <__kernel_rem_pio2+0x21e>
 80162d2:	2600      	movs	r6, #0
 80162d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80162d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162dc:	f040 809c 	bne.w	8016418 <__kernel_rem_pio2+0x300>
 80162e0:	1e62      	subs	r2, r4, #1
 80162e2:	2000      	movs	r0, #0
 80162e4:	454a      	cmp	r2, r9
 80162e6:	da49      	bge.n	801637c <__kernel_rem_pio2+0x264>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d062      	beq.n	80163b2 <__kernel_rem_pio2+0x29a>
 80162ec:	3c01      	subs	r4, #1
 80162ee:	ab06      	add	r3, sp, #24
 80162f0:	3d18      	subs	r5, #24
 80162f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d0f8      	beq.n	80162ec <__kernel_rem_pio2+0x1d4>
 80162fa:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80162fe:	4628      	mov	r0, r5
 8016300:	f000 f97e 	bl	8016600 <scalbn>
 8016304:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8016400 <__kernel_rem_pio2+0x2e8>
 8016308:	1c62      	adds	r2, r4, #1
 801630a:	a96a      	add	r1, sp, #424	@ 0x1a8
 801630c:	00d3      	lsls	r3, r2, #3
 801630e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016312:	4622      	mov	r2, r4
 8016314:	2a00      	cmp	r2, #0
 8016316:	f280 80a9 	bge.w	801646c <__kernel_rem_pio2+0x354>
 801631a:	4622      	mov	r2, r4
 801631c:	2a00      	cmp	r2, #0
 801631e:	f2c0 80c7 	blt.w	80164b0 <__kernel_rem_pio2+0x398>
 8016322:	a96a      	add	r1, sp, #424	@ 0x1a8
 8016324:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8016328:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80163f8 <__kernel_rem_pio2+0x2e0>
 801632c:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8016414 <__kernel_rem_pio2+0x2fc>
 8016330:	2000      	movs	r0, #0
 8016332:	1aa1      	subs	r1, r4, r2
 8016334:	e0b1      	b.n	801649a <__kernel_rem_pio2+0x382>
 8016336:	2602      	movs	r6, #2
 8016338:	e78f      	b.n	801625a <__kernel_rem_pio2+0x142>
 801633a:	f853 2b04 	ldr.w	r2, [r3], #4
 801633e:	b948      	cbnz	r0, 8016354 <__kernel_rem_pio2+0x23c>
 8016340:	b122      	cbz	r2, 801634c <__kernel_rem_pio2+0x234>
 8016342:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8016346:	f843 2c04 	str.w	r2, [r3, #-4]
 801634a:	2201      	movs	r2, #1
 801634c:	f10c 0c01 	add.w	ip, ip, #1
 8016350:	4610      	mov	r0, r2
 8016352:	e789      	b.n	8016268 <__kernel_rem_pio2+0x150>
 8016354:	ebae 0202 	sub.w	r2, lr, r2
 8016358:	e7f5      	b.n	8016346 <__kernel_rem_pio2+0x22e>
 801635a:	1e62      	subs	r2, r4, #1
 801635c:	ab06      	add	r3, sp, #24
 801635e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016362:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016366:	a906      	add	r1, sp, #24
 8016368:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801636c:	e784      	b.n	8016278 <__kernel_rem_pio2+0x160>
 801636e:	1e62      	subs	r2, r4, #1
 8016370:	ab06      	add	r3, sp, #24
 8016372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016376:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801637a:	e7f4      	b.n	8016366 <__kernel_rem_pio2+0x24e>
 801637c:	ab06      	add	r3, sp, #24
 801637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016382:	3a01      	subs	r2, #1
 8016384:	4318      	orrs	r0, r3
 8016386:	e7ad      	b.n	80162e4 <__kernel_rem_pio2+0x1cc>
 8016388:	3301      	adds	r3, #1
 801638a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801638e:	2800      	cmp	r0, #0
 8016390:	d0fa      	beq.n	8016388 <__kernel_rem_pio2+0x270>
 8016392:	9a04      	ldr	r2, [sp, #16]
 8016394:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8016398:	446a      	add	r2, sp
 801639a:	eb04 000b 	add.w	r0, r4, fp
 801639e:	a91a      	add	r1, sp, #104	@ 0x68
 80163a0:	1c66      	adds	r6, r4, #1
 80163a2:	3a98      	subs	r2, #152	@ 0x98
 80163a4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80163a8:	4423      	add	r3, r4
 80163aa:	42b3      	cmp	r3, r6
 80163ac:	da04      	bge.n	80163b8 <__kernel_rem_pio2+0x2a0>
 80163ae:	461c      	mov	r4, r3
 80163b0:	e715      	b.n	80161de <__kernel_rem_pio2+0xc6>
 80163b2:	9a03      	ldr	r2, [sp, #12]
 80163b4:	2301      	movs	r3, #1
 80163b6:	e7e8      	b.n	801638a <__kernel_rem_pio2+0x272>
 80163b8:	9902      	ldr	r1, [sp, #8]
 80163ba:	f8dd c004 	ldr.w	ip, [sp, #4]
 80163be:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80163c2:	9104      	str	r1, [sp, #16]
 80163c4:	ee07 1a90 	vmov	s15, r1
 80163c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80163cc:	2400      	movs	r4, #0
 80163ce:	eca0 7b02 	vstmia	r0!, {d7}
 80163d2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80163f8 <__kernel_rem_pio2+0x2e0>
 80163d6:	4686      	mov	lr, r0
 80163d8:	4554      	cmp	r4, sl
 80163da:	dd03      	ble.n	80163e4 <__kernel_rem_pio2+0x2cc>
 80163dc:	eca2 7b02 	vstmia	r2!, {d7}
 80163e0:	3601      	adds	r6, #1
 80163e2:	e7e2      	b.n	80163aa <__kernel_rem_pio2+0x292>
 80163e4:	ecbc 5b02 	vldmia	ip!, {d5}
 80163e8:	ed3e 6b02 	vldmdb	lr!, {d6}
 80163ec:	3401      	adds	r4, #1
 80163ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80163f2:	e7f1      	b.n	80163d8 <__kernel_rem_pio2+0x2c0>
 80163f4:	f3af 8000 	nop.w
	...
 8016404:	3e700000 	.word	0x3e700000
 8016408:	00000000 	.word	0x00000000
 801640c:	41700000 	.word	0x41700000
 8016410:	08017778 	.word	0x08017778
 8016414:	08017738 	.word	0x08017738
 8016418:	4268      	negs	r0, r5
 801641a:	eeb0 0b48 	vmov.f64	d0, d8
 801641e:	f000 f8ef 	bl	8016600 <scalbn>
 8016422:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 80165e8 <__kernel_rem_pio2+0x4d0>
 8016426:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801642a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801642e:	db17      	blt.n	8016460 <__kernel_rem_pio2+0x348>
 8016430:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 80165f0 <__kernel_rem_pio2+0x4d8>
 8016434:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016438:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801643c:	aa06      	add	r2, sp, #24
 801643e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016442:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016446:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801644a:	3518      	adds	r5, #24
 801644c:	ee10 3a10 	vmov	r3, s0
 8016450:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016454:	ee17 3a10 	vmov	r3, s14
 8016458:	3401      	adds	r4, #1
 801645a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801645e:	e74c      	b.n	80162fa <__kernel_rem_pio2+0x1e2>
 8016460:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016464:	aa06      	add	r2, sp, #24
 8016466:	ee10 3a10 	vmov	r3, s0
 801646a:	e7f6      	b.n	801645a <__kernel_rem_pio2+0x342>
 801646c:	a806      	add	r0, sp, #24
 801646e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016472:	9001      	str	r0, [sp, #4]
 8016474:	ee07 0a90 	vmov	s15, r0
 8016478:	3a01      	subs	r2, #1
 801647a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801647e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016482:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016486:	ed21 7b02 	vstmdb	r1!, {d7}
 801648a:	e743      	b.n	8016314 <__kernel_rem_pio2+0x1fc>
 801648c:	ecbc 5b02 	vldmia	ip!, {d5}
 8016490:	ecb5 6b02 	vldmia	r5!, {d6}
 8016494:	3001      	adds	r0, #1
 8016496:	eea5 7b06 	vfma.f64	d7, d5, d6
 801649a:	4548      	cmp	r0, r9
 801649c:	dc01      	bgt.n	80164a2 <__kernel_rem_pio2+0x38a>
 801649e:	4288      	cmp	r0, r1
 80164a0:	ddf4      	ble.n	801648c <__kernel_rem_pio2+0x374>
 80164a2:	a842      	add	r0, sp, #264	@ 0x108
 80164a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80164a8:	ed81 7b00 	vstr	d7, [r1]
 80164ac:	3a01      	subs	r2, #1
 80164ae:	e735      	b.n	801631c <__kernel_rem_pio2+0x204>
 80164b0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80164b2:	2a02      	cmp	r2, #2
 80164b4:	dc0a      	bgt.n	80164cc <__kernel_rem_pio2+0x3b4>
 80164b6:	2a00      	cmp	r2, #0
 80164b8:	dc29      	bgt.n	801650e <__kernel_rem_pio2+0x3f6>
 80164ba:	d042      	beq.n	8016542 <__kernel_rem_pio2+0x42a>
 80164bc:	f008 0007 	and.w	r0, r8, #7
 80164c0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80164c4:	ecbd 8b06 	vpop	{d8-d10}
 80164c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164cc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80164ce:	2a03      	cmp	r2, #3
 80164d0:	d1f4      	bne.n	80164bc <__kernel_rem_pio2+0x3a4>
 80164d2:	a942      	add	r1, sp, #264	@ 0x108
 80164d4:	f1a3 0208 	sub.w	r2, r3, #8
 80164d8:	440a      	add	r2, r1
 80164da:	4611      	mov	r1, r2
 80164dc:	4620      	mov	r0, r4
 80164de:	2800      	cmp	r0, #0
 80164e0:	dc50      	bgt.n	8016584 <__kernel_rem_pio2+0x46c>
 80164e2:	4621      	mov	r1, r4
 80164e4:	2901      	cmp	r1, #1
 80164e6:	dc5d      	bgt.n	80165a4 <__kernel_rem_pio2+0x48c>
 80164e8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80165f8 <__kernel_rem_pio2+0x4e0>
 80164ec:	aa42      	add	r2, sp, #264	@ 0x108
 80164ee:	4413      	add	r3, r2
 80164f0:	2c01      	cmp	r4, #1
 80164f2:	dc67      	bgt.n	80165c4 <__kernel_rem_pio2+0x4ac>
 80164f4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80164f8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80164fc:	2e00      	cmp	r6, #0
 80164fe:	d167      	bne.n	80165d0 <__kernel_rem_pio2+0x4b8>
 8016500:	ed87 5b00 	vstr	d5, [r7]
 8016504:	ed87 6b02 	vstr	d6, [r7, #8]
 8016508:	ed87 7b04 	vstr	d7, [r7, #16]
 801650c:	e7d6      	b.n	80164bc <__kernel_rem_pio2+0x3a4>
 801650e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80165f8 <__kernel_rem_pio2+0x4e0>
 8016512:	aa42      	add	r2, sp, #264	@ 0x108
 8016514:	4413      	add	r3, r2
 8016516:	4622      	mov	r2, r4
 8016518:	2a00      	cmp	r2, #0
 801651a:	da24      	bge.n	8016566 <__kernel_rem_pio2+0x44e>
 801651c:	b34e      	cbz	r6, 8016572 <__kernel_rem_pio2+0x45a>
 801651e:	eeb1 7b46 	vneg.f64	d7, d6
 8016522:	ed87 7b00 	vstr	d7, [r7]
 8016526:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801652a:	aa44      	add	r2, sp, #272	@ 0x110
 801652c:	2301      	movs	r3, #1
 801652e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016532:	429c      	cmp	r4, r3
 8016534:	da20      	bge.n	8016578 <__kernel_rem_pio2+0x460>
 8016536:	b10e      	cbz	r6, 801653c <__kernel_rem_pio2+0x424>
 8016538:	eeb1 7b47 	vneg.f64	d7, d7
 801653c:	ed87 7b02 	vstr	d7, [r7, #8]
 8016540:	e7bc      	b.n	80164bc <__kernel_rem_pio2+0x3a4>
 8016542:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80165f8 <__kernel_rem_pio2+0x4e0>
 8016546:	aa42      	add	r2, sp, #264	@ 0x108
 8016548:	4413      	add	r3, r2
 801654a:	2c00      	cmp	r4, #0
 801654c:	da05      	bge.n	801655a <__kernel_rem_pio2+0x442>
 801654e:	b10e      	cbz	r6, 8016554 <__kernel_rem_pio2+0x43c>
 8016550:	eeb1 7b47 	vneg.f64	d7, d7
 8016554:	ed87 7b00 	vstr	d7, [r7]
 8016558:	e7b0      	b.n	80164bc <__kernel_rem_pio2+0x3a4>
 801655a:	ed33 6b02 	vldmdb	r3!, {d6}
 801655e:	3c01      	subs	r4, #1
 8016560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016564:	e7f1      	b.n	801654a <__kernel_rem_pio2+0x432>
 8016566:	ed33 7b02 	vldmdb	r3!, {d7}
 801656a:	3a01      	subs	r2, #1
 801656c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016570:	e7d2      	b.n	8016518 <__kernel_rem_pio2+0x400>
 8016572:	eeb0 7b46 	vmov.f64	d7, d6
 8016576:	e7d4      	b.n	8016522 <__kernel_rem_pio2+0x40a>
 8016578:	ecb2 6b02 	vldmia	r2!, {d6}
 801657c:	3301      	adds	r3, #1
 801657e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016582:	e7d6      	b.n	8016532 <__kernel_rem_pio2+0x41a>
 8016584:	ed31 7b02 	vldmdb	r1!, {d7}
 8016588:	ed91 5b02 	vldr	d5, [r1, #8]
 801658c:	3801      	subs	r0, #1
 801658e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016592:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016596:	ed81 6b00 	vstr	d6, [r1]
 801659a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801659e:	ed81 7b02 	vstr	d7, [r1, #8]
 80165a2:	e79c      	b.n	80164de <__kernel_rem_pio2+0x3c6>
 80165a4:	ed32 7b02 	vldmdb	r2!, {d7}
 80165a8:	ed92 5b02 	vldr	d5, [r2, #8]
 80165ac:	3901      	subs	r1, #1
 80165ae:	ee37 6b05 	vadd.f64	d6, d7, d5
 80165b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80165b6:	ed82 6b00 	vstr	d6, [r2]
 80165ba:	ee37 7b05 	vadd.f64	d7, d7, d5
 80165be:	ed82 7b02 	vstr	d7, [r2, #8]
 80165c2:	e78f      	b.n	80164e4 <__kernel_rem_pio2+0x3cc>
 80165c4:	ed33 6b02 	vldmdb	r3!, {d6}
 80165c8:	3c01      	subs	r4, #1
 80165ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80165ce:	e78f      	b.n	80164f0 <__kernel_rem_pio2+0x3d8>
 80165d0:	eeb1 5b45 	vneg.f64	d5, d5
 80165d4:	eeb1 6b46 	vneg.f64	d6, d6
 80165d8:	ed87 5b00 	vstr	d5, [r7]
 80165dc:	eeb1 7b47 	vneg.f64	d7, d7
 80165e0:	ed87 6b02 	vstr	d6, [r7, #8]
 80165e4:	e790      	b.n	8016508 <__kernel_rem_pio2+0x3f0>
 80165e6:	bf00      	nop
 80165e8:	00000000 	.word	0x00000000
 80165ec:	41700000 	.word	0x41700000
 80165f0:	00000000 	.word	0x00000000
 80165f4:	3e700000 	.word	0x3e700000
	...

08016600 <scalbn>:
 8016600:	ee10 1a90 	vmov	r1, s1
 8016604:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016608:	b98b      	cbnz	r3, 801662e <scalbn+0x2e>
 801660a:	ee10 3a10 	vmov	r3, s0
 801660e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8016612:	4319      	orrs	r1, r3
 8016614:	d00a      	beq.n	801662c <scalbn+0x2c>
 8016616:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80166c0 <scalbn+0xc0>
 801661a:	4b35      	ldr	r3, [pc, #212]	@ (80166f0 <scalbn+0xf0>)
 801661c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016620:	4298      	cmp	r0, r3
 8016622:	da0b      	bge.n	801663c <scalbn+0x3c>
 8016624:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80166c8 <scalbn+0xc8>
 8016628:	ee20 0b07 	vmul.f64	d0, d0, d7
 801662c:	4770      	bx	lr
 801662e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016632:	4293      	cmp	r3, r2
 8016634:	d107      	bne.n	8016646 <scalbn+0x46>
 8016636:	ee30 0b00 	vadd.f64	d0, d0, d0
 801663a:	4770      	bx	lr
 801663c:	ee10 1a90 	vmov	r1, s1
 8016640:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016644:	3b36      	subs	r3, #54	@ 0x36
 8016646:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801664a:	4290      	cmp	r0, r2
 801664c:	dd0d      	ble.n	801666a <scalbn+0x6a>
 801664e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 80166d0 <scalbn+0xd0>
 8016652:	ee10 3a90 	vmov	r3, s1
 8016656:	eeb0 6b47 	vmov.f64	d6, d7
 801665a:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 80166d8 <scalbn+0xd8>
 801665e:	2b00      	cmp	r3, #0
 8016660:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016664:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016668:	4770      	bx	lr
 801666a:	4418      	add	r0, r3
 801666c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8016670:	4298      	cmp	r0, r3
 8016672:	dcec      	bgt.n	801664e <scalbn+0x4e>
 8016674:	2800      	cmp	r0, #0
 8016676:	dd08      	ble.n	801668a <scalbn+0x8a>
 8016678:	ec53 2b10 	vmov	r2, r3, d0
 801667c:	f36f 511e 	bfc	r1, #20, #11
 8016680:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016684:	ec43 2b10 	vmov	d0, r2, r3
 8016688:	4770      	bx	lr
 801668a:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801668e:	da09      	bge.n	80166a4 <scalbn+0xa4>
 8016690:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80166c8 <scalbn+0xc8>
 8016694:	ee10 3a90 	vmov	r3, s1
 8016698:	eeb0 6b47 	vmov.f64	d6, d7
 801669c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80166e0 <scalbn+0xe0>
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	e7dd      	b.n	8016660 <scalbn+0x60>
 80166a4:	ec53 2b10 	vmov	r2, r3, d0
 80166a8:	3036      	adds	r0, #54	@ 0x36
 80166aa:	f36f 511e 	bfc	r1, #20, #11
 80166ae:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80166b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80166e8 <scalbn+0xe8>
 80166b6:	ec43 2b10 	vmov	d0, r2, r3
 80166ba:	e7b5      	b.n	8016628 <scalbn+0x28>
 80166bc:	f3af 8000 	nop.w
 80166c0:	00000000 	.word	0x00000000
 80166c4:	43500000 	.word	0x43500000
 80166c8:	c2f8f359 	.word	0xc2f8f359
 80166cc:	01a56e1f 	.word	0x01a56e1f
 80166d0:	8800759c 	.word	0x8800759c
 80166d4:	7e37e43c 	.word	0x7e37e43c
 80166d8:	8800759c 	.word	0x8800759c
 80166dc:	fe37e43c 	.word	0xfe37e43c
 80166e0:	c2f8f359 	.word	0xc2f8f359
 80166e4:	81a56e1f 	.word	0x81a56e1f
 80166e8:	00000000 	.word	0x00000000
 80166ec:	3c900000 	.word	0x3c900000
 80166f0:	ffff3cb0 	.word	0xffff3cb0
 80166f4:	00000000 	.word	0x00000000

080166f8 <floor>:
 80166f8:	ee10 3a90 	vmov	r3, s1
 80166fc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8016700:	ee10 2a10 	vmov	r2, s0
 8016704:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016708:	2913      	cmp	r1, #19
 801670a:	b530      	push	{r4, r5, lr}
 801670c:	4615      	mov	r5, r2
 801670e:	dc33      	bgt.n	8016778 <floor+0x80>
 8016710:	2900      	cmp	r1, #0
 8016712:	da18      	bge.n	8016746 <floor+0x4e>
 8016714:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80167d8 <floor+0xe0>
 8016718:	ee30 0b07 	vadd.f64	d0, d0, d7
 801671c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016724:	dd0a      	ble.n	801673c <floor+0x44>
 8016726:	2b00      	cmp	r3, #0
 8016728:	da50      	bge.n	80167cc <floor+0xd4>
 801672a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801672e:	4313      	orrs	r3, r2
 8016730:	2200      	movs	r2, #0
 8016732:	4293      	cmp	r3, r2
 8016734:	4b2a      	ldr	r3, [pc, #168]	@ (80167e0 <floor+0xe8>)
 8016736:	bf08      	it	eq
 8016738:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801673c:	4619      	mov	r1, r3
 801673e:	4610      	mov	r0, r2
 8016740:	ec41 0b10 	vmov	d0, r0, r1
 8016744:	e01f      	b.n	8016786 <floor+0x8e>
 8016746:	4827      	ldr	r0, [pc, #156]	@ (80167e4 <floor+0xec>)
 8016748:	4108      	asrs	r0, r1
 801674a:	ea03 0400 	and.w	r4, r3, r0
 801674e:	4314      	orrs	r4, r2
 8016750:	d019      	beq.n	8016786 <floor+0x8e>
 8016752:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80167d8 <floor+0xe0>
 8016756:	ee30 0b07 	vadd.f64	d0, d0, d7
 801675a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016762:	ddeb      	ble.n	801673c <floor+0x44>
 8016764:	2b00      	cmp	r3, #0
 8016766:	bfbe      	ittt	lt
 8016768:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801676c:	410a      	asrlt	r2, r1
 801676e:	189b      	addlt	r3, r3, r2
 8016770:	ea23 0300 	bic.w	r3, r3, r0
 8016774:	2200      	movs	r2, #0
 8016776:	e7e1      	b.n	801673c <floor+0x44>
 8016778:	2933      	cmp	r1, #51	@ 0x33
 801677a:	dd05      	ble.n	8016788 <floor+0x90>
 801677c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016780:	d101      	bne.n	8016786 <floor+0x8e>
 8016782:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016786:	bd30      	pop	{r4, r5, pc}
 8016788:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801678c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016790:	40e0      	lsrs	r0, r4
 8016792:	4210      	tst	r0, r2
 8016794:	d0f7      	beq.n	8016786 <floor+0x8e>
 8016796:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80167d8 <floor+0xe0>
 801679a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801679e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80167a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a6:	ddc9      	ble.n	801673c <floor+0x44>
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	da02      	bge.n	80167b2 <floor+0xba>
 80167ac:	2914      	cmp	r1, #20
 80167ae:	d103      	bne.n	80167b8 <floor+0xc0>
 80167b0:	3301      	adds	r3, #1
 80167b2:	ea22 0200 	bic.w	r2, r2, r0
 80167b6:	e7c1      	b.n	801673c <floor+0x44>
 80167b8:	2401      	movs	r4, #1
 80167ba:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80167be:	fa04 f101 	lsl.w	r1, r4, r1
 80167c2:	440a      	add	r2, r1
 80167c4:	42aa      	cmp	r2, r5
 80167c6:	bf38      	it	cc
 80167c8:	191b      	addcc	r3, r3, r4
 80167ca:	e7f2      	b.n	80167b2 <floor+0xba>
 80167cc:	2200      	movs	r2, #0
 80167ce:	4613      	mov	r3, r2
 80167d0:	e7b4      	b.n	801673c <floor+0x44>
 80167d2:	bf00      	nop
 80167d4:	f3af 8000 	nop.w
 80167d8:	8800759c 	.word	0x8800759c
 80167dc:	7e37e43c 	.word	0x7e37e43c
 80167e0:	bff00000 	.word	0xbff00000
 80167e4:	000fffff 	.word	0x000fffff

080167e8 <_init>:
 80167e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ea:	bf00      	nop
 80167ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ee:	bc08      	pop	{r3}
 80167f0:	469e      	mov	lr, r3
 80167f2:	4770      	bx	lr

080167f4 <_fini>:
 80167f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167f6:	bf00      	nop
 80167f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167fa:	bc08      	pop	{r3}
 80167fc:	469e      	mov	lr, r3
 80167fe:	4770      	bx	lr
